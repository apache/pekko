/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * license agreements; and to You under the Apache License, version 2.0:
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * This file is part of the Apache Pekko project, which was derived from Akka.
 */

/*
 * Copyright (C) 2019-2022 Lightbend Inc. <https://www.lightbend.com>
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ContainerFormats.proto
// Protobuf Java Version: 4.29.3

package org.apache.pekko.remote;

public final class ContainerFormats {
  private ContainerFormats() {}
  static {
    org.apache.pekko.protobufv3.internal.RuntimeVersion.validateProtobufGencodeVersion(
      org.apache.pekko.protobufv3.internal.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      ContainerFormats.class.getName());
  }
  public static void registerAllExtensions(
      org.apache.pekko.protobufv3.internal.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      org.apache.pekko.protobufv3.internal.ExtensionRegistry registry) {
    registerAllExtensions(
        (org.apache.pekko.protobufv3.internal.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code PatternType}
   */
  public enum PatternType
      implements org.apache.pekko.protobufv3.internal.ProtocolMessageEnum {
    /**
     * <code>PARENT = 0;</code>
     */
    PARENT(0),
    /**
     * <code>CHILD_NAME = 1;</code>
     */
    CHILD_NAME(1),
    /**
     * <code>CHILD_PATTERN = 2;</code>
     */
    CHILD_PATTERN(2),
    ;

    static {
      org.apache.pekko.protobufv3.internal.RuntimeVersion.validateProtobufGencodeVersion(
        org.apache.pekko.protobufv3.internal.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        PatternType.class.getName());
    }
    /**
     * <code>PARENT = 0;</code>
     */
    public static final int PARENT_VALUE = 0;
    /**
     * <code>CHILD_NAME = 1;</code>
     */
    public static final int CHILD_NAME_VALUE = 1;
    /**
     * <code>CHILD_PATTERN = 2;</code>
     */
    public static final int CHILD_PATTERN_VALUE = 2;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static PatternType forNumber(int value) {
      switch (value) {
        case 0: return PARENT;
        case 1: return CHILD_NAME;
        case 2: return CHILD_PATTERN;
        default: return null;
      }
    }

    public static org.apache.pekko.protobufv3.internal.Internal.EnumLiteMap<PatternType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final org.apache.pekko.protobufv3.internal.Internal.EnumLiteMap<
        PatternType> internalValueMap =
          new org.apache.pekko.protobufv3.internal.Internal.EnumLiteMap<PatternType>() {
            public PatternType findValueByNumber(int number) {
              return PatternType.forNumber(number);
            }
          };

    public final org.apache.pekko.protobufv3.internal.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final org.apache.pekko.protobufv3.internal.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final org.apache.pekko.protobufv3.internal.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.apache.pekko.remote.ContainerFormats.getDescriptor().getEnumTypes().get(0);
    }

    private static final PatternType[] VALUES = values();

    public static PatternType valueOf(
        org.apache.pekko.protobufv3.internal.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PatternType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:PatternType)
  }

  public interface SelectionEnvelopeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SelectionEnvelope)
      org.apache.pekko.protobufv3.internal.MessageOrBuilder {

    /**
     * <code>required bytes enclosedMessage = 1;</code>
     * @return Whether the enclosedMessage field is set.
     */
    boolean hasEnclosedMessage();
    /**
     * <code>required bytes enclosedMessage = 1;</code>
     * @return The enclosedMessage.
     */
    org.apache.pekko.protobufv3.internal.ByteString getEnclosedMessage();

    /**
     * <code>required int32 serializerId = 2;</code>
     * @return Whether the serializerId field is set.
     */
    boolean hasSerializerId();
    /**
     * <code>required int32 serializerId = 2;</code>
     * @return The serializerId.
     */
    int getSerializerId();

    /**
     * <code>repeated .Selection pattern = 3;</code>
     */
    java.util.List<org.apache.pekko.remote.ContainerFormats.Selection> 
        getPatternList();
    /**
     * <code>repeated .Selection pattern = 3;</code>
     */
    org.apache.pekko.remote.ContainerFormats.Selection getPattern(int index);
    /**
     * <code>repeated .Selection pattern = 3;</code>
     */
    int getPatternCount();
    /**
     * <code>repeated .Selection pattern = 3;</code>
     */
    java.util.List<? extends org.apache.pekko.remote.ContainerFormats.SelectionOrBuilder> 
        getPatternOrBuilderList();
    /**
     * <code>repeated .Selection pattern = 3;</code>
     */
    org.apache.pekko.remote.ContainerFormats.SelectionOrBuilder getPatternOrBuilder(
        int index);

    /**
     * <code>optional bytes messageManifest = 4;</code>
     * @return Whether the messageManifest field is set.
     */
    boolean hasMessageManifest();
    /**
     * <code>optional bytes messageManifest = 4;</code>
     * @return The messageManifest.
     */
    org.apache.pekko.protobufv3.internal.ByteString getMessageManifest();

    /**
     * <pre>
     * optional for pre 2.3.4 compatibility 
     * </pre>
     *
     * <code>optional bool wildcardFanOut = 5;</code>
     * @return Whether the wildcardFanOut field is set.
     */
    boolean hasWildcardFanOut();
    /**
     * <pre>
     * optional for pre 2.3.4 compatibility 
     * </pre>
     *
     * <code>optional bool wildcardFanOut = 5;</code>
     * @return The wildcardFanOut.
     */
    boolean getWildcardFanOut();
  }
  /**
   * Protobuf type {@code SelectionEnvelope}
   */
  public static final class SelectionEnvelope extends
      org.apache.pekko.protobufv3.internal.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:SelectionEnvelope)
      SelectionEnvelopeOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.apache.pekko.protobufv3.internal.RuntimeVersion.validateProtobufGencodeVersion(
        org.apache.pekko.protobufv3.internal.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        SelectionEnvelope.class.getName());
    }
    // Use SelectionEnvelope.newBuilder() to construct.
    private SelectionEnvelope(org.apache.pekko.protobufv3.internal.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private SelectionEnvelope() {
      enclosedMessage_ = org.apache.pekko.protobufv3.internal.ByteString.EMPTY;
      pattern_ = java.util.Collections.emptyList();
      messageManifest_ = org.apache.pekko.protobufv3.internal.ByteString.EMPTY;
    }

    public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.pekko.remote.ContainerFormats.internal_static_SelectionEnvelope_descriptor;
    }

    @java.lang.Override
    protected org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.pekko.remote.ContainerFormats.internal_static_SelectionEnvelope_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.pekko.remote.ContainerFormats.SelectionEnvelope.class, org.apache.pekko.remote.ContainerFormats.SelectionEnvelope.Builder.class);
    }

    private int bitField0_;
    public static final int ENCLOSEDMESSAGE_FIELD_NUMBER = 1;
    private org.apache.pekko.protobufv3.internal.ByteString enclosedMessage_ = org.apache.pekko.protobufv3.internal.ByteString.EMPTY;
    /**
     * <code>required bytes enclosedMessage = 1;</code>
     * @return Whether the enclosedMessage field is set.
     */
    @java.lang.Override
    public boolean hasEnclosedMessage() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required bytes enclosedMessage = 1;</code>
     * @return The enclosedMessage.
     */
    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.ByteString getEnclosedMessage() {
      return enclosedMessage_;
    }

    public static final int SERIALIZERID_FIELD_NUMBER = 2;
    private int serializerId_ = 0;
    /**
     * <code>required int32 serializerId = 2;</code>
     * @return Whether the serializerId field is set.
     */
    @java.lang.Override
    public boolean hasSerializerId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>required int32 serializerId = 2;</code>
     * @return The serializerId.
     */
    @java.lang.Override
    public int getSerializerId() {
      return serializerId_;
    }

    public static final int PATTERN_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private java.util.List<org.apache.pekko.remote.ContainerFormats.Selection> pattern_;
    /**
     * <code>repeated .Selection pattern = 3;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.pekko.remote.ContainerFormats.Selection> getPatternList() {
      return pattern_;
    }
    /**
     * <code>repeated .Selection pattern = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.pekko.remote.ContainerFormats.SelectionOrBuilder> 
        getPatternOrBuilderList() {
      return pattern_;
    }
    /**
     * <code>repeated .Selection pattern = 3;</code>
     */
    @java.lang.Override
    public int getPatternCount() {
      return pattern_.size();
    }
    /**
     * <code>repeated .Selection pattern = 3;</code>
     */
    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.Selection getPattern(int index) {
      return pattern_.get(index);
    }
    /**
     * <code>repeated .Selection pattern = 3;</code>
     */
    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.SelectionOrBuilder getPatternOrBuilder(
        int index) {
      return pattern_.get(index);
    }

    public static final int MESSAGEMANIFEST_FIELD_NUMBER = 4;
    private org.apache.pekko.protobufv3.internal.ByteString messageManifest_ = org.apache.pekko.protobufv3.internal.ByteString.EMPTY;
    /**
     * <code>optional bytes messageManifest = 4;</code>
     * @return Whether the messageManifest field is set.
     */
    @java.lang.Override
    public boolean hasMessageManifest() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional bytes messageManifest = 4;</code>
     * @return The messageManifest.
     */
    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.ByteString getMessageManifest() {
      return messageManifest_;
    }

    public static final int WILDCARDFANOUT_FIELD_NUMBER = 5;
    private boolean wildcardFanOut_ = false;
    /**
     * <pre>
     * optional for pre 2.3.4 compatibility 
     * </pre>
     *
     * <code>optional bool wildcardFanOut = 5;</code>
     * @return Whether the wildcardFanOut field is set.
     */
    @java.lang.Override
    public boolean hasWildcardFanOut() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * optional for pre 2.3.4 compatibility 
     * </pre>
     *
     * <code>optional bool wildcardFanOut = 5;</code>
     * @return The wildcardFanOut.
     */
    @java.lang.Override
    public boolean getWildcardFanOut() {
      return wildcardFanOut_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasEnclosedMessage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSerializerId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getPatternCount(); i++) {
        if (!getPattern(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.apache.pekko.protobufv3.internal.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBytes(1, enclosedMessage_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, serializerId_);
      }
      for (int i = 0; i < pattern_.size(); i++) {
        output.writeMessage(3, pattern_.get(i));
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBytes(4, messageManifest_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeBool(5, wildcardFanOut_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeBytesSize(1, enclosedMessage_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeInt32Size(2, serializerId_);
      }
      for (int i = 0; i < pattern_.size(); i++) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeMessageSize(3, pattern_.get(i));
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeBytesSize(4, messageManifest_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeBoolSize(5, wildcardFanOut_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.pekko.remote.ContainerFormats.SelectionEnvelope)) {
        return super.equals(obj);
      }
      org.apache.pekko.remote.ContainerFormats.SelectionEnvelope other = (org.apache.pekko.remote.ContainerFormats.SelectionEnvelope) obj;

      if (hasEnclosedMessage() != other.hasEnclosedMessage()) return false;
      if (hasEnclosedMessage()) {
        if (!getEnclosedMessage()
            .equals(other.getEnclosedMessage())) return false;
      }
      if (hasSerializerId() != other.hasSerializerId()) return false;
      if (hasSerializerId()) {
        if (getSerializerId()
            != other.getSerializerId()) return false;
      }
      if (!getPatternList()
          .equals(other.getPatternList())) return false;
      if (hasMessageManifest() != other.hasMessageManifest()) return false;
      if (hasMessageManifest()) {
        if (!getMessageManifest()
            .equals(other.getMessageManifest())) return false;
      }
      if (hasWildcardFanOut() != other.hasWildcardFanOut()) return false;
      if (hasWildcardFanOut()) {
        if (getWildcardFanOut()
            != other.getWildcardFanOut()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasEnclosedMessage()) {
        hash = (37 * hash) + ENCLOSEDMESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getEnclosedMessage().hashCode();
      }
      if (hasSerializerId()) {
        hash = (37 * hash) + SERIALIZERID_FIELD_NUMBER;
        hash = (53 * hash) + getSerializerId();
      }
      if (getPatternCount() > 0) {
        hash = (37 * hash) + PATTERN_FIELD_NUMBER;
        hash = (53 * hash) + getPatternList().hashCode();
      }
      if (hasMessageManifest()) {
        hash = (37 * hash) + MESSAGEMANIFEST_FIELD_NUMBER;
        hash = (53 * hash) + getMessageManifest().hashCode();
      }
      if (hasWildcardFanOut()) {
        hash = (37 * hash) + WILDCARDFANOUT_FIELD_NUMBER;
        hash = (53 * hash) + org.apache.pekko.protobufv3.internal.Internal.hashBoolean(
            getWildcardFanOut());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.pekko.remote.ContainerFormats.SelectionEnvelope parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.SelectionEnvelope parseFrom(
        java.nio.ByteBuffer data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.SelectionEnvelope parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.SelectionEnvelope parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.SelectionEnvelope parseFrom(byte[] data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.SelectionEnvelope parseFrom(
        byte[] data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.SelectionEnvelope parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ContainerFormats.SelectionEnvelope parseFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.pekko.remote.ContainerFormats.SelectionEnvelope parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.pekko.remote.ContainerFormats.SelectionEnvelope parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.SelectionEnvelope parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ContainerFormats.SelectionEnvelope parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.pekko.remote.ContainerFormats.SelectionEnvelope prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.apache.pekko.protobufv3.internal.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SelectionEnvelope}
     */
    public static final class Builder extends
        org.apache.pekko.protobufv3.internal.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SelectionEnvelope)
        org.apache.pekko.remote.ContainerFormats.SelectionEnvelopeOrBuilder {
      public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_SelectionEnvelope_descriptor;
      }

      @java.lang.Override
      protected org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_SelectionEnvelope_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.pekko.remote.ContainerFormats.SelectionEnvelope.class, org.apache.pekko.remote.ContainerFormats.SelectionEnvelope.Builder.class);
      }

      // Construct using org.apache.pekko.remote.ContainerFormats.SelectionEnvelope.newBuilder()
      private Builder() {

      }

      private Builder(
          org.apache.pekko.protobufv3.internal.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        enclosedMessage_ = org.apache.pekko.protobufv3.internal.ByteString.EMPTY;
        serializerId_ = 0;
        if (patternBuilder_ == null) {
          pattern_ = java.util.Collections.emptyList();
        } else {
          pattern_ = null;
          patternBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        messageManifest_ = org.apache.pekko.protobufv3.internal.ByteString.EMPTY;
        wildcardFanOut_ = false;
        return this;
      }

      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_SelectionEnvelope_descriptor;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.SelectionEnvelope getDefaultInstanceForType() {
        return org.apache.pekko.remote.ContainerFormats.SelectionEnvelope.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.SelectionEnvelope build() {
        org.apache.pekko.remote.ContainerFormats.SelectionEnvelope result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.SelectionEnvelope buildPartial() {
        org.apache.pekko.remote.ContainerFormats.SelectionEnvelope result = new org.apache.pekko.remote.ContainerFormats.SelectionEnvelope(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.apache.pekko.remote.ContainerFormats.SelectionEnvelope result) {
        if (patternBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            pattern_ = java.util.Collections.unmodifiableList(pattern_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.pattern_ = pattern_;
        } else {
          result.pattern_ = patternBuilder_.build();
        }
      }

      private void buildPartial0(org.apache.pekko.remote.ContainerFormats.SelectionEnvelope result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.enclosedMessage_ = enclosedMessage_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.serializerId_ = serializerId_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.messageManifest_ = messageManifest_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.wildcardFanOut_ = wildcardFanOut_;
          to_bitField0_ |= 0x00000008;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.apache.pekko.protobufv3.internal.Message other) {
        if (other instanceof org.apache.pekko.remote.ContainerFormats.SelectionEnvelope) {
          return mergeFrom((org.apache.pekko.remote.ContainerFormats.SelectionEnvelope)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.pekko.remote.ContainerFormats.SelectionEnvelope other) {
        if (other == org.apache.pekko.remote.ContainerFormats.SelectionEnvelope.getDefaultInstance()) return this;
        if (other.hasEnclosedMessage()) {
          setEnclosedMessage(other.getEnclosedMessage());
        }
        if (other.hasSerializerId()) {
          setSerializerId(other.getSerializerId());
        }
        if (patternBuilder_ == null) {
          if (!other.pattern_.isEmpty()) {
            if (pattern_.isEmpty()) {
              pattern_ = other.pattern_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensurePatternIsMutable();
              pattern_.addAll(other.pattern_);
            }
            onChanged();
          }
        } else {
          if (!other.pattern_.isEmpty()) {
            if (patternBuilder_.isEmpty()) {
              patternBuilder_.dispose();
              patternBuilder_ = null;
              pattern_ = other.pattern_;
              bitField0_ = (bitField0_ & ~0x00000004);
              patternBuilder_ = 
                org.apache.pekko.protobufv3.internal.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPatternFieldBuilder() : null;
            } else {
              patternBuilder_.addAllMessages(other.pattern_);
            }
          }
        }
        if (other.hasMessageManifest()) {
          setMessageManifest(other.getMessageManifest());
        }
        if (other.hasWildcardFanOut()) {
          setWildcardFanOut(other.getWildcardFanOut());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasEnclosedMessage()) {
          return false;
        }
        if (!hasSerializerId()) {
          return false;
        }
        for (int i = 0; i < getPatternCount(); i++) {
          if (!getPattern(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                enclosedMessage_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                serializerId_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 26: {
                org.apache.pekko.remote.ContainerFormats.Selection m =
                    input.readMessage(
                        org.apache.pekko.remote.ContainerFormats.Selection.parser(),
                        extensionRegistry);
                if (patternBuilder_ == null) {
                  ensurePatternIsMutable();
                  pattern_.add(m);
                } else {
                  patternBuilder_.addMessage(m);
                }
                break;
              } // case 26
              case 34: {
                messageManifest_ = input.readBytes();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 40: {
                wildcardFanOut_ = input.readBool();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.apache.pekko.protobufv3.internal.ByteString enclosedMessage_ = org.apache.pekko.protobufv3.internal.ByteString.EMPTY;
      /**
       * <code>required bytes enclosedMessage = 1;</code>
       * @return Whether the enclosedMessage field is set.
       */
      @java.lang.Override
      public boolean hasEnclosedMessage() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required bytes enclosedMessage = 1;</code>
       * @return The enclosedMessage.
       */
      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.ByteString getEnclosedMessage() {
        return enclosedMessage_;
      }
      /**
       * <code>required bytes enclosedMessage = 1;</code>
       * @param value The enclosedMessage to set.
       * @return This builder for chaining.
       */
      public Builder setEnclosedMessage(org.apache.pekko.protobufv3.internal.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        enclosedMessage_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes enclosedMessage = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearEnclosedMessage() {
        bitField0_ = (bitField0_ & ~0x00000001);
        enclosedMessage_ = getDefaultInstance().getEnclosedMessage();
        onChanged();
        return this;
      }

      private int serializerId_ ;
      /**
       * <code>required int32 serializerId = 2;</code>
       * @return Whether the serializerId field is set.
       */
      @java.lang.Override
      public boolean hasSerializerId() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>required int32 serializerId = 2;</code>
       * @return The serializerId.
       */
      @java.lang.Override
      public int getSerializerId() {
        return serializerId_;
      }
      /**
       * <code>required int32 serializerId = 2;</code>
       * @param value The serializerId to set.
       * @return This builder for chaining.
       */
      public Builder setSerializerId(int value) {

        serializerId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 serializerId = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSerializerId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        serializerId_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<org.apache.pekko.remote.ContainerFormats.Selection> pattern_ =
        java.util.Collections.emptyList();
      private void ensurePatternIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          pattern_ = new java.util.ArrayList<org.apache.pekko.remote.ContainerFormats.Selection>(pattern_);
          bitField0_ |= 0x00000004;
         }
      }

      private org.apache.pekko.protobufv3.internal.RepeatedFieldBuilder<
          org.apache.pekko.remote.ContainerFormats.Selection, org.apache.pekko.remote.ContainerFormats.Selection.Builder, org.apache.pekko.remote.ContainerFormats.SelectionOrBuilder> patternBuilder_;

      /**
       * <code>repeated .Selection pattern = 3;</code>
       */
      public java.util.List<org.apache.pekko.remote.ContainerFormats.Selection> getPatternList() {
        if (patternBuilder_ == null) {
          return java.util.Collections.unmodifiableList(pattern_);
        } else {
          return patternBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Selection pattern = 3;</code>
       */
      public int getPatternCount() {
        if (patternBuilder_ == null) {
          return pattern_.size();
        } else {
          return patternBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Selection pattern = 3;</code>
       */
      public org.apache.pekko.remote.ContainerFormats.Selection getPattern(int index) {
        if (patternBuilder_ == null) {
          return pattern_.get(index);
        } else {
          return patternBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Selection pattern = 3;</code>
       */
      public Builder setPattern(
          int index, org.apache.pekko.remote.ContainerFormats.Selection value) {
        if (patternBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePatternIsMutable();
          pattern_.set(index, value);
          onChanged();
        } else {
          patternBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Selection pattern = 3;</code>
       */
      public Builder setPattern(
          int index, org.apache.pekko.remote.ContainerFormats.Selection.Builder builderForValue) {
        if (patternBuilder_ == null) {
          ensurePatternIsMutable();
          pattern_.set(index, builderForValue.build());
          onChanged();
        } else {
          patternBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Selection pattern = 3;</code>
       */
      public Builder addPattern(org.apache.pekko.remote.ContainerFormats.Selection value) {
        if (patternBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePatternIsMutable();
          pattern_.add(value);
          onChanged();
        } else {
          patternBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Selection pattern = 3;</code>
       */
      public Builder addPattern(
          int index, org.apache.pekko.remote.ContainerFormats.Selection value) {
        if (patternBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePatternIsMutable();
          pattern_.add(index, value);
          onChanged();
        } else {
          patternBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Selection pattern = 3;</code>
       */
      public Builder addPattern(
          org.apache.pekko.remote.ContainerFormats.Selection.Builder builderForValue) {
        if (patternBuilder_ == null) {
          ensurePatternIsMutable();
          pattern_.add(builderForValue.build());
          onChanged();
        } else {
          patternBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Selection pattern = 3;</code>
       */
      public Builder addPattern(
          int index, org.apache.pekko.remote.ContainerFormats.Selection.Builder builderForValue) {
        if (patternBuilder_ == null) {
          ensurePatternIsMutable();
          pattern_.add(index, builderForValue.build());
          onChanged();
        } else {
          patternBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Selection pattern = 3;</code>
       */
      public Builder addAllPattern(
          java.lang.Iterable<? extends org.apache.pekko.remote.ContainerFormats.Selection> values) {
        if (patternBuilder_ == null) {
          ensurePatternIsMutable();
          org.apache.pekko.protobufv3.internal.AbstractMessageLite.Builder.addAll(
              values, pattern_);
          onChanged();
        } else {
          patternBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Selection pattern = 3;</code>
       */
      public Builder clearPattern() {
        if (patternBuilder_ == null) {
          pattern_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          patternBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Selection pattern = 3;</code>
       */
      public Builder removePattern(int index) {
        if (patternBuilder_ == null) {
          ensurePatternIsMutable();
          pattern_.remove(index);
          onChanged();
        } else {
          patternBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Selection pattern = 3;</code>
       */
      public org.apache.pekko.remote.ContainerFormats.Selection.Builder getPatternBuilder(
          int index) {
        return getPatternFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Selection pattern = 3;</code>
       */
      public org.apache.pekko.remote.ContainerFormats.SelectionOrBuilder getPatternOrBuilder(
          int index) {
        if (patternBuilder_ == null) {
          return pattern_.get(index);  } else {
          return patternBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Selection pattern = 3;</code>
       */
      public java.util.List<? extends org.apache.pekko.remote.ContainerFormats.SelectionOrBuilder> 
           getPatternOrBuilderList() {
        if (patternBuilder_ != null) {
          return patternBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(pattern_);
        }
      }
      /**
       * <code>repeated .Selection pattern = 3;</code>
       */
      public org.apache.pekko.remote.ContainerFormats.Selection.Builder addPatternBuilder() {
        return getPatternFieldBuilder().addBuilder(
            org.apache.pekko.remote.ContainerFormats.Selection.getDefaultInstance());
      }
      /**
       * <code>repeated .Selection pattern = 3;</code>
       */
      public org.apache.pekko.remote.ContainerFormats.Selection.Builder addPatternBuilder(
          int index) {
        return getPatternFieldBuilder().addBuilder(
            index, org.apache.pekko.remote.ContainerFormats.Selection.getDefaultInstance());
      }
      /**
       * <code>repeated .Selection pattern = 3;</code>
       */
      public java.util.List<org.apache.pekko.remote.ContainerFormats.Selection.Builder> 
           getPatternBuilderList() {
        return getPatternFieldBuilder().getBuilderList();
      }
      private org.apache.pekko.protobufv3.internal.RepeatedFieldBuilder<
          org.apache.pekko.remote.ContainerFormats.Selection, org.apache.pekko.remote.ContainerFormats.Selection.Builder, org.apache.pekko.remote.ContainerFormats.SelectionOrBuilder> 
          getPatternFieldBuilder() {
        if (patternBuilder_ == null) {
          patternBuilder_ = new org.apache.pekko.protobufv3.internal.RepeatedFieldBuilder<
              org.apache.pekko.remote.ContainerFormats.Selection, org.apache.pekko.remote.ContainerFormats.Selection.Builder, org.apache.pekko.remote.ContainerFormats.SelectionOrBuilder>(
                  pattern_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          pattern_ = null;
        }
        return patternBuilder_;
      }

      private org.apache.pekko.protobufv3.internal.ByteString messageManifest_ = org.apache.pekko.protobufv3.internal.ByteString.EMPTY;
      /**
       * <code>optional bytes messageManifest = 4;</code>
       * @return Whether the messageManifest field is set.
       */
      @java.lang.Override
      public boolean hasMessageManifest() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional bytes messageManifest = 4;</code>
       * @return The messageManifest.
       */
      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.ByteString getMessageManifest() {
        return messageManifest_;
      }
      /**
       * <code>optional bytes messageManifest = 4;</code>
       * @param value The messageManifest to set.
       * @return This builder for chaining.
       */
      public Builder setMessageManifest(org.apache.pekko.protobufv3.internal.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        messageManifest_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes messageManifest = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearMessageManifest() {
        bitField0_ = (bitField0_ & ~0x00000008);
        messageManifest_ = getDefaultInstance().getMessageManifest();
        onChanged();
        return this;
      }

      private boolean wildcardFanOut_ ;
      /**
       * <pre>
       * optional for pre 2.3.4 compatibility 
       * </pre>
       *
       * <code>optional bool wildcardFanOut = 5;</code>
       * @return Whether the wildcardFanOut field is set.
       */
      @java.lang.Override
      public boolean hasWildcardFanOut() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * optional for pre 2.3.4 compatibility 
       * </pre>
       *
       * <code>optional bool wildcardFanOut = 5;</code>
       * @return The wildcardFanOut.
       */
      @java.lang.Override
      public boolean getWildcardFanOut() {
        return wildcardFanOut_;
      }
      /**
       * <pre>
       * optional for pre 2.3.4 compatibility 
       * </pre>
       *
       * <code>optional bool wildcardFanOut = 5;</code>
       * @param value The wildcardFanOut to set.
       * @return This builder for chaining.
       */
      public Builder setWildcardFanOut(boolean value) {

        wildcardFanOut_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * optional for pre 2.3.4 compatibility 
       * </pre>
       *
       * <code>optional bool wildcardFanOut = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearWildcardFanOut() {
        bitField0_ = (bitField0_ & ~0x00000010);
        wildcardFanOut_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:SelectionEnvelope)
    }

    // @@protoc_insertion_point(class_scope:SelectionEnvelope)
    private static final org.apache.pekko.remote.ContainerFormats.SelectionEnvelope DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.pekko.remote.ContainerFormats.SelectionEnvelope();
    }

    public static org.apache.pekko.remote.ContainerFormats.SelectionEnvelope getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.pekko.protobufv3.internal.Parser<SelectionEnvelope>
        PARSER = new org.apache.pekko.protobufv3.internal.AbstractParser<SelectionEnvelope>() {
      @java.lang.Override
      public SelectionEnvelope parsePartialFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.apache.pekko.protobufv3.internal.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.apache.pekko.protobufv3.internal.Parser<SelectionEnvelope> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.Parser<SelectionEnvelope> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.SelectionEnvelope getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SelectionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Selection)
      org.apache.pekko.protobufv3.internal.MessageOrBuilder {

    /**
     * <code>required .PatternType type = 1;</code>
     * @return Whether the type field is set.
     */
    boolean hasType();
    /**
     * <code>required .PatternType type = 1;</code>
     * @return The type.
     */
    org.apache.pekko.remote.ContainerFormats.PatternType getType();

    /**
     * <code>optional string matcher = 2;</code>
     * @return Whether the matcher field is set.
     */
    boolean hasMatcher();
    /**
     * <code>optional string matcher = 2;</code>
     * @return The matcher.
     */
    java.lang.String getMatcher();
    /**
     * <code>optional string matcher = 2;</code>
     * @return The bytes for matcher.
     */
    org.apache.pekko.protobufv3.internal.ByteString
        getMatcherBytes();
  }
  /**
   * Protobuf type {@code Selection}
   */
  public static final class Selection extends
      org.apache.pekko.protobufv3.internal.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Selection)
      SelectionOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.apache.pekko.protobufv3.internal.RuntimeVersion.validateProtobufGencodeVersion(
        org.apache.pekko.protobufv3.internal.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Selection.class.getName());
    }
    // Use Selection.newBuilder() to construct.
    private Selection(org.apache.pekko.protobufv3.internal.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Selection() {
      type_ = 0;
      matcher_ = "";
    }

    public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.pekko.remote.ContainerFormats.internal_static_Selection_descriptor;
    }

    @java.lang.Override
    protected org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.pekko.remote.ContainerFormats.internal_static_Selection_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.pekko.remote.ContainerFormats.Selection.class, org.apache.pekko.remote.ContainerFormats.Selection.Builder.class);
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_ = 0;
    /**
     * <code>required .PatternType type = 1;</code>
     * @return Whether the type field is set.
     */
    @java.lang.Override public boolean hasType() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required .PatternType type = 1;</code>
     * @return The type.
     */
    @java.lang.Override public org.apache.pekko.remote.ContainerFormats.PatternType getType() {
      org.apache.pekko.remote.ContainerFormats.PatternType result = org.apache.pekko.remote.ContainerFormats.PatternType.forNumber(type_);
      return result == null ? org.apache.pekko.remote.ContainerFormats.PatternType.PARENT : result;
    }

    public static final int MATCHER_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object matcher_ = "";
    /**
     * <code>optional string matcher = 2;</code>
     * @return Whether the matcher field is set.
     */
    @java.lang.Override
    public boolean hasMatcher() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional string matcher = 2;</code>
     * @return The matcher.
     */
    @java.lang.Override
    public java.lang.String getMatcher() {
      java.lang.Object ref = matcher_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.apache.pekko.protobufv3.internal.ByteString bs = 
            (org.apache.pekko.protobufv3.internal.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          matcher_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string matcher = 2;</code>
     * @return The bytes for matcher.
     */
    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.ByteString
        getMatcherBytes() {
      java.lang.Object ref = matcher_;
      if (ref instanceof java.lang.String) {
        org.apache.pekko.protobufv3.internal.ByteString b = 
            org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        matcher_ = b;
        return b;
      } else {
        return (org.apache.pekko.protobufv3.internal.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.apache.pekko.protobufv3.internal.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeEnum(1, type_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        org.apache.pekko.protobufv3.internal.GeneratedMessage.writeString(output, 2, matcher_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.apache.pekko.protobufv3.internal.GeneratedMessage.computeStringSize(2, matcher_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.pekko.remote.ContainerFormats.Selection)) {
        return super.equals(obj);
      }
      org.apache.pekko.remote.ContainerFormats.Selection other = (org.apache.pekko.remote.ContainerFormats.Selection) obj;

      if (hasType() != other.hasType()) return false;
      if (hasType()) {
        if (type_ != other.type_) return false;
      }
      if (hasMatcher() != other.hasMatcher()) return false;
      if (hasMatcher()) {
        if (!getMatcher()
            .equals(other.getMatcher())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasType()) {
        hash = (37 * hash) + TYPE_FIELD_NUMBER;
        hash = (53 * hash) + type_;
      }
      if (hasMatcher()) {
        hash = (37 * hash) + MATCHER_FIELD_NUMBER;
        hash = (53 * hash) + getMatcher().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.pekko.remote.ContainerFormats.Selection parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.Selection parseFrom(
        java.nio.ByteBuffer data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.Selection parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.Selection parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.Selection parseFrom(byte[] data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.Selection parseFrom(
        byte[] data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.Selection parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ContainerFormats.Selection parseFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.pekko.remote.ContainerFormats.Selection parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.pekko.remote.ContainerFormats.Selection parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.Selection parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ContainerFormats.Selection parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.pekko.remote.ContainerFormats.Selection prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.apache.pekko.protobufv3.internal.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Selection}
     */
    public static final class Builder extends
        org.apache.pekko.protobufv3.internal.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Selection)
        org.apache.pekko.remote.ContainerFormats.SelectionOrBuilder {
      public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_Selection_descriptor;
      }

      @java.lang.Override
      protected org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_Selection_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.pekko.remote.ContainerFormats.Selection.class, org.apache.pekko.remote.ContainerFormats.Selection.Builder.class);
      }

      // Construct using org.apache.pekko.remote.ContainerFormats.Selection.newBuilder()
      private Builder() {

      }

      private Builder(
          org.apache.pekko.protobufv3.internal.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        type_ = 0;
        matcher_ = "";
        return this;
      }

      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_Selection_descriptor;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.Selection getDefaultInstanceForType() {
        return org.apache.pekko.remote.ContainerFormats.Selection.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.Selection build() {
        org.apache.pekko.remote.ContainerFormats.Selection result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.Selection buildPartial() {
        org.apache.pekko.remote.ContainerFormats.Selection result = new org.apache.pekko.remote.ContainerFormats.Selection(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.pekko.remote.ContainerFormats.Selection result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.type_ = type_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.matcher_ = matcher_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.apache.pekko.protobufv3.internal.Message other) {
        if (other instanceof org.apache.pekko.remote.ContainerFormats.Selection) {
          return mergeFrom((org.apache.pekko.remote.ContainerFormats.Selection)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.pekko.remote.ContainerFormats.Selection other) {
        if (other == org.apache.pekko.remote.ContainerFormats.Selection.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasMatcher()) {
          matcher_ = other.matcher_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasType()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                int tmpRaw = input.readEnum();
                org.apache.pekko.remote.ContainerFormats.PatternType tmpValue =
                    org.apache.pekko.remote.ContainerFormats.PatternType.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(1, tmpRaw);
                } else {
                  type_ = tmpRaw;
                  bitField0_ |= 0x00000001;
                }
                break;
              } // case 8
              case 18: {
                matcher_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int type_ = 0;
      /**
       * <code>required .PatternType type = 1;</code>
       * @return Whether the type field is set.
       */
      @java.lang.Override public boolean hasType() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required .PatternType type = 1;</code>
       * @return The type.
       */
      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.PatternType getType() {
        org.apache.pekko.remote.ContainerFormats.PatternType result = org.apache.pekko.remote.ContainerFormats.PatternType.forNumber(type_);
        return result == null ? org.apache.pekko.remote.ContainerFormats.PatternType.PARENT : result;
      }
      /**
       * <code>required .PatternType type = 1;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(org.apache.pekko.remote.ContainerFormats.PatternType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>required .PatternType type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object matcher_ = "";
      /**
       * <code>optional string matcher = 2;</code>
       * @return Whether the matcher field is set.
       */
      public boolean hasMatcher() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional string matcher = 2;</code>
       * @return The matcher.
       */
      public java.lang.String getMatcher() {
        java.lang.Object ref = matcher_;
        if (!(ref instanceof java.lang.String)) {
          org.apache.pekko.protobufv3.internal.ByteString bs =
              (org.apache.pekko.protobufv3.internal.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            matcher_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string matcher = 2;</code>
       * @return The bytes for matcher.
       */
      public org.apache.pekko.protobufv3.internal.ByteString
          getMatcherBytes() {
        java.lang.Object ref = matcher_;
        if (ref instanceof String) {
          org.apache.pekko.protobufv3.internal.ByteString b = 
              org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          matcher_ = b;
          return b;
        } else {
          return (org.apache.pekko.protobufv3.internal.ByteString) ref;
        }
      }
      /**
       * <code>optional string matcher = 2;</code>
       * @param value The matcher to set.
       * @return This builder for chaining.
       */
      public Builder setMatcher(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        matcher_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional string matcher = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMatcher() {
        matcher_ = getDefaultInstance().getMatcher();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <code>optional string matcher = 2;</code>
       * @param value The bytes for matcher to set.
       * @return This builder for chaining.
       */
      public Builder setMatcherBytes(
          org.apache.pekko.protobufv3.internal.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        matcher_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Selection)
    }

    // @@protoc_insertion_point(class_scope:Selection)
    private static final org.apache.pekko.remote.ContainerFormats.Selection DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.pekko.remote.ContainerFormats.Selection();
    }

    public static org.apache.pekko.remote.ContainerFormats.Selection getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.pekko.protobufv3.internal.Parser<Selection>
        PARSER = new org.apache.pekko.protobufv3.internal.AbstractParser<Selection>() {
      @java.lang.Override
      public Selection parsePartialFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.apache.pekko.protobufv3.internal.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.apache.pekko.protobufv3.internal.Parser<Selection> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.Parser<Selection> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.Selection getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface IdentifyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Identify)
      org.apache.pekko.protobufv3.internal.MessageOrBuilder {

    /**
     * <code>required .Payload messageId = 1;</code>
     * @return Whether the messageId field is set.
     */
    boolean hasMessageId();
    /**
     * <code>required .Payload messageId = 1;</code>
     * @return The messageId.
     */
    org.apache.pekko.remote.ContainerFormats.Payload getMessageId();
    /**
     * <code>required .Payload messageId = 1;</code>
     */
    org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder getMessageIdOrBuilder();
  }
  /**
   * Protobuf type {@code Identify}
   */
  public static final class Identify extends
      org.apache.pekko.protobufv3.internal.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Identify)
      IdentifyOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.apache.pekko.protobufv3.internal.RuntimeVersion.validateProtobufGencodeVersion(
        org.apache.pekko.protobufv3.internal.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Identify.class.getName());
    }
    // Use Identify.newBuilder() to construct.
    private Identify(org.apache.pekko.protobufv3.internal.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Identify() {
    }

    public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.pekko.remote.ContainerFormats.internal_static_Identify_descriptor;
    }

    @java.lang.Override
    protected org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.pekko.remote.ContainerFormats.internal_static_Identify_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.pekko.remote.ContainerFormats.Identify.class, org.apache.pekko.remote.ContainerFormats.Identify.Builder.class);
    }

    private int bitField0_;
    public static final int MESSAGEID_FIELD_NUMBER = 1;
    private org.apache.pekko.remote.ContainerFormats.Payload messageId_;
    /**
     * <code>required .Payload messageId = 1;</code>
     * @return Whether the messageId field is set.
     */
    @java.lang.Override
    public boolean hasMessageId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required .Payload messageId = 1;</code>
     * @return The messageId.
     */
    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.Payload getMessageId() {
      return messageId_ == null ? org.apache.pekko.remote.ContainerFormats.Payload.getDefaultInstance() : messageId_;
    }
    /**
     * <code>required .Payload messageId = 1;</code>
     */
    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder getMessageIdOrBuilder() {
      return messageId_ == null ? org.apache.pekko.remote.ContainerFormats.Payload.getDefaultInstance() : messageId_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMessageId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMessageId().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.apache.pekko.protobufv3.internal.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getMessageId());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeMessageSize(1, getMessageId());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.pekko.remote.ContainerFormats.Identify)) {
        return super.equals(obj);
      }
      org.apache.pekko.remote.ContainerFormats.Identify other = (org.apache.pekko.remote.ContainerFormats.Identify) obj;

      if (hasMessageId() != other.hasMessageId()) return false;
      if (hasMessageId()) {
        if (!getMessageId()
            .equals(other.getMessageId())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasMessageId()) {
        hash = (37 * hash) + MESSAGEID_FIELD_NUMBER;
        hash = (53 * hash) + getMessageId().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.pekko.remote.ContainerFormats.Identify parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.Identify parseFrom(
        java.nio.ByteBuffer data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.Identify parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.Identify parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.Identify parseFrom(byte[] data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.Identify parseFrom(
        byte[] data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.Identify parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ContainerFormats.Identify parseFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.pekko.remote.ContainerFormats.Identify parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.pekko.remote.ContainerFormats.Identify parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.Identify parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ContainerFormats.Identify parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.pekko.remote.ContainerFormats.Identify prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.apache.pekko.protobufv3.internal.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Identify}
     */
    public static final class Builder extends
        org.apache.pekko.protobufv3.internal.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Identify)
        org.apache.pekko.remote.ContainerFormats.IdentifyOrBuilder {
      public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_Identify_descriptor;
      }

      @java.lang.Override
      protected org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_Identify_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.pekko.remote.ContainerFormats.Identify.class, org.apache.pekko.remote.ContainerFormats.Identify.Builder.class);
      }

      // Construct using org.apache.pekko.remote.ContainerFormats.Identify.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.pekko.protobufv3.internal.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.pekko.protobufv3.internal.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getMessageIdFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        messageId_ = null;
        if (messageIdBuilder_ != null) {
          messageIdBuilder_.dispose();
          messageIdBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_Identify_descriptor;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.Identify getDefaultInstanceForType() {
        return org.apache.pekko.remote.ContainerFormats.Identify.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.Identify build() {
        org.apache.pekko.remote.ContainerFormats.Identify result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.Identify buildPartial() {
        org.apache.pekko.remote.ContainerFormats.Identify result = new org.apache.pekko.remote.ContainerFormats.Identify(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.pekko.remote.ContainerFormats.Identify result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.messageId_ = messageIdBuilder_ == null
              ? messageId_
              : messageIdBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.apache.pekko.protobufv3.internal.Message other) {
        if (other instanceof org.apache.pekko.remote.ContainerFormats.Identify) {
          return mergeFrom((org.apache.pekko.remote.ContainerFormats.Identify)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.pekko.remote.ContainerFormats.Identify other) {
        if (other == org.apache.pekko.remote.ContainerFormats.Identify.getDefaultInstance()) return this;
        if (other.hasMessageId()) {
          mergeMessageId(other.getMessageId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasMessageId()) {
          return false;
        }
        if (!getMessageId().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getMessageIdFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.apache.pekko.remote.ContainerFormats.Payload messageId_;
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilder<
          org.apache.pekko.remote.ContainerFormats.Payload, org.apache.pekko.remote.ContainerFormats.Payload.Builder, org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder> messageIdBuilder_;
      /**
       * <code>required .Payload messageId = 1;</code>
       * @return Whether the messageId field is set.
       */
      public boolean hasMessageId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required .Payload messageId = 1;</code>
       * @return The messageId.
       */
      public org.apache.pekko.remote.ContainerFormats.Payload getMessageId() {
        if (messageIdBuilder_ == null) {
          return messageId_ == null ? org.apache.pekko.remote.ContainerFormats.Payload.getDefaultInstance() : messageId_;
        } else {
          return messageIdBuilder_.getMessage();
        }
      }
      /**
       * <code>required .Payload messageId = 1;</code>
       */
      public Builder setMessageId(org.apache.pekko.remote.ContainerFormats.Payload value) {
        if (messageIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          messageId_ = value;
        } else {
          messageIdBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .Payload messageId = 1;</code>
       */
      public Builder setMessageId(
          org.apache.pekko.remote.ContainerFormats.Payload.Builder builderForValue) {
        if (messageIdBuilder_ == null) {
          messageId_ = builderForValue.build();
        } else {
          messageIdBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .Payload messageId = 1;</code>
       */
      public Builder mergeMessageId(org.apache.pekko.remote.ContainerFormats.Payload value) {
        if (messageIdBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            messageId_ != null &&
            messageId_ != org.apache.pekko.remote.ContainerFormats.Payload.getDefaultInstance()) {
            getMessageIdBuilder().mergeFrom(value);
          } else {
            messageId_ = value;
          }
        } else {
          messageIdBuilder_.mergeFrom(value);
        }
        if (messageId_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>required .Payload messageId = 1;</code>
       */
      public Builder clearMessageId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        messageId_ = null;
        if (messageIdBuilder_ != null) {
          messageIdBuilder_.dispose();
          messageIdBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>required .Payload messageId = 1;</code>
       */
      public org.apache.pekko.remote.ContainerFormats.Payload.Builder getMessageIdBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getMessageIdFieldBuilder().getBuilder();
      }
      /**
       * <code>required .Payload messageId = 1;</code>
       */
      public org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder getMessageIdOrBuilder() {
        if (messageIdBuilder_ != null) {
          return messageIdBuilder_.getMessageOrBuilder();
        } else {
          return messageId_ == null ?
              org.apache.pekko.remote.ContainerFormats.Payload.getDefaultInstance() : messageId_;
        }
      }
      /**
       * <code>required .Payload messageId = 1;</code>
       */
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilder<
          org.apache.pekko.remote.ContainerFormats.Payload, org.apache.pekko.remote.ContainerFormats.Payload.Builder, org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder> 
          getMessageIdFieldBuilder() {
        if (messageIdBuilder_ == null) {
          messageIdBuilder_ = new org.apache.pekko.protobufv3.internal.SingleFieldBuilder<
              org.apache.pekko.remote.ContainerFormats.Payload, org.apache.pekko.remote.ContainerFormats.Payload.Builder, org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder>(
                  getMessageId(),
                  getParentForChildren(),
                  isClean());
          messageId_ = null;
        }
        return messageIdBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:Identify)
    }

    // @@protoc_insertion_point(class_scope:Identify)
    private static final org.apache.pekko.remote.ContainerFormats.Identify DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.pekko.remote.ContainerFormats.Identify();
    }

    public static org.apache.pekko.remote.ContainerFormats.Identify getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.pekko.protobufv3.internal.Parser<Identify>
        PARSER = new org.apache.pekko.protobufv3.internal.AbstractParser<Identify>() {
      @java.lang.Override
      public Identify parsePartialFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.apache.pekko.protobufv3.internal.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.apache.pekko.protobufv3.internal.Parser<Identify> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.Parser<Identify> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.Identify getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ActorIdentityOrBuilder extends
      // @@protoc_insertion_point(interface_extends:ActorIdentity)
      org.apache.pekko.protobufv3.internal.MessageOrBuilder {

    /**
     * <code>required .Payload correlationId = 1;</code>
     * @return Whether the correlationId field is set.
     */
    boolean hasCorrelationId();
    /**
     * <code>required .Payload correlationId = 1;</code>
     * @return The correlationId.
     */
    org.apache.pekko.remote.ContainerFormats.Payload getCorrelationId();
    /**
     * <code>required .Payload correlationId = 1;</code>
     */
    org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder getCorrelationIdOrBuilder();

    /**
     * <code>optional .ActorRef ref = 2;</code>
     * @return Whether the ref field is set.
     */
    boolean hasRef();
    /**
     * <code>optional .ActorRef ref = 2;</code>
     * @return The ref.
     */
    org.apache.pekko.remote.ContainerFormats.ActorRef getRef();
    /**
     * <code>optional .ActorRef ref = 2;</code>
     */
    org.apache.pekko.remote.ContainerFormats.ActorRefOrBuilder getRefOrBuilder();
  }
  /**
   * Protobuf type {@code ActorIdentity}
   */
  public static final class ActorIdentity extends
      org.apache.pekko.protobufv3.internal.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:ActorIdentity)
      ActorIdentityOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.apache.pekko.protobufv3.internal.RuntimeVersion.validateProtobufGencodeVersion(
        org.apache.pekko.protobufv3.internal.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        ActorIdentity.class.getName());
    }
    // Use ActorIdentity.newBuilder() to construct.
    private ActorIdentity(org.apache.pekko.protobufv3.internal.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private ActorIdentity() {
    }

    public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.pekko.remote.ContainerFormats.internal_static_ActorIdentity_descriptor;
    }

    @java.lang.Override
    protected org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.pekko.remote.ContainerFormats.internal_static_ActorIdentity_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.pekko.remote.ContainerFormats.ActorIdentity.class, org.apache.pekko.remote.ContainerFormats.ActorIdentity.Builder.class);
    }

    private int bitField0_;
    public static final int CORRELATIONID_FIELD_NUMBER = 1;
    private org.apache.pekko.remote.ContainerFormats.Payload correlationId_;
    /**
     * <code>required .Payload correlationId = 1;</code>
     * @return Whether the correlationId field is set.
     */
    @java.lang.Override
    public boolean hasCorrelationId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required .Payload correlationId = 1;</code>
     * @return The correlationId.
     */
    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.Payload getCorrelationId() {
      return correlationId_ == null ? org.apache.pekko.remote.ContainerFormats.Payload.getDefaultInstance() : correlationId_;
    }
    /**
     * <code>required .Payload correlationId = 1;</code>
     */
    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder getCorrelationIdOrBuilder() {
      return correlationId_ == null ? org.apache.pekko.remote.ContainerFormats.Payload.getDefaultInstance() : correlationId_;
    }

    public static final int REF_FIELD_NUMBER = 2;
    private org.apache.pekko.remote.ContainerFormats.ActorRef ref_;
    /**
     * <code>optional .ActorRef ref = 2;</code>
     * @return Whether the ref field is set.
     */
    @java.lang.Override
    public boolean hasRef() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional .ActorRef ref = 2;</code>
     * @return The ref.
     */
    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.ActorRef getRef() {
      return ref_ == null ? org.apache.pekko.remote.ContainerFormats.ActorRef.getDefaultInstance() : ref_;
    }
    /**
     * <code>optional .ActorRef ref = 2;</code>
     */
    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.ActorRefOrBuilder getRefOrBuilder() {
      return ref_ == null ? org.apache.pekko.remote.ContainerFormats.ActorRef.getDefaultInstance() : ref_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasCorrelationId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getCorrelationId().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasRef()) {
        if (!getRef().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.apache.pekko.protobufv3.internal.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getCorrelationId());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getRef());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeMessageSize(1, getCorrelationId());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeMessageSize(2, getRef());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.pekko.remote.ContainerFormats.ActorIdentity)) {
        return super.equals(obj);
      }
      org.apache.pekko.remote.ContainerFormats.ActorIdentity other = (org.apache.pekko.remote.ContainerFormats.ActorIdentity) obj;

      if (hasCorrelationId() != other.hasCorrelationId()) return false;
      if (hasCorrelationId()) {
        if (!getCorrelationId()
            .equals(other.getCorrelationId())) return false;
      }
      if (hasRef() != other.hasRef()) return false;
      if (hasRef()) {
        if (!getRef()
            .equals(other.getRef())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasCorrelationId()) {
        hash = (37 * hash) + CORRELATIONID_FIELD_NUMBER;
        hash = (53 * hash) + getCorrelationId().hashCode();
      }
      if (hasRef()) {
        hash = (37 * hash) + REF_FIELD_NUMBER;
        hash = (53 * hash) + getRef().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.pekko.remote.ContainerFormats.ActorIdentity parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.ActorIdentity parseFrom(
        java.nio.ByteBuffer data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.ActorIdentity parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.ActorIdentity parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.ActorIdentity parseFrom(byte[] data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.ActorIdentity parseFrom(
        byte[] data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.ActorIdentity parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ContainerFormats.ActorIdentity parseFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.pekko.remote.ContainerFormats.ActorIdentity parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.pekko.remote.ContainerFormats.ActorIdentity parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.ActorIdentity parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ContainerFormats.ActorIdentity parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.pekko.remote.ContainerFormats.ActorIdentity prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.apache.pekko.protobufv3.internal.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ActorIdentity}
     */
    public static final class Builder extends
        org.apache.pekko.protobufv3.internal.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:ActorIdentity)
        org.apache.pekko.remote.ContainerFormats.ActorIdentityOrBuilder {
      public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_ActorIdentity_descriptor;
      }

      @java.lang.Override
      protected org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_ActorIdentity_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.pekko.remote.ContainerFormats.ActorIdentity.class, org.apache.pekko.remote.ContainerFormats.ActorIdentity.Builder.class);
      }

      // Construct using org.apache.pekko.remote.ContainerFormats.ActorIdentity.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.pekko.protobufv3.internal.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.pekko.protobufv3.internal.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getCorrelationIdFieldBuilder();
          getRefFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        correlationId_ = null;
        if (correlationIdBuilder_ != null) {
          correlationIdBuilder_.dispose();
          correlationIdBuilder_ = null;
        }
        ref_ = null;
        if (refBuilder_ != null) {
          refBuilder_.dispose();
          refBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_ActorIdentity_descriptor;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.ActorIdentity getDefaultInstanceForType() {
        return org.apache.pekko.remote.ContainerFormats.ActorIdentity.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.ActorIdentity build() {
        org.apache.pekko.remote.ContainerFormats.ActorIdentity result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.ActorIdentity buildPartial() {
        org.apache.pekko.remote.ContainerFormats.ActorIdentity result = new org.apache.pekko.remote.ContainerFormats.ActorIdentity(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.pekko.remote.ContainerFormats.ActorIdentity result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.correlationId_ = correlationIdBuilder_ == null
              ? correlationId_
              : correlationIdBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.ref_ = refBuilder_ == null
              ? ref_
              : refBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.apache.pekko.protobufv3.internal.Message other) {
        if (other instanceof org.apache.pekko.remote.ContainerFormats.ActorIdentity) {
          return mergeFrom((org.apache.pekko.remote.ContainerFormats.ActorIdentity)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.pekko.remote.ContainerFormats.ActorIdentity other) {
        if (other == org.apache.pekko.remote.ContainerFormats.ActorIdentity.getDefaultInstance()) return this;
        if (other.hasCorrelationId()) {
          mergeCorrelationId(other.getCorrelationId());
        }
        if (other.hasRef()) {
          mergeRef(other.getRef());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasCorrelationId()) {
          return false;
        }
        if (!getCorrelationId().isInitialized()) {
          return false;
        }
        if (hasRef()) {
          if (!getRef().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getCorrelationIdFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getRefFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.apache.pekko.remote.ContainerFormats.Payload correlationId_;
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilder<
          org.apache.pekko.remote.ContainerFormats.Payload, org.apache.pekko.remote.ContainerFormats.Payload.Builder, org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder> correlationIdBuilder_;
      /**
       * <code>required .Payload correlationId = 1;</code>
       * @return Whether the correlationId field is set.
       */
      public boolean hasCorrelationId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required .Payload correlationId = 1;</code>
       * @return The correlationId.
       */
      public org.apache.pekko.remote.ContainerFormats.Payload getCorrelationId() {
        if (correlationIdBuilder_ == null) {
          return correlationId_ == null ? org.apache.pekko.remote.ContainerFormats.Payload.getDefaultInstance() : correlationId_;
        } else {
          return correlationIdBuilder_.getMessage();
        }
      }
      /**
       * <code>required .Payload correlationId = 1;</code>
       */
      public Builder setCorrelationId(org.apache.pekko.remote.ContainerFormats.Payload value) {
        if (correlationIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          correlationId_ = value;
        } else {
          correlationIdBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .Payload correlationId = 1;</code>
       */
      public Builder setCorrelationId(
          org.apache.pekko.remote.ContainerFormats.Payload.Builder builderForValue) {
        if (correlationIdBuilder_ == null) {
          correlationId_ = builderForValue.build();
        } else {
          correlationIdBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .Payload correlationId = 1;</code>
       */
      public Builder mergeCorrelationId(org.apache.pekko.remote.ContainerFormats.Payload value) {
        if (correlationIdBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            correlationId_ != null &&
            correlationId_ != org.apache.pekko.remote.ContainerFormats.Payload.getDefaultInstance()) {
            getCorrelationIdBuilder().mergeFrom(value);
          } else {
            correlationId_ = value;
          }
        } else {
          correlationIdBuilder_.mergeFrom(value);
        }
        if (correlationId_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>required .Payload correlationId = 1;</code>
       */
      public Builder clearCorrelationId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        correlationId_ = null;
        if (correlationIdBuilder_ != null) {
          correlationIdBuilder_.dispose();
          correlationIdBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>required .Payload correlationId = 1;</code>
       */
      public org.apache.pekko.remote.ContainerFormats.Payload.Builder getCorrelationIdBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getCorrelationIdFieldBuilder().getBuilder();
      }
      /**
       * <code>required .Payload correlationId = 1;</code>
       */
      public org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder getCorrelationIdOrBuilder() {
        if (correlationIdBuilder_ != null) {
          return correlationIdBuilder_.getMessageOrBuilder();
        } else {
          return correlationId_ == null ?
              org.apache.pekko.remote.ContainerFormats.Payload.getDefaultInstance() : correlationId_;
        }
      }
      /**
       * <code>required .Payload correlationId = 1;</code>
       */
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilder<
          org.apache.pekko.remote.ContainerFormats.Payload, org.apache.pekko.remote.ContainerFormats.Payload.Builder, org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder> 
          getCorrelationIdFieldBuilder() {
        if (correlationIdBuilder_ == null) {
          correlationIdBuilder_ = new org.apache.pekko.protobufv3.internal.SingleFieldBuilder<
              org.apache.pekko.remote.ContainerFormats.Payload, org.apache.pekko.remote.ContainerFormats.Payload.Builder, org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder>(
                  getCorrelationId(),
                  getParentForChildren(),
                  isClean());
          correlationId_ = null;
        }
        return correlationIdBuilder_;
      }

      private org.apache.pekko.remote.ContainerFormats.ActorRef ref_;
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilder<
          org.apache.pekko.remote.ContainerFormats.ActorRef, org.apache.pekko.remote.ContainerFormats.ActorRef.Builder, org.apache.pekko.remote.ContainerFormats.ActorRefOrBuilder> refBuilder_;
      /**
       * <code>optional .ActorRef ref = 2;</code>
       * @return Whether the ref field is set.
       */
      public boolean hasRef() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional .ActorRef ref = 2;</code>
       * @return The ref.
       */
      public org.apache.pekko.remote.ContainerFormats.ActorRef getRef() {
        if (refBuilder_ == null) {
          return ref_ == null ? org.apache.pekko.remote.ContainerFormats.ActorRef.getDefaultInstance() : ref_;
        } else {
          return refBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .ActorRef ref = 2;</code>
       */
      public Builder setRef(org.apache.pekko.remote.ContainerFormats.ActorRef value) {
        if (refBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ref_ = value;
        } else {
          refBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional .ActorRef ref = 2;</code>
       */
      public Builder setRef(
          org.apache.pekko.remote.ContainerFormats.ActorRef.Builder builderForValue) {
        if (refBuilder_ == null) {
          ref_ = builderForValue.build();
        } else {
          refBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional .ActorRef ref = 2;</code>
       */
      public Builder mergeRef(org.apache.pekko.remote.ContainerFormats.ActorRef value) {
        if (refBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            ref_ != null &&
            ref_ != org.apache.pekko.remote.ContainerFormats.ActorRef.getDefaultInstance()) {
            getRefBuilder().mergeFrom(value);
          } else {
            ref_ = value;
          }
        } else {
          refBuilder_.mergeFrom(value);
        }
        if (ref_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional .ActorRef ref = 2;</code>
       */
      public Builder clearRef() {
        bitField0_ = (bitField0_ & ~0x00000002);
        ref_ = null;
        if (refBuilder_ != null) {
          refBuilder_.dispose();
          refBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .ActorRef ref = 2;</code>
       */
      public org.apache.pekko.remote.ContainerFormats.ActorRef.Builder getRefBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getRefFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .ActorRef ref = 2;</code>
       */
      public org.apache.pekko.remote.ContainerFormats.ActorRefOrBuilder getRefOrBuilder() {
        if (refBuilder_ != null) {
          return refBuilder_.getMessageOrBuilder();
        } else {
          return ref_ == null ?
              org.apache.pekko.remote.ContainerFormats.ActorRef.getDefaultInstance() : ref_;
        }
      }
      /**
       * <code>optional .ActorRef ref = 2;</code>
       */
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilder<
          org.apache.pekko.remote.ContainerFormats.ActorRef, org.apache.pekko.remote.ContainerFormats.ActorRef.Builder, org.apache.pekko.remote.ContainerFormats.ActorRefOrBuilder> 
          getRefFieldBuilder() {
        if (refBuilder_ == null) {
          refBuilder_ = new org.apache.pekko.protobufv3.internal.SingleFieldBuilder<
              org.apache.pekko.remote.ContainerFormats.ActorRef, org.apache.pekko.remote.ContainerFormats.ActorRef.Builder, org.apache.pekko.remote.ContainerFormats.ActorRefOrBuilder>(
                  getRef(),
                  getParentForChildren(),
                  isClean());
          ref_ = null;
        }
        return refBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:ActorIdentity)
    }

    // @@protoc_insertion_point(class_scope:ActorIdentity)
    private static final org.apache.pekko.remote.ContainerFormats.ActorIdentity DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.pekko.remote.ContainerFormats.ActorIdentity();
    }

    public static org.apache.pekko.remote.ContainerFormats.ActorIdentity getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.pekko.protobufv3.internal.Parser<ActorIdentity>
        PARSER = new org.apache.pekko.protobufv3.internal.AbstractParser<ActorIdentity>() {
      @java.lang.Override
      public ActorIdentity parsePartialFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.apache.pekko.protobufv3.internal.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.apache.pekko.protobufv3.internal.Parser<ActorIdentity> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.Parser<ActorIdentity> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.ActorIdentity getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ActorRefOrBuilder extends
      // @@protoc_insertion_point(interface_extends:ActorRef)
      org.apache.pekko.protobufv3.internal.MessageOrBuilder {

    /**
     * <code>required string path = 1;</code>
     * @return Whether the path field is set.
     */
    boolean hasPath();
    /**
     * <code>required string path = 1;</code>
     * @return The path.
     */
    java.lang.String getPath();
    /**
     * <code>required string path = 1;</code>
     * @return The bytes for path.
     */
    org.apache.pekko.protobufv3.internal.ByteString
        getPathBytes();
  }
  /**
   * Protobuf type {@code ActorRef}
   */
  public static final class ActorRef extends
      org.apache.pekko.protobufv3.internal.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:ActorRef)
      ActorRefOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.apache.pekko.protobufv3.internal.RuntimeVersion.validateProtobufGencodeVersion(
        org.apache.pekko.protobufv3.internal.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        ActorRef.class.getName());
    }
    // Use ActorRef.newBuilder() to construct.
    private ActorRef(org.apache.pekko.protobufv3.internal.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private ActorRef() {
      path_ = "";
    }

    public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.pekko.remote.ContainerFormats.internal_static_ActorRef_descriptor;
    }

    @java.lang.Override
    protected org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.pekko.remote.ContainerFormats.internal_static_ActorRef_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.pekko.remote.ContainerFormats.ActorRef.class, org.apache.pekko.remote.ContainerFormats.ActorRef.Builder.class);
    }

    private int bitField0_;
    public static final int PATH_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object path_ = "";
    /**
     * <code>required string path = 1;</code>
     * @return Whether the path field is set.
     */
    @java.lang.Override
    public boolean hasPath() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required string path = 1;</code>
     * @return The path.
     */
    @java.lang.Override
    public java.lang.String getPath() {
      java.lang.Object ref = path_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.apache.pekko.protobufv3.internal.ByteString bs = 
            (org.apache.pekko.protobufv3.internal.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          path_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string path = 1;</code>
     * @return The bytes for path.
     */
    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.ByteString
        getPathBytes() {
      java.lang.Object ref = path_;
      if (ref instanceof java.lang.String) {
        org.apache.pekko.protobufv3.internal.ByteString b = 
            org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        path_ = b;
        return b;
      } else {
        return (org.apache.pekko.protobufv3.internal.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasPath()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.apache.pekko.protobufv3.internal.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        org.apache.pekko.protobufv3.internal.GeneratedMessage.writeString(output, 1, path_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.apache.pekko.protobufv3.internal.GeneratedMessage.computeStringSize(1, path_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.pekko.remote.ContainerFormats.ActorRef)) {
        return super.equals(obj);
      }
      org.apache.pekko.remote.ContainerFormats.ActorRef other = (org.apache.pekko.remote.ContainerFormats.ActorRef) obj;

      if (hasPath() != other.hasPath()) return false;
      if (hasPath()) {
        if (!getPath()
            .equals(other.getPath())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasPath()) {
        hash = (37 * hash) + PATH_FIELD_NUMBER;
        hash = (53 * hash) + getPath().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.pekko.remote.ContainerFormats.ActorRef parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.ActorRef parseFrom(
        java.nio.ByteBuffer data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.ActorRef parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.ActorRef parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.ActorRef parseFrom(byte[] data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.ActorRef parseFrom(
        byte[] data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.ActorRef parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ContainerFormats.ActorRef parseFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.pekko.remote.ContainerFormats.ActorRef parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.pekko.remote.ContainerFormats.ActorRef parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.ActorRef parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ContainerFormats.ActorRef parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.pekko.remote.ContainerFormats.ActorRef prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.apache.pekko.protobufv3.internal.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ActorRef}
     */
    public static final class Builder extends
        org.apache.pekko.protobufv3.internal.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:ActorRef)
        org.apache.pekko.remote.ContainerFormats.ActorRefOrBuilder {
      public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_ActorRef_descriptor;
      }

      @java.lang.Override
      protected org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_ActorRef_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.pekko.remote.ContainerFormats.ActorRef.class, org.apache.pekko.remote.ContainerFormats.ActorRef.Builder.class);
      }

      // Construct using org.apache.pekko.remote.ContainerFormats.ActorRef.newBuilder()
      private Builder() {

      }

      private Builder(
          org.apache.pekko.protobufv3.internal.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        path_ = "";
        return this;
      }

      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_ActorRef_descriptor;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.ActorRef getDefaultInstanceForType() {
        return org.apache.pekko.remote.ContainerFormats.ActorRef.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.ActorRef build() {
        org.apache.pekko.remote.ContainerFormats.ActorRef result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.ActorRef buildPartial() {
        org.apache.pekko.remote.ContainerFormats.ActorRef result = new org.apache.pekko.remote.ContainerFormats.ActorRef(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.pekko.remote.ContainerFormats.ActorRef result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.path_ = path_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.apache.pekko.protobufv3.internal.Message other) {
        if (other instanceof org.apache.pekko.remote.ContainerFormats.ActorRef) {
          return mergeFrom((org.apache.pekko.remote.ContainerFormats.ActorRef)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.pekko.remote.ContainerFormats.ActorRef other) {
        if (other == org.apache.pekko.remote.ContainerFormats.ActorRef.getDefaultInstance()) return this;
        if (other.hasPath()) {
          path_ = other.path_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasPath()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                path_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object path_ = "";
      /**
       * <code>required string path = 1;</code>
       * @return Whether the path field is set.
       */
      public boolean hasPath() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required string path = 1;</code>
       * @return The path.
       */
      public java.lang.String getPath() {
        java.lang.Object ref = path_;
        if (!(ref instanceof java.lang.String)) {
          org.apache.pekko.protobufv3.internal.ByteString bs =
              (org.apache.pekko.protobufv3.internal.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            path_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string path = 1;</code>
       * @return The bytes for path.
       */
      public org.apache.pekko.protobufv3.internal.ByteString
          getPathBytes() {
        java.lang.Object ref = path_;
        if (ref instanceof String) {
          org.apache.pekko.protobufv3.internal.ByteString b = 
              org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          path_ = b;
          return b;
        } else {
          return (org.apache.pekko.protobufv3.internal.ByteString) ref;
        }
      }
      /**
       * <code>required string path = 1;</code>
       * @param value The path to set.
       * @return This builder for chaining.
       */
      public Builder setPath(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        path_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required string path = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearPath() {
        path_ = getDefaultInstance().getPath();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>required string path = 1;</code>
       * @param value The bytes for path to set.
       * @return This builder for chaining.
       */
      public Builder setPathBytes(
          org.apache.pekko.protobufv3.internal.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        path_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ActorRef)
    }

    // @@protoc_insertion_point(class_scope:ActorRef)
    private static final org.apache.pekko.remote.ContainerFormats.ActorRef DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.pekko.remote.ContainerFormats.ActorRef();
    }

    public static org.apache.pekko.remote.ContainerFormats.ActorRef getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.pekko.protobufv3.internal.Parser<ActorRef>
        PARSER = new org.apache.pekko.protobufv3.internal.AbstractParser<ActorRef>() {
      @java.lang.Override
      public ActorRef parsePartialFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.apache.pekko.protobufv3.internal.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.apache.pekko.protobufv3.internal.Parser<ActorRef> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.Parser<ActorRef> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.ActorRef getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface OptionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Option)
      org.apache.pekko.protobufv3.internal.MessageOrBuilder {

    /**
     * <code>optional .Payload value = 1;</code>
     * @return Whether the value field is set.
     */
    boolean hasValue();
    /**
     * <code>optional .Payload value = 1;</code>
     * @return The value.
     */
    org.apache.pekko.remote.ContainerFormats.Payload getValue();
    /**
     * <code>optional .Payload value = 1;</code>
     */
    org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder getValueOrBuilder();
  }
  /**
   * Protobuf type {@code Option}
   */
  public static final class Option extends
      org.apache.pekko.protobufv3.internal.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Option)
      OptionOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.apache.pekko.protobufv3.internal.RuntimeVersion.validateProtobufGencodeVersion(
        org.apache.pekko.protobufv3.internal.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Option.class.getName());
    }
    // Use Option.newBuilder() to construct.
    private Option(org.apache.pekko.protobufv3.internal.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Option() {
    }

    public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.pekko.remote.ContainerFormats.internal_static_Option_descriptor;
    }

    @java.lang.Override
    protected org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.pekko.remote.ContainerFormats.internal_static_Option_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.pekko.remote.ContainerFormats.Option.class, org.apache.pekko.remote.ContainerFormats.Option.Builder.class);
    }

    private int bitField0_;
    public static final int VALUE_FIELD_NUMBER = 1;
    private org.apache.pekko.remote.ContainerFormats.Payload value_;
    /**
     * <code>optional .Payload value = 1;</code>
     * @return Whether the value field is set.
     */
    @java.lang.Override
    public boolean hasValue() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional .Payload value = 1;</code>
     * @return The value.
     */
    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.Payload getValue() {
      return value_ == null ? org.apache.pekko.remote.ContainerFormats.Payload.getDefaultInstance() : value_;
    }
    /**
     * <code>optional .Payload value = 1;</code>
     */
    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder getValueOrBuilder() {
      return value_ == null ? org.apache.pekko.remote.ContainerFormats.Payload.getDefaultInstance() : value_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasValue()) {
        if (!getValue().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.apache.pekko.protobufv3.internal.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getValue());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeMessageSize(1, getValue());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.pekko.remote.ContainerFormats.Option)) {
        return super.equals(obj);
      }
      org.apache.pekko.remote.ContainerFormats.Option other = (org.apache.pekko.remote.ContainerFormats.Option) obj;

      if (hasValue() != other.hasValue()) return false;
      if (hasValue()) {
        if (!getValue()
            .equals(other.getValue())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasValue()) {
        hash = (37 * hash) + VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getValue().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.pekko.remote.ContainerFormats.Option parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.Option parseFrom(
        java.nio.ByteBuffer data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.Option parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.Option parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.Option parseFrom(byte[] data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.Option parseFrom(
        byte[] data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.Option parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ContainerFormats.Option parseFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.pekko.remote.ContainerFormats.Option parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.pekko.remote.ContainerFormats.Option parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.Option parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ContainerFormats.Option parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.pekko.remote.ContainerFormats.Option prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.apache.pekko.protobufv3.internal.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Option}
     */
    public static final class Builder extends
        org.apache.pekko.protobufv3.internal.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Option)
        org.apache.pekko.remote.ContainerFormats.OptionOrBuilder {
      public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_Option_descriptor;
      }

      @java.lang.Override
      protected org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_Option_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.pekko.remote.ContainerFormats.Option.class, org.apache.pekko.remote.ContainerFormats.Option.Builder.class);
      }

      // Construct using org.apache.pekko.remote.ContainerFormats.Option.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.pekko.protobufv3.internal.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.pekko.protobufv3.internal.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getValueFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        value_ = null;
        if (valueBuilder_ != null) {
          valueBuilder_.dispose();
          valueBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_Option_descriptor;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.Option getDefaultInstanceForType() {
        return org.apache.pekko.remote.ContainerFormats.Option.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.Option build() {
        org.apache.pekko.remote.ContainerFormats.Option result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.Option buildPartial() {
        org.apache.pekko.remote.ContainerFormats.Option result = new org.apache.pekko.remote.ContainerFormats.Option(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.pekko.remote.ContainerFormats.Option result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.value_ = valueBuilder_ == null
              ? value_
              : valueBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.apache.pekko.protobufv3.internal.Message other) {
        if (other instanceof org.apache.pekko.remote.ContainerFormats.Option) {
          return mergeFrom((org.apache.pekko.remote.ContainerFormats.Option)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.pekko.remote.ContainerFormats.Option other) {
        if (other == org.apache.pekko.remote.ContainerFormats.Option.getDefaultInstance()) return this;
        if (other.hasValue()) {
          mergeValue(other.getValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (hasValue()) {
          if (!getValue().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getValueFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.apache.pekko.remote.ContainerFormats.Payload value_;
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilder<
          org.apache.pekko.remote.ContainerFormats.Payload, org.apache.pekko.remote.ContainerFormats.Payload.Builder, org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder> valueBuilder_;
      /**
       * <code>optional .Payload value = 1;</code>
       * @return Whether the value field is set.
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional .Payload value = 1;</code>
       * @return The value.
       */
      public org.apache.pekko.remote.ContainerFormats.Payload getValue() {
        if (valueBuilder_ == null) {
          return value_ == null ? org.apache.pekko.remote.ContainerFormats.Payload.getDefaultInstance() : value_;
        } else {
          return valueBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .Payload value = 1;</code>
       */
      public Builder setValue(org.apache.pekko.remote.ContainerFormats.Payload value) {
        if (valueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          value_ = value;
        } else {
          valueBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional .Payload value = 1;</code>
       */
      public Builder setValue(
          org.apache.pekko.remote.ContainerFormats.Payload.Builder builderForValue) {
        if (valueBuilder_ == null) {
          value_ = builderForValue.build();
        } else {
          valueBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional .Payload value = 1;</code>
       */
      public Builder mergeValue(org.apache.pekko.remote.ContainerFormats.Payload value) {
        if (valueBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            value_ != null &&
            value_ != org.apache.pekko.remote.ContainerFormats.Payload.getDefaultInstance()) {
            getValueBuilder().mergeFrom(value);
          } else {
            value_ = value;
          }
        } else {
          valueBuilder_.mergeFrom(value);
        }
        if (value_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional .Payload value = 1;</code>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000001);
        value_ = null;
        if (valueBuilder_ != null) {
          valueBuilder_.dispose();
          valueBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .Payload value = 1;</code>
       */
      public org.apache.pekko.remote.ContainerFormats.Payload.Builder getValueBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getValueFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .Payload value = 1;</code>
       */
      public org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder getValueOrBuilder() {
        if (valueBuilder_ != null) {
          return valueBuilder_.getMessageOrBuilder();
        } else {
          return value_ == null ?
              org.apache.pekko.remote.ContainerFormats.Payload.getDefaultInstance() : value_;
        }
      }
      /**
       * <code>optional .Payload value = 1;</code>
       */
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilder<
          org.apache.pekko.remote.ContainerFormats.Payload, org.apache.pekko.remote.ContainerFormats.Payload.Builder, org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder> 
          getValueFieldBuilder() {
        if (valueBuilder_ == null) {
          valueBuilder_ = new org.apache.pekko.protobufv3.internal.SingleFieldBuilder<
              org.apache.pekko.remote.ContainerFormats.Payload, org.apache.pekko.remote.ContainerFormats.Payload.Builder, org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder>(
                  getValue(),
                  getParentForChildren(),
                  isClean());
          value_ = null;
        }
        return valueBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:Option)
    }

    // @@protoc_insertion_point(class_scope:Option)
    private static final org.apache.pekko.remote.ContainerFormats.Option DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.pekko.remote.ContainerFormats.Option();
    }

    public static org.apache.pekko.remote.ContainerFormats.Option getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.pekko.protobufv3.internal.Parser<Option>
        PARSER = new org.apache.pekko.protobufv3.internal.AbstractParser<Option>() {
      @java.lang.Override
      public Option parsePartialFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.apache.pekko.protobufv3.internal.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.apache.pekko.protobufv3.internal.Parser<Option> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.Parser<Option> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.Option getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PayloadOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Payload)
      org.apache.pekko.protobufv3.internal.MessageOrBuilder {

    /**
     * <code>required bytes enclosedMessage = 1;</code>
     * @return Whether the enclosedMessage field is set.
     */
    boolean hasEnclosedMessage();
    /**
     * <code>required bytes enclosedMessage = 1;</code>
     * @return The enclosedMessage.
     */
    org.apache.pekko.protobufv3.internal.ByteString getEnclosedMessage();

    /**
     * <code>required int32 serializerId = 2;</code>
     * @return Whether the serializerId field is set.
     */
    boolean hasSerializerId();
    /**
     * <code>required int32 serializerId = 2;</code>
     * @return The serializerId.
     */
    int getSerializerId();

    /**
     * <code>optional bytes messageManifest = 4;</code>
     * @return Whether the messageManifest field is set.
     */
    boolean hasMessageManifest();
    /**
     * <code>optional bytes messageManifest = 4;</code>
     * @return The messageManifest.
     */
    org.apache.pekko.protobufv3.internal.ByteString getMessageManifest();
  }
  /**
   * Protobuf type {@code Payload}
   */
  public static final class Payload extends
      org.apache.pekko.protobufv3.internal.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Payload)
      PayloadOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.apache.pekko.protobufv3.internal.RuntimeVersion.validateProtobufGencodeVersion(
        org.apache.pekko.protobufv3.internal.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Payload.class.getName());
    }
    // Use Payload.newBuilder() to construct.
    private Payload(org.apache.pekko.protobufv3.internal.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Payload() {
      enclosedMessage_ = org.apache.pekko.protobufv3.internal.ByteString.EMPTY;
      messageManifest_ = org.apache.pekko.protobufv3.internal.ByteString.EMPTY;
    }

    public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.pekko.remote.ContainerFormats.internal_static_Payload_descriptor;
    }

    @java.lang.Override
    protected org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.pekko.remote.ContainerFormats.internal_static_Payload_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.pekko.remote.ContainerFormats.Payload.class, org.apache.pekko.remote.ContainerFormats.Payload.Builder.class);
    }

    private int bitField0_;
    public static final int ENCLOSEDMESSAGE_FIELD_NUMBER = 1;
    private org.apache.pekko.protobufv3.internal.ByteString enclosedMessage_ = org.apache.pekko.protobufv3.internal.ByteString.EMPTY;
    /**
     * <code>required bytes enclosedMessage = 1;</code>
     * @return Whether the enclosedMessage field is set.
     */
    @java.lang.Override
    public boolean hasEnclosedMessage() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required bytes enclosedMessage = 1;</code>
     * @return The enclosedMessage.
     */
    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.ByteString getEnclosedMessage() {
      return enclosedMessage_;
    }

    public static final int SERIALIZERID_FIELD_NUMBER = 2;
    private int serializerId_ = 0;
    /**
     * <code>required int32 serializerId = 2;</code>
     * @return Whether the serializerId field is set.
     */
    @java.lang.Override
    public boolean hasSerializerId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>required int32 serializerId = 2;</code>
     * @return The serializerId.
     */
    @java.lang.Override
    public int getSerializerId() {
      return serializerId_;
    }

    public static final int MESSAGEMANIFEST_FIELD_NUMBER = 4;
    private org.apache.pekko.protobufv3.internal.ByteString messageManifest_ = org.apache.pekko.protobufv3.internal.ByteString.EMPTY;
    /**
     * <code>optional bytes messageManifest = 4;</code>
     * @return Whether the messageManifest field is set.
     */
    @java.lang.Override
    public boolean hasMessageManifest() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional bytes messageManifest = 4;</code>
     * @return The messageManifest.
     */
    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.ByteString getMessageManifest() {
      return messageManifest_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasEnclosedMessage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSerializerId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.apache.pekko.protobufv3.internal.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBytes(1, enclosedMessage_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, serializerId_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBytes(4, messageManifest_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeBytesSize(1, enclosedMessage_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeInt32Size(2, serializerId_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeBytesSize(4, messageManifest_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.pekko.remote.ContainerFormats.Payload)) {
        return super.equals(obj);
      }
      org.apache.pekko.remote.ContainerFormats.Payload other = (org.apache.pekko.remote.ContainerFormats.Payload) obj;

      if (hasEnclosedMessage() != other.hasEnclosedMessage()) return false;
      if (hasEnclosedMessage()) {
        if (!getEnclosedMessage()
            .equals(other.getEnclosedMessage())) return false;
      }
      if (hasSerializerId() != other.hasSerializerId()) return false;
      if (hasSerializerId()) {
        if (getSerializerId()
            != other.getSerializerId()) return false;
      }
      if (hasMessageManifest() != other.hasMessageManifest()) return false;
      if (hasMessageManifest()) {
        if (!getMessageManifest()
            .equals(other.getMessageManifest())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasEnclosedMessage()) {
        hash = (37 * hash) + ENCLOSEDMESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getEnclosedMessage().hashCode();
      }
      if (hasSerializerId()) {
        hash = (37 * hash) + SERIALIZERID_FIELD_NUMBER;
        hash = (53 * hash) + getSerializerId();
      }
      if (hasMessageManifest()) {
        hash = (37 * hash) + MESSAGEMANIFEST_FIELD_NUMBER;
        hash = (53 * hash) + getMessageManifest().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.pekko.remote.ContainerFormats.Payload parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.Payload parseFrom(
        java.nio.ByteBuffer data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.Payload parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.Payload parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.Payload parseFrom(byte[] data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.Payload parseFrom(
        byte[] data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.Payload parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ContainerFormats.Payload parseFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.pekko.remote.ContainerFormats.Payload parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.pekko.remote.ContainerFormats.Payload parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.Payload parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ContainerFormats.Payload parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.pekko.remote.ContainerFormats.Payload prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.apache.pekko.protobufv3.internal.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Payload}
     */
    public static final class Builder extends
        org.apache.pekko.protobufv3.internal.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Payload)
        org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder {
      public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_Payload_descriptor;
      }

      @java.lang.Override
      protected org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_Payload_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.pekko.remote.ContainerFormats.Payload.class, org.apache.pekko.remote.ContainerFormats.Payload.Builder.class);
      }

      // Construct using org.apache.pekko.remote.ContainerFormats.Payload.newBuilder()
      private Builder() {

      }

      private Builder(
          org.apache.pekko.protobufv3.internal.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        enclosedMessage_ = org.apache.pekko.protobufv3.internal.ByteString.EMPTY;
        serializerId_ = 0;
        messageManifest_ = org.apache.pekko.protobufv3.internal.ByteString.EMPTY;
        return this;
      }

      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_Payload_descriptor;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.Payload getDefaultInstanceForType() {
        return org.apache.pekko.remote.ContainerFormats.Payload.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.Payload build() {
        org.apache.pekko.remote.ContainerFormats.Payload result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.Payload buildPartial() {
        org.apache.pekko.remote.ContainerFormats.Payload result = new org.apache.pekko.remote.ContainerFormats.Payload(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.pekko.remote.ContainerFormats.Payload result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.enclosedMessage_ = enclosedMessage_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.serializerId_ = serializerId_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.messageManifest_ = messageManifest_;
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.apache.pekko.protobufv3.internal.Message other) {
        if (other instanceof org.apache.pekko.remote.ContainerFormats.Payload) {
          return mergeFrom((org.apache.pekko.remote.ContainerFormats.Payload)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.pekko.remote.ContainerFormats.Payload other) {
        if (other == org.apache.pekko.remote.ContainerFormats.Payload.getDefaultInstance()) return this;
        if (other.hasEnclosedMessage()) {
          setEnclosedMessage(other.getEnclosedMessage());
        }
        if (other.hasSerializerId()) {
          setSerializerId(other.getSerializerId());
        }
        if (other.hasMessageManifest()) {
          setMessageManifest(other.getMessageManifest());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasEnclosedMessage()) {
          return false;
        }
        if (!hasSerializerId()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                enclosedMessage_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                serializerId_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 34: {
                messageManifest_ = input.readBytes();
                bitField0_ |= 0x00000004;
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.apache.pekko.protobufv3.internal.ByteString enclosedMessage_ = org.apache.pekko.protobufv3.internal.ByteString.EMPTY;
      /**
       * <code>required bytes enclosedMessage = 1;</code>
       * @return Whether the enclosedMessage field is set.
       */
      @java.lang.Override
      public boolean hasEnclosedMessage() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required bytes enclosedMessage = 1;</code>
       * @return The enclosedMessage.
       */
      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.ByteString getEnclosedMessage() {
        return enclosedMessage_;
      }
      /**
       * <code>required bytes enclosedMessage = 1;</code>
       * @param value The enclosedMessage to set.
       * @return This builder for chaining.
       */
      public Builder setEnclosedMessage(org.apache.pekko.protobufv3.internal.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        enclosedMessage_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes enclosedMessage = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearEnclosedMessage() {
        bitField0_ = (bitField0_ & ~0x00000001);
        enclosedMessage_ = getDefaultInstance().getEnclosedMessage();
        onChanged();
        return this;
      }

      private int serializerId_ ;
      /**
       * <code>required int32 serializerId = 2;</code>
       * @return Whether the serializerId field is set.
       */
      @java.lang.Override
      public boolean hasSerializerId() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>required int32 serializerId = 2;</code>
       * @return The serializerId.
       */
      @java.lang.Override
      public int getSerializerId() {
        return serializerId_;
      }
      /**
       * <code>required int32 serializerId = 2;</code>
       * @param value The serializerId to set.
       * @return This builder for chaining.
       */
      public Builder setSerializerId(int value) {

        serializerId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 serializerId = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSerializerId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        serializerId_ = 0;
        onChanged();
        return this;
      }

      private org.apache.pekko.protobufv3.internal.ByteString messageManifest_ = org.apache.pekko.protobufv3.internal.ByteString.EMPTY;
      /**
       * <code>optional bytes messageManifest = 4;</code>
       * @return Whether the messageManifest field is set.
       */
      @java.lang.Override
      public boolean hasMessageManifest() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional bytes messageManifest = 4;</code>
       * @return The messageManifest.
       */
      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.ByteString getMessageManifest() {
        return messageManifest_;
      }
      /**
       * <code>optional bytes messageManifest = 4;</code>
       * @param value The messageManifest to set.
       * @return This builder for chaining.
       */
      public Builder setMessageManifest(org.apache.pekko.protobufv3.internal.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        messageManifest_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes messageManifest = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearMessageManifest() {
        bitField0_ = (bitField0_ & ~0x00000004);
        messageManifest_ = getDefaultInstance().getMessageManifest();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Payload)
    }

    // @@protoc_insertion_point(class_scope:Payload)
    private static final org.apache.pekko.remote.ContainerFormats.Payload DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.pekko.remote.ContainerFormats.Payload();
    }

    public static org.apache.pekko.remote.ContainerFormats.Payload getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.pekko.protobufv3.internal.Parser<Payload>
        PARSER = new org.apache.pekko.protobufv3.internal.AbstractParser<Payload>() {
      @java.lang.Override
      public Payload parsePartialFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.apache.pekko.protobufv3.internal.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.apache.pekko.protobufv3.internal.Parser<Payload> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.Parser<Payload> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.Payload getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface WatcherHeartbeatResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:WatcherHeartbeatResponse)
      org.apache.pekko.protobufv3.internal.MessageOrBuilder {

    /**
     * <code>required uint64 uid = 1;</code>
     * @return Whether the uid field is set.
     */
    boolean hasUid();
    /**
     * <code>required uint64 uid = 1;</code>
     * @return The uid.
     */
    long getUid();
  }
  /**
   * Protobuf type {@code WatcherHeartbeatResponse}
   */
  public static final class WatcherHeartbeatResponse extends
      org.apache.pekko.protobufv3.internal.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:WatcherHeartbeatResponse)
      WatcherHeartbeatResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.apache.pekko.protobufv3.internal.RuntimeVersion.validateProtobufGencodeVersion(
        org.apache.pekko.protobufv3.internal.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        WatcherHeartbeatResponse.class.getName());
    }
    // Use WatcherHeartbeatResponse.newBuilder() to construct.
    private WatcherHeartbeatResponse(org.apache.pekko.protobufv3.internal.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private WatcherHeartbeatResponse() {
    }

    public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.pekko.remote.ContainerFormats.internal_static_WatcherHeartbeatResponse_descriptor;
    }

    @java.lang.Override
    protected org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.pekko.remote.ContainerFormats.internal_static_WatcherHeartbeatResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse.class, org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse.Builder.class);
    }

    private int bitField0_;
    public static final int UID_FIELD_NUMBER = 1;
    private long uid_ = 0L;
    /**
     * <code>required uint64 uid = 1;</code>
     * @return Whether the uid field is set.
     */
    @java.lang.Override
    public boolean hasUid() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required uint64 uid = 1;</code>
     * @return The uid.
     */
    @java.lang.Override
    public long getUid() {
      return uid_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasUid()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.apache.pekko.protobufv3.internal.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt64(1, uid_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeUInt64Size(1, uid_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse)) {
        return super.equals(obj);
      }
      org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse other = (org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse) obj;

      if (hasUid() != other.hasUid()) return false;
      if (hasUid()) {
        if (getUid()
            != other.getUid()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasUid()) {
        hash = (37 * hash) + UID_FIELD_NUMBER;
        hash = (53 * hash) + org.apache.pekko.protobufv3.internal.Internal.hashLong(
            getUid());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse parseFrom(
        java.nio.ByteBuffer data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse parseFrom(byte[] data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse parseFrom(
        byte[] data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse parseFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.apache.pekko.protobufv3.internal.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code WatcherHeartbeatResponse}
     */
    public static final class Builder extends
        org.apache.pekko.protobufv3.internal.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:WatcherHeartbeatResponse)
        org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponseOrBuilder {
      public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_WatcherHeartbeatResponse_descriptor;
      }

      @java.lang.Override
      protected org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_WatcherHeartbeatResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse.class, org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse.Builder.class);
      }

      // Construct using org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse.newBuilder()
      private Builder() {

      }

      private Builder(
          org.apache.pekko.protobufv3.internal.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        uid_ = 0L;
        return this;
      }

      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_WatcherHeartbeatResponse_descriptor;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse getDefaultInstanceForType() {
        return org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse build() {
        org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse buildPartial() {
        org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse result = new org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.uid_ = uid_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.apache.pekko.protobufv3.internal.Message other) {
        if (other instanceof org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse) {
          return mergeFrom((org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse other) {
        if (other == org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse.getDefaultInstance()) return this;
        if (other.hasUid()) {
          setUid(other.getUid());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasUid()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                uid_ = input.readUInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private long uid_ ;
      /**
       * <code>required uint64 uid = 1;</code>
       * @return Whether the uid field is set.
       */
      @java.lang.Override
      public boolean hasUid() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required uint64 uid = 1;</code>
       * @return The uid.
       */
      @java.lang.Override
      public long getUid() {
        return uid_;
      }
      /**
       * <code>required uint64 uid = 1;</code>
       * @param value The uid to set.
       * @return This builder for chaining.
       */
      public Builder setUid(long value) {

        uid_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 uid = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearUid() {
        bitField0_ = (bitField0_ & ~0x00000001);
        uid_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:WatcherHeartbeatResponse)
    }

    // @@protoc_insertion_point(class_scope:WatcherHeartbeatResponse)
    private static final org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse();
    }

    public static org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.pekko.protobufv3.internal.Parser<WatcherHeartbeatResponse>
        PARSER = new org.apache.pekko.protobufv3.internal.AbstractParser<WatcherHeartbeatResponse>() {
      @java.lang.Override
      public WatcherHeartbeatResponse parsePartialFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.apache.pekko.protobufv3.internal.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.apache.pekko.protobufv3.internal.Parser<WatcherHeartbeatResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.Parser<WatcherHeartbeatResponse> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.WatcherHeartbeatResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ThrowableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Throwable)
      org.apache.pekko.protobufv3.internal.MessageOrBuilder {

    /**
     * <code>required string className = 1;</code>
     * @return Whether the className field is set.
     */
    boolean hasClassName();
    /**
     * <code>required string className = 1;</code>
     * @return The className.
     */
    java.lang.String getClassName();
    /**
     * <code>required string className = 1;</code>
     * @return The bytes for className.
     */
    org.apache.pekko.protobufv3.internal.ByteString
        getClassNameBytes();

    /**
     * <code>optional string message = 2;</code>
     * @return Whether the message field is set.
     */
    boolean hasMessage();
    /**
     * <code>optional string message = 2;</code>
     * @return The message.
     */
    java.lang.String getMessage();
    /**
     * <code>optional string message = 2;</code>
     * @return The bytes for message.
     */
    org.apache.pekko.protobufv3.internal.ByteString
        getMessageBytes();

    /**
     * <code>optional .Payload cause = 3;</code>
     * @return Whether the cause field is set.
     */
    boolean hasCause();
    /**
     * <code>optional .Payload cause = 3;</code>
     * @return The cause.
     */
    org.apache.pekko.remote.ContainerFormats.Payload getCause();
    /**
     * <code>optional .Payload cause = 3;</code>
     */
    org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder getCauseOrBuilder();

    /**
     * <code>repeated .StackTraceElement stackTrace = 4;</code>
     */
    java.util.List<org.apache.pekko.remote.ContainerFormats.StackTraceElement> 
        getStackTraceList();
    /**
     * <code>repeated .StackTraceElement stackTrace = 4;</code>
     */
    org.apache.pekko.remote.ContainerFormats.StackTraceElement getStackTrace(int index);
    /**
     * <code>repeated .StackTraceElement stackTrace = 4;</code>
     */
    int getStackTraceCount();
    /**
     * <code>repeated .StackTraceElement stackTrace = 4;</code>
     */
    java.util.List<? extends org.apache.pekko.remote.ContainerFormats.StackTraceElementOrBuilder> 
        getStackTraceOrBuilderList();
    /**
     * <code>repeated .StackTraceElement stackTrace = 4;</code>
     */
    org.apache.pekko.remote.ContainerFormats.StackTraceElementOrBuilder getStackTraceOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code Throwable}
   */
  public static final class Throwable extends
      org.apache.pekko.protobufv3.internal.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Throwable)
      ThrowableOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.apache.pekko.protobufv3.internal.RuntimeVersion.validateProtobufGencodeVersion(
        org.apache.pekko.protobufv3.internal.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Throwable.class.getName());
    }
    // Use Throwable.newBuilder() to construct.
    private Throwable(org.apache.pekko.protobufv3.internal.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Throwable() {
      className_ = "";
      message_ = "";
      stackTrace_ = java.util.Collections.emptyList();
    }

    public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.pekko.remote.ContainerFormats.internal_static_Throwable_descriptor;
    }

    @java.lang.Override
    protected org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.pekko.remote.ContainerFormats.internal_static_Throwable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.pekko.remote.ContainerFormats.Throwable.class, org.apache.pekko.remote.ContainerFormats.Throwable.Builder.class);
    }

    private int bitField0_;
    public static final int CLASSNAME_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object className_ = "";
    /**
     * <code>required string className = 1;</code>
     * @return Whether the className field is set.
     */
    @java.lang.Override
    public boolean hasClassName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required string className = 1;</code>
     * @return The className.
     */
    @java.lang.Override
    public java.lang.String getClassName() {
      java.lang.Object ref = className_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.apache.pekko.protobufv3.internal.ByteString bs = 
            (org.apache.pekko.protobufv3.internal.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          className_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string className = 1;</code>
     * @return The bytes for className.
     */
    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.ByteString
        getClassNameBytes() {
      java.lang.Object ref = className_;
      if (ref instanceof java.lang.String) {
        org.apache.pekko.protobufv3.internal.ByteString b = 
            org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        className_ = b;
        return b;
      } else {
        return (org.apache.pekko.protobufv3.internal.ByteString) ref;
      }
    }

    public static final int MESSAGE_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object message_ = "";
    /**
     * <code>optional string message = 2;</code>
     * @return Whether the message field is set.
     */
    @java.lang.Override
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional string message = 2;</code>
     * @return The message.
     */
    @java.lang.Override
    public java.lang.String getMessage() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.apache.pekko.protobufv3.internal.ByteString bs = 
            (org.apache.pekko.protobufv3.internal.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          message_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string message = 2;</code>
     * @return The bytes for message.
     */
    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.ByteString
        getMessageBytes() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        org.apache.pekko.protobufv3.internal.ByteString b = 
            org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        message_ = b;
        return b;
      } else {
        return (org.apache.pekko.protobufv3.internal.ByteString) ref;
      }
    }

    public static final int CAUSE_FIELD_NUMBER = 3;
    private org.apache.pekko.remote.ContainerFormats.Payload cause_;
    /**
     * <code>optional .Payload cause = 3;</code>
     * @return Whether the cause field is set.
     */
    @java.lang.Override
    public boolean hasCause() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional .Payload cause = 3;</code>
     * @return The cause.
     */
    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.Payload getCause() {
      return cause_ == null ? org.apache.pekko.remote.ContainerFormats.Payload.getDefaultInstance() : cause_;
    }
    /**
     * <code>optional .Payload cause = 3;</code>
     */
    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder getCauseOrBuilder() {
      return cause_ == null ? org.apache.pekko.remote.ContainerFormats.Payload.getDefaultInstance() : cause_;
    }

    public static final int STACKTRACE_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<org.apache.pekko.remote.ContainerFormats.StackTraceElement> stackTrace_;
    /**
     * <code>repeated .StackTraceElement stackTrace = 4;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.pekko.remote.ContainerFormats.StackTraceElement> getStackTraceList() {
      return stackTrace_;
    }
    /**
     * <code>repeated .StackTraceElement stackTrace = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.pekko.remote.ContainerFormats.StackTraceElementOrBuilder> 
        getStackTraceOrBuilderList() {
      return stackTrace_;
    }
    /**
     * <code>repeated .StackTraceElement stackTrace = 4;</code>
     */
    @java.lang.Override
    public int getStackTraceCount() {
      return stackTrace_.size();
    }
    /**
     * <code>repeated .StackTraceElement stackTrace = 4;</code>
     */
    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.StackTraceElement getStackTrace(int index) {
      return stackTrace_.get(index);
    }
    /**
     * <code>repeated .StackTraceElement stackTrace = 4;</code>
     */
    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.StackTraceElementOrBuilder getStackTraceOrBuilder(
        int index) {
      return stackTrace_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasClassName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasCause()) {
        if (!getCause().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getStackTraceCount(); i++) {
        if (!getStackTrace(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.apache.pekko.protobufv3.internal.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        org.apache.pekko.protobufv3.internal.GeneratedMessage.writeString(output, 1, className_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        org.apache.pekko.protobufv3.internal.GeneratedMessage.writeString(output, 2, message_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(3, getCause());
      }
      for (int i = 0; i < stackTrace_.size(); i++) {
        output.writeMessage(4, stackTrace_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.apache.pekko.protobufv3.internal.GeneratedMessage.computeStringSize(1, className_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.apache.pekko.protobufv3.internal.GeneratedMessage.computeStringSize(2, message_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeMessageSize(3, getCause());
      }
      for (int i = 0; i < stackTrace_.size(); i++) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeMessageSize(4, stackTrace_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.pekko.remote.ContainerFormats.Throwable)) {
        return super.equals(obj);
      }
      org.apache.pekko.remote.ContainerFormats.Throwable other = (org.apache.pekko.remote.ContainerFormats.Throwable) obj;

      if (hasClassName() != other.hasClassName()) return false;
      if (hasClassName()) {
        if (!getClassName()
            .equals(other.getClassName())) return false;
      }
      if (hasMessage() != other.hasMessage()) return false;
      if (hasMessage()) {
        if (!getMessage()
            .equals(other.getMessage())) return false;
      }
      if (hasCause() != other.hasCause()) return false;
      if (hasCause()) {
        if (!getCause()
            .equals(other.getCause())) return false;
      }
      if (!getStackTraceList()
          .equals(other.getStackTraceList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasClassName()) {
        hash = (37 * hash) + CLASSNAME_FIELD_NUMBER;
        hash = (53 * hash) + getClassName().hashCode();
      }
      if (hasMessage()) {
        hash = (37 * hash) + MESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getMessage().hashCode();
      }
      if (hasCause()) {
        hash = (37 * hash) + CAUSE_FIELD_NUMBER;
        hash = (53 * hash) + getCause().hashCode();
      }
      if (getStackTraceCount() > 0) {
        hash = (37 * hash) + STACKTRACE_FIELD_NUMBER;
        hash = (53 * hash) + getStackTraceList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.pekko.remote.ContainerFormats.Throwable parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.Throwable parseFrom(
        java.nio.ByteBuffer data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.Throwable parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.Throwable parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.Throwable parseFrom(byte[] data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.Throwable parseFrom(
        byte[] data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.Throwable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ContainerFormats.Throwable parseFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.pekko.remote.ContainerFormats.Throwable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.pekko.remote.ContainerFormats.Throwable parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.Throwable parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ContainerFormats.Throwable parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.pekko.remote.ContainerFormats.Throwable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.apache.pekko.protobufv3.internal.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Throwable}
     */
    public static final class Builder extends
        org.apache.pekko.protobufv3.internal.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Throwable)
        org.apache.pekko.remote.ContainerFormats.ThrowableOrBuilder {
      public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_Throwable_descriptor;
      }

      @java.lang.Override
      protected org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_Throwable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.pekko.remote.ContainerFormats.Throwable.class, org.apache.pekko.remote.ContainerFormats.Throwable.Builder.class);
      }

      // Construct using org.apache.pekko.remote.ContainerFormats.Throwable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.pekko.protobufv3.internal.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.pekko.protobufv3.internal.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getCauseFieldBuilder();
          getStackTraceFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        className_ = "";
        message_ = "";
        cause_ = null;
        if (causeBuilder_ != null) {
          causeBuilder_.dispose();
          causeBuilder_ = null;
        }
        if (stackTraceBuilder_ == null) {
          stackTrace_ = java.util.Collections.emptyList();
        } else {
          stackTrace_ = null;
          stackTraceBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_Throwable_descriptor;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.Throwable getDefaultInstanceForType() {
        return org.apache.pekko.remote.ContainerFormats.Throwable.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.Throwable build() {
        org.apache.pekko.remote.ContainerFormats.Throwable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.Throwable buildPartial() {
        org.apache.pekko.remote.ContainerFormats.Throwable result = new org.apache.pekko.remote.ContainerFormats.Throwable(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.apache.pekko.remote.ContainerFormats.Throwable result) {
        if (stackTraceBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            stackTrace_ = java.util.Collections.unmodifiableList(stackTrace_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.stackTrace_ = stackTrace_;
        } else {
          result.stackTrace_ = stackTraceBuilder_.build();
        }
      }

      private void buildPartial0(org.apache.pekko.remote.ContainerFormats.Throwable result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.className_ = className_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.message_ = message_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.cause_ = causeBuilder_ == null
              ? cause_
              : causeBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.apache.pekko.protobufv3.internal.Message other) {
        if (other instanceof org.apache.pekko.remote.ContainerFormats.Throwable) {
          return mergeFrom((org.apache.pekko.remote.ContainerFormats.Throwable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.pekko.remote.ContainerFormats.Throwable other) {
        if (other == org.apache.pekko.remote.ContainerFormats.Throwable.getDefaultInstance()) return this;
        if (other.hasClassName()) {
          className_ = other.className_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasMessage()) {
          message_ = other.message_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.hasCause()) {
          mergeCause(other.getCause());
        }
        if (stackTraceBuilder_ == null) {
          if (!other.stackTrace_.isEmpty()) {
            if (stackTrace_.isEmpty()) {
              stackTrace_ = other.stackTrace_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureStackTraceIsMutable();
              stackTrace_.addAll(other.stackTrace_);
            }
            onChanged();
          }
        } else {
          if (!other.stackTrace_.isEmpty()) {
            if (stackTraceBuilder_.isEmpty()) {
              stackTraceBuilder_.dispose();
              stackTraceBuilder_ = null;
              stackTrace_ = other.stackTrace_;
              bitField0_ = (bitField0_ & ~0x00000008);
              stackTraceBuilder_ = 
                org.apache.pekko.protobufv3.internal.GeneratedMessage.alwaysUseFieldBuilders ?
                   getStackTraceFieldBuilder() : null;
            } else {
              stackTraceBuilder_.addAllMessages(other.stackTrace_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasClassName()) {
          return false;
        }
        if (hasCause()) {
          if (!getCause().isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getStackTraceCount(); i++) {
          if (!getStackTrace(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                className_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                message_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getCauseFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                org.apache.pekko.remote.ContainerFormats.StackTraceElement m =
                    input.readMessage(
                        org.apache.pekko.remote.ContainerFormats.StackTraceElement.parser(),
                        extensionRegistry);
                if (stackTraceBuilder_ == null) {
                  ensureStackTraceIsMutable();
                  stackTrace_.add(m);
                } else {
                  stackTraceBuilder_.addMessage(m);
                }
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object className_ = "";
      /**
       * <code>required string className = 1;</code>
       * @return Whether the className field is set.
       */
      public boolean hasClassName() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required string className = 1;</code>
       * @return The className.
       */
      public java.lang.String getClassName() {
        java.lang.Object ref = className_;
        if (!(ref instanceof java.lang.String)) {
          org.apache.pekko.protobufv3.internal.ByteString bs =
              (org.apache.pekko.protobufv3.internal.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            className_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string className = 1;</code>
       * @return The bytes for className.
       */
      public org.apache.pekko.protobufv3.internal.ByteString
          getClassNameBytes() {
        java.lang.Object ref = className_;
        if (ref instanceof String) {
          org.apache.pekko.protobufv3.internal.ByteString b = 
              org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          className_ = b;
          return b;
        } else {
          return (org.apache.pekko.protobufv3.internal.ByteString) ref;
        }
      }
      /**
       * <code>required string className = 1;</code>
       * @param value The className to set.
       * @return This builder for chaining.
       */
      public Builder setClassName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        className_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required string className = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearClassName() {
        className_ = getDefaultInstance().getClassName();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>required string className = 1;</code>
       * @param value The bytes for className to set.
       * @return This builder for chaining.
       */
      public Builder setClassNameBytes(
          org.apache.pekko.protobufv3.internal.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        className_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.lang.Object message_ = "";
      /**
       * <code>optional string message = 2;</code>
       * @return Whether the message field is set.
       */
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional string message = 2;</code>
       * @return The message.
       */
      public java.lang.String getMessage() {
        java.lang.Object ref = message_;
        if (!(ref instanceof java.lang.String)) {
          org.apache.pekko.protobufv3.internal.ByteString bs =
              (org.apache.pekko.protobufv3.internal.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            message_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string message = 2;</code>
       * @return The bytes for message.
       */
      public org.apache.pekko.protobufv3.internal.ByteString
          getMessageBytes() {
        java.lang.Object ref = message_;
        if (ref instanceof String) {
          org.apache.pekko.protobufv3.internal.ByteString b = 
              org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          message_ = b;
          return b;
        } else {
          return (org.apache.pekko.protobufv3.internal.ByteString) ref;
        }
      }
      /**
       * <code>optional string message = 2;</code>
       * @param value The message to set.
       * @return This builder for chaining.
       */
      public Builder setMessage(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        message_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional string message = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMessage() {
        message_ = getDefaultInstance().getMessage();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <code>optional string message = 2;</code>
       * @param value The bytes for message to set.
       * @return This builder for chaining.
       */
      public Builder setMessageBytes(
          org.apache.pekko.protobufv3.internal.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        message_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private org.apache.pekko.remote.ContainerFormats.Payload cause_;
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilder<
          org.apache.pekko.remote.ContainerFormats.Payload, org.apache.pekko.remote.ContainerFormats.Payload.Builder, org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder> causeBuilder_;
      /**
       * <code>optional .Payload cause = 3;</code>
       * @return Whether the cause field is set.
       */
      public boolean hasCause() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional .Payload cause = 3;</code>
       * @return The cause.
       */
      public org.apache.pekko.remote.ContainerFormats.Payload getCause() {
        if (causeBuilder_ == null) {
          return cause_ == null ? org.apache.pekko.remote.ContainerFormats.Payload.getDefaultInstance() : cause_;
        } else {
          return causeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .Payload cause = 3;</code>
       */
      public Builder setCause(org.apache.pekko.remote.ContainerFormats.Payload value) {
        if (causeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          cause_ = value;
        } else {
          causeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional .Payload cause = 3;</code>
       */
      public Builder setCause(
          org.apache.pekko.remote.ContainerFormats.Payload.Builder builderForValue) {
        if (causeBuilder_ == null) {
          cause_ = builderForValue.build();
        } else {
          causeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional .Payload cause = 3;</code>
       */
      public Builder mergeCause(org.apache.pekko.remote.ContainerFormats.Payload value) {
        if (causeBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            cause_ != null &&
            cause_ != org.apache.pekko.remote.ContainerFormats.Payload.getDefaultInstance()) {
            getCauseBuilder().mergeFrom(value);
          } else {
            cause_ = value;
          }
        } else {
          causeBuilder_.mergeFrom(value);
        }
        if (cause_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional .Payload cause = 3;</code>
       */
      public Builder clearCause() {
        bitField0_ = (bitField0_ & ~0x00000004);
        cause_ = null;
        if (causeBuilder_ != null) {
          causeBuilder_.dispose();
          causeBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .Payload cause = 3;</code>
       */
      public org.apache.pekko.remote.ContainerFormats.Payload.Builder getCauseBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getCauseFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .Payload cause = 3;</code>
       */
      public org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder getCauseOrBuilder() {
        if (causeBuilder_ != null) {
          return causeBuilder_.getMessageOrBuilder();
        } else {
          return cause_ == null ?
              org.apache.pekko.remote.ContainerFormats.Payload.getDefaultInstance() : cause_;
        }
      }
      /**
       * <code>optional .Payload cause = 3;</code>
       */
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilder<
          org.apache.pekko.remote.ContainerFormats.Payload, org.apache.pekko.remote.ContainerFormats.Payload.Builder, org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder> 
          getCauseFieldBuilder() {
        if (causeBuilder_ == null) {
          causeBuilder_ = new org.apache.pekko.protobufv3.internal.SingleFieldBuilder<
              org.apache.pekko.remote.ContainerFormats.Payload, org.apache.pekko.remote.ContainerFormats.Payload.Builder, org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder>(
                  getCause(),
                  getParentForChildren(),
                  isClean());
          cause_ = null;
        }
        return causeBuilder_;
      }

      private java.util.List<org.apache.pekko.remote.ContainerFormats.StackTraceElement> stackTrace_ =
        java.util.Collections.emptyList();
      private void ensureStackTraceIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          stackTrace_ = new java.util.ArrayList<org.apache.pekko.remote.ContainerFormats.StackTraceElement>(stackTrace_);
          bitField0_ |= 0x00000008;
         }
      }

      private org.apache.pekko.protobufv3.internal.RepeatedFieldBuilder<
          org.apache.pekko.remote.ContainerFormats.StackTraceElement, org.apache.pekko.remote.ContainerFormats.StackTraceElement.Builder, org.apache.pekko.remote.ContainerFormats.StackTraceElementOrBuilder> stackTraceBuilder_;

      /**
       * <code>repeated .StackTraceElement stackTrace = 4;</code>
       */
      public java.util.List<org.apache.pekko.remote.ContainerFormats.StackTraceElement> getStackTraceList() {
        if (stackTraceBuilder_ == null) {
          return java.util.Collections.unmodifiableList(stackTrace_);
        } else {
          return stackTraceBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .StackTraceElement stackTrace = 4;</code>
       */
      public int getStackTraceCount() {
        if (stackTraceBuilder_ == null) {
          return stackTrace_.size();
        } else {
          return stackTraceBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .StackTraceElement stackTrace = 4;</code>
       */
      public org.apache.pekko.remote.ContainerFormats.StackTraceElement getStackTrace(int index) {
        if (stackTraceBuilder_ == null) {
          return stackTrace_.get(index);
        } else {
          return stackTraceBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .StackTraceElement stackTrace = 4;</code>
       */
      public Builder setStackTrace(
          int index, org.apache.pekko.remote.ContainerFormats.StackTraceElement value) {
        if (stackTraceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStackTraceIsMutable();
          stackTrace_.set(index, value);
          onChanged();
        } else {
          stackTraceBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .StackTraceElement stackTrace = 4;</code>
       */
      public Builder setStackTrace(
          int index, org.apache.pekko.remote.ContainerFormats.StackTraceElement.Builder builderForValue) {
        if (stackTraceBuilder_ == null) {
          ensureStackTraceIsMutable();
          stackTrace_.set(index, builderForValue.build());
          onChanged();
        } else {
          stackTraceBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .StackTraceElement stackTrace = 4;</code>
       */
      public Builder addStackTrace(org.apache.pekko.remote.ContainerFormats.StackTraceElement value) {
        if (stackTraceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStackTraceIsMutable();
          stackTrace_.add(value);
          onChanged();
        } else {
          stackTraceBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .StackTraceElement stackTrace = 4;</code>
       */
      public Builder addStackTrace(
          int index, org.apache.pekko.remote.ContainerFormats.StackTraceElement value) {
        if (stackTraceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStackTraceIsMutable();
          stackTrace_.add(index, value);
          onChanged();
        } else {
          stackTraceBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .StackTraceElement stackTrace = 4;</code>
       */
      public Builder addStackTrace(
          org.apache.pekko.remote.ContainerFormats.StackTraceElement.Builder builderForValue) {
        if (stackTraceBuilder_ == null) {
          ensureStackTraceIsMutable();
          stackTrace_.add(builderForValue.build());
          onChanged();
        } else {
          stackTraceBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .StackTraceElement stackTrace = 4;</code>
       */
      public Builder addStackTrace(
          int index, org.apache.pekko.remote.ContainerFormats.StackTraceElement.Builder builderForValue) {
        if (stackTraceBuilder_ == null) {
          ensureStackTraceIsMutable();
          stackTrace_.add(index, builderForValue.build());
          onChanged();
        } else {
          stackTraceBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .StackTraceElement stackTrace = 4;</code>
       */
      public Builder addAllStackTrace(
          java.lang.Iterable<? extends org.apache.pekko.remote.ContainerFormats.StackTraceElement> values) {
        if (stackTraceBuilder_ == null) {
          ensureStackTraceIsMutable();
          org.apache.pekko.protobufv3.internal.AbstractMessageLite.Builder.addAll(
              values, stackTrace_);
          onChanged();
        } else {
          stackTraceBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .StackTraceElement stackTrace = 4;</code>
       */
      public Builder clearStackTrace() {
        if (stackTraceBuilder_ == null) {
          stackTrace_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          stackTraceBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .StackTraceElement stackTrace = 4;</code>
       */
      public Builder removeStackTrace(int index) {
        if (stackTraceBuilder_ == null) {
          ensureStackTraceIsMutable();
          stackTrace_.remove(index);
          onChanged();
        } else {
          stackTraceBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .StackTraceElement stackTrace = 4;</code>
       */
      public org.apache.pekko.remote.ContainerFormats.StackTraceElement.Builder getStackTraceBuilder(
          int index) {
        return getStackTraceFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .StackTraceElement stackTrace = 4;</code>
       */
      public org.apache.pekko.remote.ContainerFormats.StackTraceElementOrBuilder getStackTraceOrBuilder(
          int index) {
        if (stackTraceBuilder_ == null) {
          return stackTrace_.get(index);  } else {
          return stackTraceBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .StackTraceElement stackTrace = 4;</code>
       */
      public java.util.List<? extends org.apache.pekko.remote.ContainerFormats.StackTraceElementOrBuilder> 
           getStackTraceOrBuilderList() {
        if (stackTraceBuilder_ != null) {
          return stackTraceBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(stackTrace_);
        }
      }
      /**
       * <code>repeated .StackTraceElement stackTrace = 4;</code>
       */
      public org.apache.pekko.remote.ContainerFormats.StackTraceElement.Builder addStackTraceBuilder() {
        return getStackTraceFieldBuilder().addBuilder(
            org.apache.pekko.remote.ContainerFormats.StackTraceElement.getDefaultInstance());
      }
      /**
       * <code>repeated .StackTraceElement stackTrace = 4;</code>
       */
      public org.apache.pekko.remote.ContainerFormats.StackTraceElement.Builder addStackTraceBuilder(
          int index) {
        return getStackTraceFieldBuilder().addBuilder(
            index, org.apache.pekko.remote.ContainerFormats.StackTraceElement.getDefaultInstance());
      }
      /**
       * <code>repeated .StackTraceElement stackTrace = 4;</code>
       */
      public java.util.List<org.apache.pekko.remote.ContainerFormats.StackTraceElement.Builder> 
           getStackTraceBuilderList() {
        return getStackTraceFieldBuilder().getBuilderList();
      }
      private org.apache.pekko.protobufv3.internal.RepeatedFieldBuilder<
          org.apache.pekko.remote.ContainerFormats.StackTraceElement, org.apache.pekko.remote.ContainerFormats.StackTraceElement.Builder, org.apache.pekko.remote.ContainerFormats.StackTraceElementOrBuilder> 
          getStackTraceFieldBuilder() {
        if (stackTraceBuilder_ == null) {
          stackTraceBuilder_ = new org.apache.pekko.protobufv3.internal.RepeatedFieldBuilder<
              org.apache.pekko.remote.ContainerFormats.StackTraceElement, org.apache.pekko.remote.ContainerFormats.StackTraceElement.Builder, org.apache.pekko.remote.ContainerFormats.StackTraceElementOrBuilder>(
                  stackTrace_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          stackTrace_ = null;
        }
        return stackTraceBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:Throwable)
    }

    // @@protoc_insertion_point(class_scope:Throwable)
    private static final org.apache.pekko.remote.ContainerFormats.Throwable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.pekko.remote.ContainerFormats.Throwable();
    }

    public static org.apache.pekko.remote.ContainerFormats.Throwable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.pekko.protobufv3.internal.Parser<Throwable>
        PARSER = new org.apache.pekko.protobufv3.internal.AbstractParser<Throwable>() {
      @java.lang.Override
      public Throwable parsePartialFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.apache.pekko.protobufv3.internal.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.apache.pekko.protobufv3.internal.Parser<Throwable> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.Parser<Throwable> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.Throwable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ThrowableNotSerializableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:ThrowableNotSerializable)
      org.apache.pekko.protobufv3.internal.MessageOrBuilder {

    /**
     * <code>required string message = 1;</code>
     * @return Whether the message field is set.
     */
    boolean hasMessage();
    /**
     * <code>required string message = 1;</code>
     * @return The message.
     */
    java.lang.String getMessage();
    /**
     * <code>required string message = 1;</code>
     * @return The bytes for message.
     */
    org.apache.pekko.protobufv3.internal.ByteString
        getMessageBytes();

    /**
     * <code>required string originalMessage = 2;</code>
     * @return Whether the originalMessage field is set.
     */
    boolean hasOriginalMessage();
    /**
     * <code>required string originalMessage = 2;</code>
     * @return The originalMessage.
     */
    java.lang.String getOriginalMessage();
    /**
     * <code>required string originalMessage = 2;</code>
     * @return The bytes for originalMessage.
     */
    org.apache.pekko.protobufv3.internal.ByteString
        getOriginalMessageBytes();

    /**
     * <code>required string originalClassName = 3;</code>
     * @return Whether the originalClassName field is set.
     */
    boolean hasOriginalClassName();
    /**
     * <code>required string originalClassName = 3;</code>
     * @return The originalClassName.
     */
    java.lang.String getOriginalClassName();
    /**
     * <code>required string originalClassName = 3;</code>
     * @return The bytes for originalClassName.
     */
    org.apache.pekko.protobufv3.internal.ByteString
        getOriginalClassNameBytes();
  }
  /**
   * Protobuf type {@code ThrowableNotSerializable}
   */
  public static final class ThrowableNotSerializable extends
      org.apache.pekko.protobufv3.internal.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:ThrowableNotSerializable)
      ThrowableNotSerializableOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.apache.pekko.protobufv3.internal.RuntimeVersion.validateProtobufGencodeVersion(
        org.apache.pekko.protobufv3.internal.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        ThrowableNotSerializable.class.getName());
    }
    // Use ThrowableNotSerializable.newBuilder() to construct.
    private ThrowableNotSerializable(org.apache.pekko.protobufv3.internal.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private ThrowableNotSerializable() {
      message_ = "";
      originalMessage_ = "";
      originalClassName_ = "";
    }

    public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.pekko.remote.ContainerFormats.internal_static_ThrowableNotSerializable_descriptor;
    }

    @java.lang.Override
    protected org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.pekko.remote.ContainerFormats.internal_static_ThrowableNotSerializable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable.class, org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable.Builder.class);
    }

    private int bitField0_;
    public static final int MESSAGE_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object message_ = "";
    /**
     * <code>required string message = 1;</code>
     * @return Whether the message field is set.
     */
    @java.lang.Override
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required string message = 1;</code>
     * @return The message.
     */
    @java.lang.Override
    public java.lang.String getMessage() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.apache.pekko.protobufv3.internal.ByteString bs = 
            (org.apache.pekko.protobufv3.internal.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          message_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string message = 1;</code>
     * @return The bytes for message.
     */
    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.ByteString
        getMessageBytes() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        org.apache.pekko.protobufv3.internal.ByteString b = 
            org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        message_ = b;
        return b;
      } else {
        return (org.apache.pekko.protobufv3.internal.ByteString) ref;
      }
    }

    public static final int ORIGINALMESSAGE_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object originalMessage_ = "";
    /**
     * <code>required string originalMessage = 2;</code>
     * @return Whether the originalMessage field is set.
     */
    @java.lang.Override
    public boolean hasOriginalMessage() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>required string originalMessage = 2;</code>
     * @return The originalMessage.
     */
    @java.lang.Override
    public java.lang.String getOriginalMessage() {
      java.lang.Object ref = originalMessage_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.apache.pekko.protobufv3.internal.ByteString bs = 
            (org.apache.pekko.protobufv3.internal.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          originalMessage_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string originalMessage = 2;</code>
     * @return The bytes for originalMessage.
     */
    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.ByteString
        getOriginalMessageBytes() {
      java.lang.Object ref = originalMessage_;
      if (ref instanceof java.lang.String) {
        org.apache.pekko.protobufv3.internal.ByteString b = 
            org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        originalMessage_ = b;
        return b;
      } else {
        return (org.apache.pekko.protobufv3.internal.ByteString) ref;
      }
    }

    public static final int ORIGINALCLASSNAME_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object originalClassName_ = "";
    /**
     * <code>required string originalClassName = 3;</code>
     * @return Whether the originalClassName field is set.
     */
    @java.lang.Override
    public boolean hasOriginalClassName() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>required string originalClassName = 3;</code>
     * @return The originalClassName.
     */
    @java.lang.Override
    public java.lang.String getOriginalClassName() {
      java.lang.Object ref = originalClassName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.apache.pekko.protobufv3.internal.ByteString bs = 
            (org.apache.pekko.protobufv3.internal.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          originalClassName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string originalClassName = 3;</code>
     * @return The bytes for originalClassName.
     */
    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.ByteString
        getOriginalClassNameBytes() {
      java.lang.Object ref = originalClassName_;
      if (ref instanceof java.lang.String) {
        org.apache.pekko.protobufv3.internal.ByteString b = 
            org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        originalClassName_ = b;
        return b;
      } else {
        return (org.apache.pekko.protobufv3.internal.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMessage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasOriginalMessage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasOriginalClassName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.apache.pekko.protobufv3.internal.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        org.apache.pekko.protobufv3.internal.GeneratedMessage.writeString(output, 1, message_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        org.apache.pekko.protobufv3.internal.GeneratedMessage.writeString(output, 2, originalMessage_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        org.apache.pekko.protobufv3.internal.GeneratedMessage.writeString(output, 3, originalClassName_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.apache.pekko.protobufv3.internal.GeneratedMessage.computeStringSize(1, message_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.apache.pekko.protobufv3.internal.GeneratedMessage.computeStringSize(2, originalMessage_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.apache.pekko.protobufv3.internal.GeneratedMessage.computeStringSize(3, originalClassName_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable)) {
        return super.equals(obj);
      }
      org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable other = (org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable) obj;

      if (hasMessage() != other.hasMessage()) return false;
      if (hasMessage()) {
        if (!getMessage()
            .equals(other.getMessage())) return false;
      }
      if (hasOriginalMessage() != other.hasOriginalMessage()) return false;
      if (hasOriginalMessage()) {
        if (!getOriginalMessage()
            .equals(other.getOriginalMessage())) return false;
      }
      if (hasOriginalClassName() != other.hasOriginalClassName()) return false;
      if (hasOriginalClassName()) {
        if (!getOriginalClassName()
            .equals(other.getOriginalClassName())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasMessage()) {
        hash = (37 * hash) + MESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getMessage().hashCode();
      }
      if (hasOriginalMessage()) {
        hash = (37 * hash) + ORIGINALMESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getOriginalMessage().hashCode();
      }
      if (hasOriginalClassName()) {
        hash = (37 * hash) + ORIGINALCLASSNAME_FIELD_NUMBER;
        hash = (53 * hash) + getOriginalClassName().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable parseFrom(
        java.nio.ByteBuffer data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable parseFrom(byte[] data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable parseFrom(
        byte[] data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable parseFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.apache.pekko.protobufv3.internal.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ThrowableNotSerializable}
     */
    public static final class Builder extends
        org.apache.pekko.protobufv3.internal.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:ThrowableNotSerializable)
        org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializableOrBuilder {
      public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_ThrowableNotSerializable_descriptor;
      }

      @java.lang.Override
      protected org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_ThrowableNotSerializable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable.class, org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable.Builder.class);
      }

      // Construct using org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable.newBuilder()
      private Builder() {

      }

      private Builder(
          org.apache.pekko.protobufv3.internal.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        message_ = "";
        originalMessage_ = "";
        originalClassName_ = "";
        return this;
      }

      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_ThrowableNotSerializable_descriptor;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable getDefaultInstanceForType() {
        return org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable build() {
        org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable buildPartial() {
        org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable result = new org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.message_ = message_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.originalMessage_ = originalMessage_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.originalClassName_ = originalClassName_;
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.apache.pekko.protobufv3.internal.Message other) {
        if (other instanceof org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable) {
          return mergeFrom((org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable other) {
        if (other == org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable.getDefaultInstance()) return this;
        if (other.hasMessage()) {
          message_ = other.message_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasOriginalMessage()) {
          originalMessage_ = other.originalMessage_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.hasOriginalClassName()) {
          originalClassName_ = other.originalClassName_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasMessage()) {
          return false;
        }
        if (!hasOriginalMessage()) {
          return false;
        }
        if (!hasOriginalClassName()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                message_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                originalMessage_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                originalClassName_ = input.readBytes();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object message_ = "";
      /**
       * <code>required string message = 1;</code>
       * @return Whether the message field is set.
       */
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required string message = 1;</code>
       * @return The message.
       */
      public java.lang.String getMessage() {
        java.lang.Object ref = message_;
        if (!(ref instanceof java.lang.String)) {
          org.apache.pekko.protobufv3.internal.ByteString bs =
              (org.apache.pekko.protobufv3.internal.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            message_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string message = 1;</code>
       * @return The bytes for message.
       */
      public org.apache.pekko.protobufv3.internal.ByteString
          getMessageBytes() {
        java.lang.Object ref = message_;
        if (ref instanceof String) {
          org.apache.pekko.protobufv3.internal.ByteString b = 
              org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          message_ = b;
          return b;
        } else {
          return (org.apache.pekko.protobufv3.internal.ByteString) ref;
        }
      }
      /**
       * <code>required string message = 1;</code>
       * @param value The message to set.
       * @return This builder for chaining.
       */
      public Builder setMessage(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        message_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required string message = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearMessage() {
        message_ = getDefaultInstance().getMessage();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>required string message = 1;</code>
       * @param value The bytes for message to set.
       * @return This builder for chaining.
       */
      public Builder setMessageBytes(
          org.apache.pekko.protobufv3.internal.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        message_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.lang.Object originalMessage_ = "";
      /**
       * <code>required string originalMessage = 2;</code>
       * @return Whether the originalMessage field is set.
       */
      public boolean hasOriginalMessage() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>required string originalMessage = 2;</code>
       * @return The originalMessage.
       */
      public java.lang.String getOriginalMessage() {
        java.lang.Object ref = originalMessage_;
        if (!(ref instanceof java.lang.String)) {
          org.apache.pekko.protobufv3.internal.ByteString bs =
              (org.apache.pekko.protobufv3.internal.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            originalMessage_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string originalMessage = 2;</code>
       * @return The bytes for originalMessage.
       */
      public org.apache.pekko.protobufv3.internal.ByteString
          getOriginalMessageBytes() {
        java.lang.Object ref = originalMessage_;
        if (ref instanceof String) {
          org.apache.pekko.protobufv3.internal.ByteString b = 
              org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          originalMessage_ = b;
          return b;
        } else {
          return (org.apache.pekko.protobufv3.internal.ByteString) ref;
        }
      }
      /**
       * <code>required string originalMessage = 2;</code>
       * @param value The originalMessage to set.
       * @return This builder for chaining.
       */
      public Builder setOriginalMessage(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        originalMessage_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>required string originalMessage = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearOriginalMessage() {
        originalMessage_ = getDefaultInstance().getOriginalMessage();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <code>required string originalMessage = 2;</code>
       * @param value The bytes for originalMessage to set.
       * @return This builder for chaining.
       */
      public Builder setOriginalMessageBytes(
          org.apache.pekko.protobufv3.internal.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        originalMessage_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private java.lang.Object originalClassName_ = "";
      /**
       * <code>required string originalClassName = 3;</code>
       * @return Whether the originalClassName field is set.
       */
      public boolean hasOriginalClassName() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>required string originalClassName = 3;</code>
       * @return The originalClassName.
       */
      public java.lang.String getOriginalClassName() {
        java.lang.Object ref = originalClassName_;
        if (!(ref instanceof java.lang.String)) {
          org.apache.pekko.protobufv3.internal.ByteString bs =
              (org.apache.pekko.protobufv3.internal.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            originalClassName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string originalClassName = 3;</code>
       * @return The bytes for originalClassName.
       */
      public org.apache.pekko.protobufv3.internal.ByteString
          getOriginalClassNameBytes() {
        java.lang.Object ref = originalClassName_;
        if (ref instanceof String) {
          org.apache.pekko.protobufv3.internal.ByteString b = 
              org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          originalClassName_ = b;
          return b;
        } else {
          return (org.apache.pekko.protobufv3.internal.ByteString) ref;
        }
      }
      /**
       * <code>required string originalClassName = 3;</code>
       * @param value The originalClassName to set.
       * @return This builder for chaining.
       */
      public Builder setOriginalClassName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        originalClassName_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>required string originalClassName = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearOriginalClassName() {
        originalClassName_ = getDefaultInstance().getOriginalClassName();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <code>required string originalClassName = 3;</code>
       * @param value The bytes for originalClassName to set.
       * @return This builder for chaining.
       */
      public Builder setOriginalClassNameBytes(
          org.apache.pekko.protobufv3.internal.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        originalClassName_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ThrowableNotSerializable)
    }

    // @@protoc_insertion_point(class_scope:ThrowableNotSerializable)
    private static final org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable();
    }

    public static org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.pekko.protobufv3.internal.Parser<ThrowableNotSerializable>
        PARSER = new org.apache.pekko.protobufv3.internal.AbstractParser<ThrowableNotSerializable>() {
      @java.lang.Override
      public ThrowableNotSerializable parsePartialFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.apache.pekko.protobufv3.internal.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.apache.pekko.protobufv3.internal.Parser<ThrowableNotSerializable> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.Parser<ThrowableNotSerializable> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.ThrowableNotSerializable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ActorInitializationExceptionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:ActorInitializationException)
      org.apache.pekko.protobufv3.internal.MessageOrBuilder {

    /**
     * <code>optional .ActorRef actor = 1;</code>
     * @return Whether the actor field is set.
     */
    boolean hasActor();
    /**
     * <code>optional .ActorRef actor = 1;</code>
     * @return The actor.
     */
    org.apache.pekko.remote.ContainerFormats.ActorRef getActor();
    /**
     * <code>optional .ActorRef actor = 1;</code>
     */
    org.apache.pekko.remote.ContainerFormats.ActorRefOrBuilder getActorOrBuilder();

    /**
     * <code>required string message = 2;</code>
     * @return Whether the message field is set.
     */
    boolean hasMessage();
    /**
     * <code>required string message = 2;</code>
     * @return The message.
     */
    java.lang.String getMessage();
    /**
     * <code>required string message = 2;</code>
     * @return The bytes for message.
     */
    org.apache.pekko.protobufv3.internal.ByteString
        getMessageBytes();

    /**
     * <code>required .Payload cause = 3;</code>
     * @return Whether the cause field is set.
     */
    boolean hasCause();
    /**
     * <code>required .Payload cause = 3;</code>
     * @return The cause.
     */
    org.apache.pekko.remote.ContainerFormats.Payload getCause();
    /**
     * <code>required .Payload cause = 3;</code>
     */
    org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder getCauseOrBuilder();
  }
  /**
   * Protobuf type {@code ActorInitializationException}
   */
  public static final class ActorInitializationException extends
      org.apache.pekko.protobufv3.internal.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:ActorInitializationException)
      ActorInitializationExceptionOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.apache.pekko.protobufv3.internal.RuntimeVersion.validateProtobufGencodeVersion(
        org.apache.pekko.protobufv3.internal.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        ActorInitializationException.class.getName());
    }
    // Use ActorInitializationException.newBuilder() to construct.
    private ActorInitializationException(org.apache.pekko.protobufv3.internal.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private ActorInitializationException() {
      message_ = "";
    }

    public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.pekko.remote.ContainerFormats.internal_static_ActorInitializationException_descriptor;
    }

    @java.lang.Override
    protected org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.pekko.remote.ContainerFormats.internal_static_ActorInitializationException_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.pekko.remote.ContainerFormats.ActorInitializationException.class, org.apache.pekko.remote.ContainerFormats.ActorInitializationException.Builder.class);
    }

    private int bitField0_;
    public static final int ACTOR_FIELD_NUMBER = 1;
    private org.apache.pekko.remote.ContainerFormats.ActorRef actor_;
    /**
     * <code>optional .ActorRef actor = 1;</code>
     * @return Whether the actor field is set.
     */
    @java.lang.Override
    public boolean hasActor() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional .ActorRef actor = 1;</code>
     * @return The actor.
     */
    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.ActorRef getActor() {
      return actor_ == null ? org.apache.pekko.remote.ContainerFormats.ActorRef.getDefaultInstance() : actor_;
    }
    /**
     * <code>optional .ActorRef actor = 1;</code>
     */
    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.ActorRefOrBuilder getActorOrBuilder() {
      return actor_ == null ? org.apache.pekko.remote.ContainerFormats.ActorRef.getDefaultInstance() : actor_;
    }

    public static final int MESSAGE_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object message_ = "";
    /**
     * <code>required string message = 2;</code>
     * @return Whether the message field is set.
     */
    @java.lang.Override
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>required string message = 2;</code>
     * @return The message.
     */
    @java.lang.Override
    public java.lang.String getMessage() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.apache.pekko.protobufv3.internal.ByteString bs = 
            (org.apache.pekko.protobufv3.internal.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          message_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string message = 2;</code>
     * @return The bytes for message.
     */
    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.ByteString
        getMessageBytes() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        org.apache.pekko.protobufv3.internal.ByteString b = 
            org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        message_ = b;
        return b;
      } else {
        return (org.apache.pekko.protobufv3.internal.ByteString) ref;
      }
    }

    public static final int CAUSE_FIELD_NUMBER = 3;
    private org.apache.pekko.remote.ContainerFormats.Payload cause_;
    /**
     * <code>required .Payload cause = 3;</code>
     * @return Whether the cause field is set.
     */
    @java.lang.Override
    public boolean hasCause() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>required .Payload cause = 3;</code>
     * @return The cause.
     */
    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.Payload getCause() {
      return cause_ == null ? org.apache.pekko.remote.ContainerFormats.Payload.getDefaultInstance() : cause_;
    }
    /**
     * <code>required .Payload cause = 3;</code>
     */
    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder getCauseOrBuilder() {
      return cause_ == null ? org.apache.pekko.remote.ContainerFormats.Payload.getDefaultInstance() : cause_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMessage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCause()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasActor()) {
        if (!getActor().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!getCause().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.apache.pekko.protobufv3.internal.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getActor());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        org.apache.pekko.protobufv3.internal.GeneratedMessage.writeString(output, 2, message_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(3, getCause());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeMessageSize(1, getActor());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.apache.pekko.protobufv3.internal.GeneratedMessage.computeStringSize(2, message_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeMessageSize(3, getCause());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.pekko.remote.ContainerFormats.ActorInitializationException)) {
        return super.equals(obj);
      }
      org.apache.pekko.remote.ContainerFormats.ActorInitializationException other = (org.apache.pekko.remote.ContainerFormats.ActorInitializationException) obj;

      if (hasActor() != other.hasActor()) return false;
      if (hasActor()) {
        if (!getActor()
            .equals(other.getActor())) return false;
      }
      if (hasMessage() != other.hasMessage()) return false;
      if (hasMessage()) {
        if (!getMessage()
            .equals(other.getMessage())) return false;
      }
      if (hasCause() != other.hasCause()) return false;
      if (hasCause()) {
        if (!getCause()
            .equals(other.getCause())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasActor()) {
        hash = (37 * hash) + ACTOR_FIELD_NUMBER;
        hash = (53 * hash) + getActor().hashCode();
      }
      if (hasMessage()) {
        hash = (37 * hash) + MESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getMessage().hashCode();
      }
      if (hasCause()) {
        hash = (37 * hash) + CAUSE_FIELD_NUMBER;
        hash = (53 * hash) + getCause().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.pekko.remote.ContainerFormats.ActorInitializationException parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.ActorInitializationException parseFrom(
        java.nio.ByteBuffer data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.ActorInitializationException parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.ActorInitializationException parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.ActorInitializationException parseFrom(byte[] data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.ActorInitializationException parseFrom(
        byte[] data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.ActorInitializationException parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ContainerFormats.ActorInitializationException parseFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.pekko.remote.ContainerFormats.ActorInitializationException parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.pekko.remote.ContainerFormats.ActorInitializationException parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.ActorInitializationException parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ContainerFormats.ActorInitializationException parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.pekko.remote.ContainerFormats.ActorInitializationException prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.apache.pekko.protobufv3.internal.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ActorInitializationException}
     */
    public static final class Builder extends
        org.apache.pekko.protobufv3.internal.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:ActorInitializationException)
        org.apache.pekko.remote.ContainerFormats.ActorInitializationExceptionOrBuilder {
      public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_ActorInitializationException_descriptor;
      }

      @java.lang.Override
      protected org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_ActorInitializationException_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.pekko.remote.ContainerFormats.ActorInitializationException.class, org.apache.pekko.remote.ContainerFormats.ActorInitializationException.Builder.class);
      }

      // Construct using org.apache.pekko.remote.ContainerFormats.ActorInitializationException.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.pekko.protobufv3.internal.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.pekko.protobufv3.internal.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getActorFieldBuilder();
          getCauseFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        actor_ = null;
        if (actorBuilder_ != null) {
          actorBuilder_.dispose();
          actorBuilder_ = null;
        }
        message_ = "";
        cause_ = null;
        if (causeBuilder_ != null) {
          causeBuilder_.dispose();
          causeBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_ActorInitializationException_descriptor;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.ActorInitializationException getDefaultInstanceForType() {
        return org.apache.pekko.remote.ContainerFormats.ActorInitializationException.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.ActorInitializationException build() {
        org.apache.pekko.remote.ContainerFormats.ActorInitializationException result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.ActorInitializationException buildPartial() {
        org.apache.pekko.remote.ContainerFormats.ActorInitializationException result = new org.apache.pekko.remote.ContainerFormats.ActorInitializationException(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.pekko.remote.ContainerFormats.ActorInitializationException result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.actor_ = actorBuilder_ == null
              ? actor_
              : actorBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.message_ = message_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.cause_ = causeBuilder_ == null
              ? cause_
              : causeBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.apache.pekko.protobufv3.internal.Message other) {
        if (other instanceof org.apache.pekko.remote.ContainerFormats.ActorInitializationException) {
          return mergeFrom((org.apache.pekko.remote.ContainerFormats.ActorInitializationException)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.pekko.remote.ContainerFormats.ActorInitializationException other) {
        if (other == org.apache.pekko.remote.ContainerFormats.ActorInitializationException.getDefaultInstance()) return this;
        if (other.hasActor()) {
          mergeActor(other.getActor());
        }
        if (other.hasMessage()) {
          message_ = other.message_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.hasCause()) {
          mergeCause(other.getCause());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasMessage()) {
          return false;
        }
        if (!hasCause()) {
          return false;
        }
        if (hasActor()) {
          if (!getActor().isInitialized()) {
            return false;
          }
        }
        if (!getCause().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getActorFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                message_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getCauseFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.apache.pekko.remote.ContainerFormats.ActorRef actor_;
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilder<
          org.apache.pekko.remote.ContainerFormats.ActorRef, org.apache.pekko.remote.ContainerFormats.ActorRef.Builder, org.apache.pekko.remote.ContainerFormats.ActorRefOrBuilder> actorBuilder_;
      /**
       * <code>optional .ActorRef actor = 1;</code>
       * @return Whether the actor field is set.
       */
      public boolean hasActor() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional .ActorRef actor = 1;</code>
       * @return The actor.
       */
      public org.apache.pekko.remote.ContainerFormats.ActorRef getActor() {
        if (actorBuilder_ == null) {
          return actor_ == null ? org.apache.pekko.remote.ContainerFormats.ActorRef.getDefaultInstance() : actor_;
        } else {
          return actorBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .ActorRef actor = 1;</code>
       */
      public Builder setActor(org.apache.pekko.remote.ContainerFormats.ActorRef value) {
        if (actorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          actor_ = value;
        } else {
          actorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional .ActorRef actor = 1;</code>
       */
      public Builder setActor(
          org.apache.pekko.remote.ContainerFormats.ActorRef.Builder builderForValue) {
        if (actorBuilder_ == null) {
          actor_ = builderForValue.build();
        } else {
          actorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional .ActorRef actor = 1;</code>
       */
      public Builder mergeActor(org.apache.pekko.remote.ContainerFormats.ActorRef value) {
        if (actorBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            actor_ != null &&
            actor_ != org.apache.pekko.remote.ContainerFormats.ActorRef.getDefaultInstance()) {
            getActorBuilder().mergeFrom(value);
          } else {
            actor_ = value;
          }
        } else {
          actorBuilder_.mergeFrom(value);
        }
        if (actor_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional .ActorRef actor = 1;</code>
       */
      public Builder clearActor() {
        bitField0_ = (bitField0_ & ~0x00000001);
        actor_ = null;
        if (actorBuilder_ != null) {
          actorBuilder_.dispose();
          actorBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .ActorRef actor = 1;</code>
       */
      public org.apache.pekko.remote.ContainerFormats.ActorRef.Builder getActorBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getActorFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .ActorRef actor = 1;</code>
       */
      public org.apache.pekko.remote.ContainerFormats.ActorRefOrBuilder getActorOrBuilder() {
        if (actorBuilder_ != null) {
          return actorBuilder_.getMessageOrBuilder();
        } else {
          return actor_ == null ?
              org.apache.pekko.remote.ContainerFormats.ActorRef.getDefaultInstance() : actor_;
        }
      }
      /**
       * <code>optional .ActorRef actor = 1;</code>
       */
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilder<
          org.apache.pekko.remote.ContainerFormats.ActorRef, org.apache.pekko.remote.ContainerFormats.ActorRef.Builder, org.apache.pekko.remote.ContainerFormats.ActorRefOrBuilder> 
          getActorFieldBuilder() {
        if (actorBuilder_ == null) {
          actorBuilder_ = new org.apache.pekko.protobufv3.internal.SingleFieldBuilder<
              org.apache.pekko.remote.ContainerFormats.ActorRef, org.apache.pekko.remote.ContainerFormats.ActorRef.Builder, org.apache.pekko.remote.ContainerFormats.ActorRefOrBuilder>(
                  getActor(),
                  getParentForChildren(),
                  isClean());
          actor_ = null;
        }
        return actorBuilder_;
      }

      private java.lang.Object message_ = "";
      /**
       * <code>required string message = 2;</code>
       * @return Whether the message field is set.
       */
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>required string message = 2;</code>
       * @return The message.
       */
      public java.lang.String getMessage() {
        java.lang.Object ref = message_;
        if (!(ref instanceof java.lang.String)) {
          org.apache.pekko.protobufv3.internal.ByteString bs =
              (org.apache.pekko.protobufv3.internal.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            message_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string message = 2;</code>
       * @return The bytes for message.
       */
      public org.apache.pekko.protobufv3.internal.ByteString
          getMessageBytes() {
        java.lang.Object ref = message_;
        if (ref instanceof String) {
          org.apache.pekko.protobufv3.internal.ByteString b = 
              org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          message_ = b;
          return b;
        } else {
          return (org.apache.pekko.protobufv3.internal.ByteString) ref;
        }
      }
      /**
       * <code>required string message = 2;</code>
       * @param value The message to set.
       * @return This builder for chaining.
       */
      public Builder setMessage(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        message_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>required string message = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMessage() {
        message_ = getDefaultInstance().getMessage();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <code>required string message = 2;</code>
       * @param value The bytes for message to set.
       * @return This builder for chaining.
       */
      public Builder setMessageBytes(
          org.apache.pekko.protobufv3.internal.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        message_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private org.apache.pekko.remote.ContainerFormats.Payload cause_;
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilder<
          org.apache.pekko.remote.ContainerFormats.Payload, org.apache.pekko.remote.ContainerFormats.Payload.Builder, org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder> causeBuilder_;
      /**
       * <code>required .Payload cause = 3;</code>
       * @return Whether the cause field is set.
       */
      public boolean hasCause() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>required .Payload cause = 3;</code>
       * @return The cause.
       */
      public org.apache.pekko.remote.ContainerFormats.Payload getCause() {
        if (causeBuilder_ == null) {
          return cause_ == null ? org.apache.pekko.remote.ContainerFormats.Payload.getDefaultInstance() : cause_;
        } else {
          return causeBuilder_.getMessage();
        }
      }
      /**
       * <code>required .Payload cause = 3;</code>
       */
      public Builder setCause(org.apache.pekko.remote.ContainerFormats.Payload value) {
        if (causeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          cause_ = value;
        } else {
          causeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>required .Payload cause = 3;</code>
       */
      public Builder setCause(
          org.apache.pekko.remote.ContainerFormats.Payload.Builder builderForValue) {
        if (causeBuilder_ == null) {
          cause_ = builderForValue.build();
        } else {
          causeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>required .Payload cause = 3;</code>
       */
      public Builder mergeCause(org.apache.pekko.remote.ContainerFormats.Payload value) {
        if (causeBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            cause_ != null &&
            cause_ != org.apache.pekko.remote.ContainerFormats.Payload.getDefaultInstance()) {
            getCauseBuilder().mergeFrom(value);
          } else {
            cause_ = value;
          }
        } else {
          causeBuilder_.mergeFrom(value);
        }
        if (cause_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <code>required .Payload cause = 3;</code>
       */
      public Builder clearCause() {
        bitField0_ = (bitField0_ & ~0x00000004);
        cause_ = null;
        if (causeBuilder_ != null) {
          causeBuilder_.dispose();
          causeBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>required .Payload cause = 3;</code>
       */
      public org.apache.pekko.remote.ContainerFormats.Payload.Builder getCauseBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getCauseFieldBuilder().getBuilder();
      }
      /**
       * <code>required .Payload cause = 3;</code>
       */
      public org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder getCauseOrBuilder() {
        if (causeBuilder_ != null) {
          return causeBuilder_.getMessageOrBuilder();
        } else {
          return cause_ == null ?
              org.apache.pekko.remote.ContainerFormats.Payload.getDefaultInstance() : cause_;
        }
      }
      /**
       * <code>required .Payload cause = 3;</code>
       */
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilder<
          org.apache.pekko.remote.ContainerFormats.Payload, org.apache.pekko.remote.ContainerFormats.Payload.Builder, org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder> 
          getCauseFieldBuilder() {
        if (causeBuilder_ == null) {
          causeBuilder_ = new org.apache.pekko.protobufv3.internal.SingleFieldBuilder<
              org.apache.pekko.remote.ContainerFormats.Payload, org.apache.pekko.remote.ContainerFormats.Payload.Builder, org.apache.pekko.remote.ContainerFormats.PayloadOrBuilder>(
                  getCause(),
                  getParentForChildren(),
                  isClean());
          cause_ = null;
        }
        return causeBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:ActorInitializationException)
    }

    // @@protoc_insertion_point(class_scope:ActorInitializationException)
    private static final org.apache.pekko.remote.ContainerFormats.ActorInitializationException DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.pekko.remote.ContainerFormats.ActorInitializationException();
    }

    public static org.apache.pekko.remote.ContainerFormats.ActorInitializationException getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.pekko.protobufv3.internal.Parser<ActorInitializationException>
        PARSER = new org.apache.pekko.protobufv3.internal.AbstractParser<ActorInitializationException>() {
      @java.lang.Override
      public ActorInitializationException parsePartialFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.apache.pekko.protobufv3.internal.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.apache.pekko.protobufv3.internal.Parser<ActorInitializationException> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.Parser<ActorInitializationException> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.ActorInitializationException getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StackTraceElementOrBuilder extends
      // @@protoc_insertion_point(interface_extends:StackTraceElement)
      org.apache.pekko.protobufv3.internal.MessageOrBuilder {

    /**
     * <code>required string className = 1;</code>
     * @return Whether the className field is set.
     */
    boolean hasClassName();
    /**
     * <code>required string className = 1;</code>
     * @return The className.
     */
    java.lang.String getClassName();
    /**
     * <code>required string className = 1;</code>
     * @return The bytes for className.
     */
    org.apache.pekko.protobufv3.internal.ByteString
        getClassNameBytes();

    /**
     * <code>required string methodName = 2;</code>
     * @return Whether the methodName field is set.
     */
    boolean hasMethodName();
    /**
     * <code>required string methodName = 2;</code>
     * @return The methodName.
     */
    java.lang.String getMethodName();
    /**
     * <code>required string methodName = 2;</code>
     * @return The bytes for methodName.
     */
    org.apache.pekko.protobufv3.internal.ByteString
        getMethodNameBytes();

    /**
     * <code>required string fileName = 3;</code>
     * @return Whether the fileName field is set.
     */
    boolean hasFileName();
    /**
     * <code>required string fileName = 3;</code>
     * @return The fileName.
     */
    java.lang.String getFileName();
    /**
     * <code>required string fileName = 3;</code>
     * @return The bytes for fileName.
     */
    org.apache.pekko.protobufv3.internal.ByteString
        getFileNameBytes();

    /**
     * <code>required int32 lineNumber = 4;</code>
     * @return Whether the lineNumber field is set.
     */
    boolean hasLineNumber();
    /**
     * <code>required int32 lineNumber = 4;</code>
     * @return The lineNumber.
     */
    int getLineNumber();
  }
  /**
   * Protobuf type {@code StackTraceElement}
   */
  public static final class StackTraceElement extends
      org.apache.pekko.protobufv3.internal.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:StackTraceElement)
      StackTraceElementOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.apache.pekko.protobufv3.internal.RuntimeVersion.validateProtobufGencodeVersion(
        org.apache.pekko.protobufv3.internal.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        StackTraceElement.class.getName());
    }
    // Use StackTraceElement.newBuilder() to construct.
    private StackTraceElement(org.apache.pekko.protobufv3.internal.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private StackTraceElement() {
      className_ = "";
      methodName_ = "";
      fileName_ = "";
    }

    public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.pekko.remote.ContainerFormats.internal_static_StackTraceElement_descriptor;
    }

    @java.lang.Override
    protected org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.pekko.remote.ContainerFormats.internal_static_StackTraceElement_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.pekko.remote.ContainerFormats.StackTraceElement.class, org.apache.pekko.remote.ContainerFormats.StackTraceElement.Builder.class);
    }

    private int bitField0_;
    public static final int CLASSNAME_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object className_ = "";
    /**
     * <code>required string className = 1;</code>
     * @return Whether the className field is set.
     */
    @java.lang.Override
    public boolean hasClassName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required string className = 1;</code>
     * @return The className.
     */
    @java.lang.Override
    public java.lang.String getClassName() {
      java.lang.Object ref = className_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.apache.pekko.protobufv3.internal.ByteString bs = 
            (org.apache.pekko.protobufv3.internal.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          className_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string className = 1;</code>
     * @return The bytes for className.
     */
    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.ByteString
        getClassNameBytes() {
      java.lang.Object ref = className_;
      if (ref instanceof java.lang.String) {
        org.apache.pekko.protobufv3.internal.ByteString b = 
            org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        className_ = b;
        return b;
      } else {
        return (org.apache.pekko.protobufv3.internal.ByteString) ref;
      }
    }

    public static final int METHODNAME_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object methodName_ = "";
    /**
     * <code>required string methodName = 2;</code>
     * @return Whether the methodName field is set.
     */
    @java.lang.Override
    public boolean hasMethodName() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>required string methodName = 2;</code>
     * @return The methodName.
     */
    @java.lang.Override
    public java.lang.String getMethodName() {
      java.lang.Object ref = methodName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.apache.pekko.protobufv3.internal.ByteString bs = 
            (org.apache.pekko.protobufv3.internal.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          methodName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string methodName = 2;</code>
     * @return The bytes for methodName.
     */
    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.ByteString
        getMethodNameBytes() {
      java.lang.Object ref = methodName_;
      if (ref instanceof java.lang.String) {
        org.apache.pekko.protobufv3.internal.ByteString b = 
            org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        methodName_ = b;
        return b;
      } else {
        return (org.apache.pekko.protobufv3.internal.ByteString) ref;
      }
    }

    public static final int FILENAME_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object fileName_ = "";
    /**
     * <code>required string fileName = 3;</code>
     * @return Whether the fileName field is set.
     */
    @java.lang.Override
    public boolean hasFileName() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>required string fileName = 3;</code>
     * @return The fileName.
     */
    @java.lang.Override
    public java.lang.String getFileName() {
      java.lang.Object ref = fileName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.apache.pekko.protobufv3.internal.ByteString bs = 
            (org.apache.pekko.protobufv3.internal.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          fileName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string fileName = 3;</code>
     * @return The bytes for fileName.
     */
    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.ByteString
        getFileNameBytes() {
      java.lang.Object ref = fileName_;
      if (ref instanceof java.lang.String) {
        org.apache.pekko.protobufv3.internal.ByteString b = 
            org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        fileName_ = b;
        return b;
      } else {
        return (org.apache.pekko.protobufv3.internal.ByteString) ref;
      }
    }

    public static final int LINENUMBER_FIELD_NUMBER = 4;
    private int lineNumber_ = 0;
    /**
     * <code>required int32 lineNumber = 4;</code>
     * @return Whether the lineNumber field is set.
     */
    @java.lang.Override
    public boolean hasLineNumber() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>required int32 lineNumber = 4;</code>
     * @return The lineNumber.
     */
    @java.lang.Override
    public int getLineNumber() {
      return lineNumber_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasClassName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMethodName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFileName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLineNumber()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.apache.pekko.protobufv3.internal.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        org.apache.pekko.protobufv3.internal.GeneratedMessage.writeString(output, 1, className_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        org.apache.pekko.protobufv3.internal.GeneratedMessage.writeString(output, 2, methodName_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        org.apache.pekko.protobufv3.internal.GeneratedMessage.writeString(output, 3, fileName_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeInt32(4, lineNumber_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.apache.pekko.protobufv3.internal.GeneratedMessage.computeStringSize(1, className_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.apache.pekko.protobufv3.internal.GeneratedMessage.computeStringSize(2, methodName_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.apache.pekko.protobufv3.internal.GeneratedMessage.computeStringSize(3, fileName_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeInt32Size(4, lineNumber_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.pekko.remote.ContainerFormats.StackTraceElement)) {
        return super.equals(obj);
      }
      org.apache.pekko.remote.ContainerFormats.StackTraceElement other = (org.apache.pekko.remote.ContainerFormats.StackTraceElement) obj;

      if (hasClassName() != other.hasClassName()) return false;
      if (hasClassName()) {
        if (!getClassName()
            .equals(other.getClassName())) return false;
      }
      if (hasMethodName() != other.hasMethodName()) return false;
      if (hasMethodName()) {
        if (!getMethodName()
            .equals(other.getMethodName())) return false;
      }
      if (hasFileName() != other.hasFileName()) return false;
      if (hasFileName()) {
        if (!getFileName()
            .equals(other.getFileName())) return false;
      }
      if (hasLineNumber() != other.hasLineNumber()) return false;
      if (hasLineNumber()) {
        if (getLineNumber()
            != other.getLineNumber()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasClassName()) {
        hash = (37 * hash) + CLASSNAME_FIELD_NUMBER;
        hash = (53 * hash) + getClassName().hashCode();
      }
      if (hasMethodName()) {
        hash = (37 * hash) + METHODNAME_FIELD_NUMBER;
        hash = (53 * hash) + getMethodName().hashCode();
      }
      if (hasFileName()) {
        hash = (37 * hash) + FILENAME_FIELD_NUMBER;
        hash = (53 * hash) + getFileName().hashCode();
      }
      if (hasLineNumber()) {
        hash = (37 * hash) + LINENUMBER_FIELD_NUMBER;
        hash = (53 * hash) + getLineNumber();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.pekko.remote.ContainerFormats.StackTraceElement parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.StackTraceElement parseFrom(
        java.nio.ByteBuffer data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.StackTraceElement parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.StackTraceElement parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.StackTraceElement parseFrom(byte[] data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.StackTraceElement parseFrom(
        byte[] data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.StackTraceElement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ContainerFormats.StackTraceElement parseFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.pekko.remote.ContainerFormats.StackTraceElement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.pekko.remote.ContainerFormats.StackTraceElement parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.StackTraceElement parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ContainerFormats.StackTraceElement parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.pekko.remote.ContainerFormats.StackTraceElement prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.apache.pekko.protobufv3.internal.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code StackTraceElement}
     */
    public static final class Builder extends
        org.apache.pekko.protobufv3.internal.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:StackTraceElement)
        org.apache.pekko.remote.ContainerFormats.StackTraceElementOrBuilder {
      public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_StackTraceElement_descriptor;
      }

      @java.lang.Override
      protected org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_StackTraceElement_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.pekko.remote.ContainerFormats.StackTraceElement.class, org.apache.pekko.remote.ContainerFormats.StackTraceElement.Builder.class);
      }

      // Construct using org.apache.pekko.remote.ContainerFormats.StackTraceElement.newBuilder()
      private Builder() {

      }

      private Builder(
          org.apache.pekko.protobufv3.internal.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        className_ = "";
        methodName_ = "";
        fileName_ = "";
        lineNumber_ = 0;
        return this;
      }

      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_StackTraceElement_descriptor;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.StackTraceElement getDefaultInstanceForType() {
        return org.apache.pekko.remote.ContainerFormats.StackTraceElement.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.StackTraceElement build() {
        org.apache.pekko.remote.ContainerFormats.StackTraceElement result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.StackTraceElement buildPartial() {
        org.apache.pekko.remote.ContainerFormats.StackTraceElement result = new org.apache.pekko.remote.ContainerFormats.StackTraceElement(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.pekko.remote.ContainerFormats.StackTraceElement result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.className_ = className_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.methodName_ = methodName_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.fileName_ = fileName_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.lineNumber_ = lineNumber_;
          to_bitField0_ |= 0x00000008;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.apache.pekko.protobufv3.internal.Message other) {
        if (other instanceof org.apache.pekko.remote.ContainerFormats.StackTraceElement) {
          return mergeFrom((org.apache.pekko.remote.ContainerFormats.StackTraceElement)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.pekko.remote.ContainerFormats.StackTraceElement other) {
        if (other == org.apache.pekko.remote.ContainerFormats.StackTraceElement.getDefaultInstance()) return this;
        if (other.hasClassName()) {
          className_ = other.className_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasMethodName()) {
          methodName_ = other.methodName_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.hasFileName()) {
          fileName_ = other.fileName_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        if (other.hasLineNumber()) {
          setLineNumber(other.getLineNumber());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasClassName()) {
          return false;
        }
        if (!hasMethodName()) {
          return false;
        }
        if (!hasFileName()) {
          return false;
        }
        if (!hasLineNumber()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                className_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                methodName_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                fileName_ = input.readBytes();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 32: {
                lineNumber_ = input.readInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object className_ = "";
      /**
       * <code>required string className = 1;</code>
       * @return Whether the className field is set.
       */
      public boolean hasClassName() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required string className = 1;</code>
       * @return The className.
       */
      public java.lang.String getClassName() {
        java.lang.Object ref = className_;
        if (!(ref instanceof java.lang.String)) {
          org.apache.pekko.protobufv3.internal.ByteString bs =
              (org.apache.pekko.protobufv3.internal.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            className_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string className = 1;</code>
       * @return The bytes for className.
       */
      public org.apache.pekko.protobufv3.internal.ByteString
          getClassNameBytes() {
        java.lang.Object ref = className_;
        if (ref instanceof String) {
          org.apache.pekko.protobufv3.internal.ByteString b = 
              org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          className_ = b;
          return b;
        } else {
          return (org.apache.pekko.protobufv3.internal.ByteString) ref;
        }
      }
      /**
       * <code>required string className = 1;</code>
       * @param value The className to set.
       * @return This builder for chaining.
       */
      public Builder setClassName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        className_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required string className = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearClassName() {
        className_ = getDefaultInstance().getClassName();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>required string className = 1;</code>
       * @param value The bytes for className to set.
       * @return This builder for chaining.
       */
      public Builder setClassNameBytes(
          org.apache.pekko.protobufv3.internal.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        className_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.lang.Object methodName_ = "";
      /**
       * <code>required string methodName = 2;</code>
       * @return Whether the methodName field is set.
       */
      public boolean hasMethodName() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>required string methodName = 2;</code>
       * @return The methodName.
       */
      public java.lang.String getMethodName() {
        java.lang.Object ref = methodName_;
        if (!(ref instanceof java.lang.String)) {
          org.apache.pekko.protobufv3.internal.ByteString bs =
              (org.apache.pekko.protobufv3.internal.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            methodName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string methodName = 2;</code>
       * @return The bytes for methodName.
       */
      public org.apache.pekko.protobufv3.internal.ByteString
          getMethodNameBytes() {
        java.lang.Object ref = methodName_;
        if (ref instanceof String) {
          org.apache.pekko.protobufv3.internal.ByteString b = 
              org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          methodName_ = b;
          return b;
        } else {
          return (org.apache.pekko.protobufv3.internal.ByteString) ref;
        }
      }
      /**
       * <code>required string methodName = 2;</code>
       * @param value The methodName to set.
       * @return This builder for chaining.
       */
      public Builder setMethodName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        methodName_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>required string methodName = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMethodName() {
        methodName_ = getDefaultInstance().getMethodName();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <code>required string methodName = 2;</code>
       * @param value The bytes for methodName to set.
       * @return This builder for chaining.
       */
      public Builder setMethodNameBytes(
          org.apache.pekko.protobufv3.internal.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        methodName_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private java.lang.Object fileName_ = "";
      /**
       * <code>required string fileName = 3;</code>
       * @return Whether the fileName field is set.
       */
      public boolean hasFileName() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>required string fileName = 3;</code>
       * @return The fileName.
       */
      public java.lang.String getFileName() {
        java.lang.Object ref = fileName_;
        if (!(ref instanceof java.lang.String)) {
          org.apache.pekko.protobufv3.internal.ByteString bs =
              (org.apache.pekko.protobufv3.internal.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            fileName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string fileName = 3;</code>
       * @return The bytes for fileName.
       */
      public org.apache.pekko.protobufv3.internal.ByteString
          getFileNameBytes() {
        java.lang.Object ref = fileName_;
        if (ref instanceof String) {
          org.apache.pekko.protobufv3.internal.ByteString b = 
              org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          fileName_ = b;
          return b;
        } else {
          return (org.apache.pekko.protobufv3.internal.ByteString) ref;
        }
      }
      /**
       * <code>required string fileName = 3;</code>
       * @param value The fileName to set.
       * @return This builder for chaining.
       */
      public Builder setFileName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        fileName_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>required string fileName = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearFileName() {
        fileName_ = getDefaultInstance().getFileName();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <code>required string fileName = 3;</code>
       * @param value The bytes for fileName to set.
       * @return This builder for chaining.
       */
      public Builder setFileNameBytes(
          org.apache.pekko.protobufv3.internal.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        fileName_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private int lineNumber_ ;
      /**
       * <code>required int32 lineNumber = 4;</code>
       * @return Whether the lineNumber field is set.
       */
      @java.lang.Override
      public boolean hasLineNumber() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>required int32 lineNumber = 4;</code>
       * @return The lineNumber.
       */
      @java.lang.Override
      public int getLineNumber() {
        return lineNumber_;
      }
      /**
       * <code>required int32 lineNumber = 4;</code>
       * @param value The lineNumber to set.
       * @return This builder for chaining.
       */
      public Builder setLineNumber(int value) {

        lineNumber_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 lineNumber = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearLineNumber() {
        bitField0_ = (bitField0_ & ~0x00000008);
        lineNumber_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:StackTraceElement)
    }

    // @@protoc_insertion_point(class_scope:StackTraceElement)
    private static final org.apache.pekko.remote.ContainerFormats.StackTraceElement DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.pekko.remote.ContainerFormats.StackTraceElement();
    }

    public static org.apache.pekko.remote.ContainerFormats.StackTraceElement getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.pekko.protobufv3.internal.Parser<StackTraceElement>
        PARSER = new org.apache.pekko.protobufv3.internal.AbstractParser<StackTraceElement>() {
      @java.lang.Override
      public StackTraceElement parsePartialFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.apache.pekko.protobufv3.internal.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.apache.pekko.protobufv3.internal.Parser<StackTraceElement> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.Parser<StackTraceElement> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.StackTraceElement getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StatusReplyErrorMessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:StatusReplyErrorMessage)
      org.apache.pekko.protobufv3.internal.MessageOrBuilder {

    /**
     * <code>required string errorMessage = 1;</code>
     * @return Whether the errorMessage field is set.
     */
    boolean hasErrorMessage();
    /**
     * <code>required string errorMessage = 1;</code>
     * @return The errorMessage.
     */
    java.lang.String getErrorMessage();
    /**
     * <code>required string errorMessage = 1;</code>
     * @return The bytes for errorMessage.
     */
    org.apache.pekko.protobufv3.internal.ByteString
        getErrorMessageBytes();
  }
  /**
   * <pre>
   * ReplyWith pattern message(s)
   * </pre>
   *
   * Protobuf type {@code StatusReplyErrorMessage}
   */
  public static final class StatusReplyErrorMessage extends
      org.apache.pekko.protobufv3.internal.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:StatusReplyErrorMessage)
      StatusReplyErrorMessageOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.apache.pekko.protobufv3.internal.RuntimeVersion.validateProtobufGencodeVersion(
        org.apache.pekko.protobufv3.internal.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        StatusReplyErrorMessage.class.getName());
    }
    // Use StatusReplyErrorMessage.newBuilder() to construct.
    private StatusReplyErrorMessage(org.apache.pekko.protobufv3.internal.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private StatusReplyErrorMessage() {
      errorMessage_ = "";
    }

    public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.pekko.remote.ContainerFormats.internal_static_StatusReplyErrorMessage_descriptor;
    }

    @java.lang.Override
    protected org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.pekko.remote.ContainerFormats.internal_static_StatusReplyErrorMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage.class, org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage.Builder.class);
    }

    private int bitField0_;
    public static final int ERRORMESSAGE_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object errorMessage_ = "";
    /**
     * <code>required string errorMessage = 1;</code>
     * @return Whether the errorMessage field is set.
     */
    @java.lang.Override
    public boolean hasErrorMessage() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required string errorMessage = 1;</code>
     * @return The errorMessage.
     */
    @java.lang.Override
    public java.lang.String getErrorMessage() {
      java.lang.Object ref = errorMessage_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.apache.pekko.protobufv3.internal.ByteString bs = 
            (org.apache.pekko.protobufv3.internal.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          errorMessage_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string errorMessage = 1;</code>
     * @return The bytes for errorMessage.
     */
    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.ByteString
        getErrorMessageBytes() {
      java.lang.Object ref = errorMessage_;
      if (ref instanceof java.lang.String) {
        org.apache.pekko.protobufv3.internal.ByteString b = 
            org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        errorMessage_ = b;
        return b;
      } else {
        return (org.apache.pekko.protobufv3.internal.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasErrorMessage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.apache.pekko.protobufv3.internal.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        org.apache.pekko.protobufv3.internal.GeneratedMessage.writeString(output, 1, errorMessage_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.apache.pekko.protobufv3.internal.GeneratedMessage.computeStringSize(1, errorMessage_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage)) {
        return super.equals(obj);
      }
      org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage other = (org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage) obj;

      if (hasErrorMessage() != other.hasErrorMessage()) return false;
      if (hasErrorMessage()) {
        if (!getErrorMessage()
            .equals(other.getErrorMessage())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasErrorMessage()) {
        hash = (37 * hash) + ERRORMESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getErrorMessage().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage parseFrom(
        java.nio.ByteBuffer data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage parseFrom(byte[] data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage parseFrom(
        byte[] data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage parseFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.apache.pekko.protobufv3.internal.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * ReplyWith pattern message(s)
     * </pre>
     *
     * Protobuf type {@code StatusReplyErrorMessage}
     */
    public static final class Builder extends
        org.apache.pekko.protobufv3.internal.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:StatusReplyErrorMessage)
        org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessageOrBuilder {
      public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_StatusReplyErrorMessage_descriptor;
      }

      @java.lang.Override
      protected org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_StatusReplyErrorMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage.class, org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage.Builder.class);
      }

      // Construct using org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage.newBuilder()
      private Builder() {

      }

      private Builder(
          org.apache.pekko.protobufv3.internal.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        errorMessage_ = "";
        return this;
      }

      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.pekko.remote.ContainerFormats.internal_static_StatusReplyErrorMessage_descriptor;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage getDefaultInstanceForType() {
        return org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage build() {
        org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage buildPartial() {
        org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage result = new org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.errorMessage_ = errorMessage_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.apache.pekko.protobufv3.internal.Message other) {
        if (other instanceof org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage) {
          return mergeFrom((org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage other) {
        if (other == org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage.getDefaultInstance()) return this;
        if (other.hasErrorMessage()) {
          errorMessage_ = other.errorMessage_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasErrorMessage()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                errorMessage_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object errorMessage_ = "";
      /**
       * <code>required string errorMessage = 1;</code>
       * @return Whether the errorMessage field is set.
       */
      public boolean hasErrorMessage() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required string errorMessage = 1;</code>
       * @return The errorMessage.
       */
      public java.lang.String getErrorMessage() {
        java.lang.Object ref = errorMessage_;
        if (!(ref instanceof java.lang.String)) {
          org.apache.pekko.protobufv3.internal.ByteString bs =
              (org.apache.pekko.protobufv3.internal.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            errorMessage_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string errorMessage = 1;</code>
       * @return The bytes for errorMessage.
       */
      public org.apache.pekko.protobufv3.internal.ByteString
          getErrorMessageBytes() {
        java.lang.Object ref = errorMessage_;
        if (ref instanceof String) {
          org.apache.pekko.protobufv3.internal.ByteString b = 
              org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          errorMessage_ = b;
          return b;
        } else {
          return (org.apache.pekko.protobufv3.internal.ByteString) ref;
        }
      }
      /**
       * <code>required string errorMessage = 1;</code>
       * @param value The errorMessage to set.
       * @return This builder for chaining.
       */
      public Builder setErrorMessage(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        errorMessage_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required string errorMessage = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearErrorMessage() {
        errorMessage_ = getDefaultInstance().getErrorMessage();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>required string errorMessage = 1;</code>
       * @param value The bytes for errorMessage to set.
       * @return This builder for chaining.
       */
      public Builder setErrorMessageBytes(
          org.apache.pekko.protobufv3.internal.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        errorMessage_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:StatusReplyErrorMessage)
    }

    // @@protoc_insertion_point(class_scope:StatusReplyErrorMessage)
    private static final org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage();
    }

    public static org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.pekko.protobufv3.internal.Parser<StatusReplyErrorMessage>
        PARSER = new org.apache.pekko.protobufv3.internal.AbstractParser<StatusReplyErrorMessage>() {
      @java.lang.Override
      public StatusReplyErrorMessage parsePartialFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.apache.pekko.protobufv3.internal.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.apache.pekko.protobufv3.internal.Parser<StatusReplyErrorMessage> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.Parser<StatusReplyErrorMessage> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.remote.ContainerFormats.StatusReplyErrorMessage getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
    internal_static_SelectionEnvelope_descriptor;
  private static final 
    org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
      internal_static_SelectionEnvelope_fieldAccessorTable;
  private static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
    internal_static_Selection_descriptor;
  private static final 
    org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
      internal_static_Selection_fieldAccessorTable;
  private static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
    internal_static_Identify_descriptor;
  private static final 
    org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
      internal_static_Identify_fieldAccessorTable;
  private static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
    internal_static_ActorIdentity_descriptor;
  private static final 
    org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
      internal_static_ActorIdentity_fieldAccessorTable;
  private static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
    internal_static_ActorRef_descriptor;
  private static final 
    org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
      internal_static_ActorRef_fieldAccessorTable;
  private static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
    internal_static_Option_descriptor;
  private static final 
    org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
      internal_static_Option_fieldAccessorTable;
  private static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
    internal_static_Payload_descriptor;
  private static final 
    org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
      internal_static_Payload_fieldAccessorTable;
  private static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
    internal_static_WatcherHeartbeatResponse_descriptor;
  private static final 
    org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
      internal_static_WatcherHeartbeatResponse_fieldAccessorTable;
  private static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
    internal_static_Throwable_descriptor;
  private static final 
    org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
      internal_static_Throwable_fieldAccessorTable;
  private static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
    internal_static_ThrowableNotSerializable_descriptor;
  private static final 
    org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
      internal_static_ThrowableNotSerializable_fieldAccessorTable;
  private static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
    internal_static_ActorInitializationException_descriptor;
  private static final 
    org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
      internal_static_ActorInitializationException_fieldAccessorTable;
  private static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
    internal_static_StackTraceElement_descriptor;
  private static final 
    org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
      internal_static_StackTraceElement_fieldAccessorTable;
  private static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
    internal_static_StatusReplyErrorMessage_descriptor;
  private static final 
    org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable
      internal_static_StatusReplyErrorMessage_fieldAccessorTable;

  public static org.apache.pekko.protobufv3.internal.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  org.apache.pekko.protobufv3.internal.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\026ContainerFormats.proto\"\220\001\n\021SelectionEn" +
      "velope\022\027\n\017enclosedMessage\030\001 \002(\014\022\024\n\014seria" +
      "lizerId\030\002 \002(\005\022\033\n\007pattern\030\003 \003(\0132\n.Selecti" +
      "on\022\027\n\017messageManifest\030\004 \001(\014\022\026\n\016wildcardF" +
      "anOut\030\005 \001(\010\"8\n\tSelection\022\032\n\004type\030\001 \002(\0162\014" +
      ".PatternType\022\017\n\007matcher\030\002 \001(\t\"\'\n\010Identif" +
      "y\022\033\n\tmessageId\030\001 \002(\0132\010.Payload\"H\n\rActorI" +
      "dentity\022\037\n\rcorrelationId\030\001 \002(\0132\010.Payload" +
      "\022\026\n\003ref\030\002 \001(\0132\t.ActorRef\"\030\n\010ActorRef\022\014\n\004" +
      "path\030\001 \002(\t\"!\n\006Option\022\027\n\005value\030\001 \001(\0132\010.Pa" +
      "yload\"Q\n\007Payload\022\027\n\017enclosedMessage\030\001 \002(" +
      "\014\022\024\n\014serializerId\030\002 \002(\005\022\027\n\017messageManife" +
      "st\030\004 \001(\014\"\'\n\030WatcherHeartbeatResponse\022\013\n\003" +
      "uid\030\001 \002(\004\"p\n\tThrowable\022\021\n\tclassName\030\001 \002(" +
      "\t\022\017\n\007message\030\002 \001(\t\022\027\n\005cause\030\003 \001(\0132\010.Payl" +
      "oad\022&\n\nstackTrace\030\004 \003(\0132\022.StackTraceElem" +
      "ent\"_\n\030ThrowableNotSerializable\022\017\n\007messa" +
      "ge\030\001 \002(\t\022\027\n\017originalMessage\030\002 \002(\t\022\031\n\021ori" +
      "ginalClassName\030\003 \002(\t\"b\n\034ActorInitializat" +
      "ionException\022\030\n\005actor\030\001 \001(\0132\t.ActorRef\022\017" +
      "\n\007message\030\002 \002(\t\022\027\n\005cause\030\003 \002(\0132\010.Payload" +
      "\"`\n\021StackTraceElement\022\021\n\tclassName\030\001 \002(\t" +
      "\022\022\n\nmethodName\030\002 \002(\t\022\020\n\010fileName\030\003 \002(\t\022\022" +
      "\n\nlineNumber\030\004 \002(\005\"/\n\027StatusReplyErrorMe" +
      "ssage\022\024\n\014errorMessage\030\001 \002(\t*<\n\013PatternTy" +
      "pe\022\n\n\006PARENT\020\000\022\016\n\nCHILD_NAME\020\001\022\021\n\rCHILD_" +
      "PATTERN\020\002B\033\n\027org.apache.pekko.remoteH\001"
    };
    descriptor = org.apache.pekko.protobufv3.internal.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new org.apache.pekko.protobufv3.internal.Descriptors.FileDescriptor[] {
        });
    internal_static_SelectionEnvelope_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_SelectionEnvelope_fieldAccessorTable = new
      org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable(
        internal_static_SelectionEnvelope_descriptor,
        new java.lang.String[] { "EnclosedMessage", "SerializerId", "Pattern", "MessageManifest", "WildcardFanOut", });
    internal_static_Selection_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_Selection_fieldAccessorTable = new
      org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable(
        internal_static_Selection_descriptor,
        new java.lang.String[] { "Type", "Matcher", });
    internal_static_Identify_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_Identify_fieldAccessorTable = new
      org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable(
        internal_static_Identify_descriptor,
        new java.lang.String[] { "MessageId", });
    internal_static_ActorIdentity_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_ActorIdentity_fieldAccessorTable = new
      org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable(
        internal_static_ActorIdentity_descriptor,
        new java.lang.String[] { "CorrelationId", "Ref", });
    internal_static_ActorRef_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_ActorRef_fieldAccessorTable = new
      org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable(
        internal_static_ActorRef_descriptor,
        new java.lang.String[] { "Path", });
    internal_static_Option_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_Option_fieldAccessorTable = new
      org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable(
        internal_static_Option_descriptor,
        new java.lang.String[] { "Value", });
    internal_static_Payload_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_Payload_fieldAccessorTable = new
      org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable(
        internal_static_Payload_descriptor,
        new java.lang.String[] { "EnclosedMessage", "SerializerId", "MessageManifest", });
    internal_static_WatcherHeartbeatResponse_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_WatcherHeartbeatResponse_fieldAccessorTable = new
      org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable(
        internal_static_WatcherHeartbeatResponse_descriptor,
        new java.lang.String[] { "Uid", });
    internal_static_Throwable_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_Throwable_fieldAccessorTable = new
      org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable(
        internal_static_Throwable_descriptor,
        new java.lang.String[] { "ClassName", "Message", "Cause", "StackTrace", });
    internal_static_ThrowableNotSerializable_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_ThrowableNotSerializable_fieldAccessorTable = new
      org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable(
        internal_static_ThrowableNotSerializable_descriptor,
        new java.lang.String[] { "Message", "OriginalMessage", "OriginalClassName", });
    internal_static_ActorInitializationException_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_ActorInitializationException_fieldAccessorTable = new
      org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable(
        internal_static_ActorInitializationException_descriptor,
        new java.lang.String[] { "Actor", "Message", "Cause", });
    internal_static_StackTraceElement_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_StackTraceElement_fieldAccessorTable = new
      org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable(
        internal_static_StackTraceElement_descriptor,
        new java.lang.String[] { "ClassName", "MethodName", "FileName", "LineNumber", });
    internal_static_StatusReplyErrorMessage_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_StatusReplyErrorMessage_fieldAccessorTable = new
      org.apache.pekko.protobufv3.internal.GeneratedMessage.FieldAccessorTable(
        internal_static_StatusReplyErrorMessage_descriptor,
        new java.lang.String[] { "ErrorMessage", });
    descriptor.resolveAllFeaturesImmutable();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
