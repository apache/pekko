/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * license agreements; and to You under the Apache License, version 2.0:
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * This file is part of the Apache Pekko project, which was derived from Akka.
 */

/*
 * Copyright (C) 2019-2022 Lightbend Inc. <https://www.lightbend.com>
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ArteryControlFormats.proto

// Protobuf Java Version: 3.25.6
package org.apache.pekko.remote;

public final class ArteryControlFormats {
  private ArteryControlFormats() {}
  public static void registerAllExtensions(
      org.apache.pekko.protobufv3.internal.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      org.apache.pekko.protobufv3.internal.ExtensionRegistry registry) {
    registerAllExtensions(
        (org.apache.pekko.protobufv3.internal.ExtensionRegistryLite) registry);
  }
  public interface QuarantinedOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Quarantined)
      org.apache.pekko.protobufv3.internal.MessageOrBuilder {

    /**
     * <code>required .UniqueAddress from = 1;</code>
     * @return Whether the from field is set.
     */
    boolean hasFrom();
    /**
     * <code>required .UniqueAddress from = 1;</code>
     * @return The from.
     */
    org.apache.pekko.remote.ArteryControlFormats.UniqueAddress getFrom();
    /**
     * <code>required .UniqueAddress from = 1;</code>
     */
    org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder getFromOrBuilder();

    /**
     * <code>required .UniqueAddress to = 2;</code>
     * @return Whether the to field is set.
     */
    boolean hasTo();
    /**
     * <code>required .UniqueAddress to = 2;</code>
     * @return The to.
     */
    org.apache.pekko.remote.ArteryControlFormats.UniqueAddress getTo();
    /**
     * <code>required .UniqueAddress to = 2;</code>
     */
    org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder getToOrBuilder();
  }
  /**
   * Protobuf type {@code Quarantined}
   */
  public static final class Quarantined extends
      org.apache.pekko.protobufv3.internal.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Quarantined)
      QuarantinedOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Quarantined.newBuilder() to construct.
    private Quarantined(org.apache.pekko.protobufv3.internal.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Quarantined() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.UnusedPrivateParameter unused) {
      return new Quarantined();
    }

    public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.pekko.remote.ArteryControlFormats.internal_static_Quarantined_descriptor;
    }

    @java.lang.Override
    protected org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.pekko.remote.ArteryControlFormats.internal_static_Quarantined_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.pekko.remote.ArteryControlFormats.Quarantined.class, org.apache.pekko.remote.ArteryControlFormats.Quarantined.Builder.class);
    }

    private int bitField0_;
    public static final int FROM_FIELD_NUMBER = 1;
    private org.apache.pekko.remote.ArteryControlFormats.UniqueAddress from_;
    /**
     * <code>required .UniqueAddress from = 1;</code>
     * @return Whether the from field is set.
     */
    @java.lang.Override
    public boolean hasFrom() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required .UniqueAddress from = 1;</code>
     * @return The from.
     */
    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress getFrom() {
      return from_ == null ? org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : from_;
    }
    /**
     * <code>required .UniqueAddress from = 1;</code>
     */
    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder getFromOrBuilder() {
      return from_ == null ? org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : from_;
    }

    public static final int TO_FIELD_NUMBER = 2;
    private org.apache.pekko.remote.ArteryControlFormats.UniqueAddress to_;
    /**
     * <code>required .UniqueAddress to = 2;</code>
     * @return Whether the to field is set.
     */
    @java.lang.Override
    public boolean hasTo() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>required .UniqueAddress to = 2;</code>
     * @return The to.
     */
    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress getTo() {
      return to_ == null ? org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : to_;
    }
    /**
     * <code>required .UniqueAddress to = 2;</code>
     */
    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder getToOrBuilder() {
      return to_ == null ? org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : to_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasFrom()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTo()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getFrom().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getTo().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.apache.pekko.protobufv3.internal.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getFrom());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getTo());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeMessageSize(1, getFrom());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeMessageSize(2, getTo());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.pekko.remote.ArteryControlFormats.Quarantined)) {
        return super.equals(obj);
      }
      org.apache.pekko.remote.ArteryControlFormats.Quarantined other = (org.apache.pekko.remote.ArteryControlFormats.Quarantined) obj;

      if (hasFrom() != other.hasFrom()) return false;
      if (hasFrom()) {
        if (!getFrom()
            .equals(other.getFrom())) return false;
      }
      if (hasTo() != other.hasTo()) return false;
      if (hasTo()) {
        if (!getTo()
            .equals(other.getTo())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFrom()) {
        hash = (37 * hash) + FROM_FIELD_NUMBER;
        hash = (53 * hash) + getFrom().hashCode();
      }
      if (hasTo()) {
        hash = (37 * hash) + TO_FIELD_NUMBER;
        hash = (53 * hash) + getTo().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.pekko.remote.ArteryControlFormats.Quarantined parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.Quarantined parseFrom(
        java.nio.ByteBuffer data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.Quarantined parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.Quarantined parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.Quarantined parseFrom(byte[] data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.Quarantined parseFrom(
        byte[] data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.Quarantined parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.Quarantined parseFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.pekko.remote.ArteryControlFormats.Quarantined parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.pekko.remote.ArteryControlFormats.Quarantined parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.Quarantined parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.Quarantined parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.pekko.remote.ArteryControlFormats.Quarantined prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Quarantined}
     */
    public static final class Builder extends
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Quarantined)
        org.apache.pekko.remote.ArteryControlFormats.QuarantinedOrBuilder {
      public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_Quarantined_descriptor;
      }

      @java.lang.Override
      protected org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_Quarantined_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.pekko.remote.ArteryControlFormats.Quarantined.class, org.apache.pekko.remote.ArteryControlFormats.Quarantined.Builder.class);
      }

      // Construct using org.apache.pekko.remote.ArteryControlFormats.Quarantined.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.pekko.protobufv3.internal.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.pekko.protobufv3.internal.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getFromFieldBuilder();
          getToFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        from_ = null;
        if (fromBuilder_ != null) {
          fromBuilder_.dispose();
          fromBuilder_ = null;
        }
        to_ = null;
        if (toBuilder_ != null) {
          toBuilder_.dispose();
          toBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_Quarantined_descriptor;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.Quarantined getDefaultInstanceForType() {
        return org.apache.pekko.remote.ArteryControlFormats.Quarantined.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.Quarantined build() {
        org.apache.pekko.remote.ArteryControlFormats.Quarantined result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.Quarantined buildPartial() {
        org.apache.pekko.remote.ArteryControlFormats.Quarantined result = new org.apache.pekko.remote.ArteryControlFormats.Quarantined(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.pekko.remote.ArteryControlFormats.Quarantined result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.from_ = fromBuilder_ == null
              ? from_
              : fromBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.to_ = toBuilder_ == null
              ? to_
              : toBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          org.apache.pekko.protobufv3.internal.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(org.apache.pekko.protobufv3.internal.Message other) {
        if (other instanceof org.apache.pekko.remote.ArteryControlFormats.Quarantined) {
          return mergeFrom((org.apache.pekko.remote.ArteryControlFormats.Quarantined)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.pekko.remote.ArteryControlFormats.Quarantined other) {
        if (other == org.apache.pekko.remote.ArteryControlFormats.Quarantined.getDefaultInstance()) return this;
        if (other.hasFrom()) {
          mergeFrom(other.getFrom());
        }
        if (other.hasTo()) {
          mergeTo(other.getTo());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasFrom()) {
          return false;
        }
        if (!hasTo()) {
          return false;
        }
        if (!getFrom().isInitialized()) {
          return false;
        }
        if (!getTo().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getFromFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getToFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.apache.pekko.remote.ArteryControlFormats.UniqueAddress from_;
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
          org.apache.pekko.remote.ArteryControlFormats.UniqueAddress, org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder, org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder> fromBuilder_;
      /**
       * <code>required .UniqueAddress from = 1;</code>
       * @return Whether the from field is set.
       */
      public boolean hasFrom() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       * @return The from.
       */
      public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress getFrom() {
        if (fromBuilder_ == null) {
          return from_ == null ? org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : from_;
        } else {
          return fromBuilder_.getMessage();
        }
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      public Builder setFrom(org.apache.pekko.remote.ArteryControlFormats.UniqueAddress value) {
        if (fromBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          from_ = value;
        } else {
          fromBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      public Builder setFrom(
          org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder builderForValue) {
        if (fromBuilder_ == null) {
          from_ = builderForValue.build();
        } else {
          fromBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      public Builder mergeFrom(org.apache.pekko.remote.ArteryControlFormats.UniqueAddress value) {
        if (fromBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            from_ != null &&
            from_ != org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance()) {
            getFromBuilder().mergeFrom(value);
          } else {
            from_ = value;
          }
        } else {
          fromBuilder_.mergeFrom(value);
        }
        if (from_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      public Builder clearFrom() {
        bitField0_ = (bitField0_ & ~0x00000001);
        from_ = null;
        if (fromBuilder_ != null) {
          fromBuilder_.dispose();
          fromBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder getFromBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getFromFieldBuilder().getBuilder();
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      public org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder getFromOrBuilder() {
        if (fromBuilder_ != null) {
          return fromBuilder_.getMessageOrBuilder();
        } else {
          return from_ == null ?
              org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : from_;
        }
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
          org.apache.pekko.remote.ArteryControlFormats.UniqueAddress, org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder, org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder> 
          getFromFieldBuilder() {
        if (fromBuilder_ == null) {
          fromBuilder_ = new org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
              org.apache.pekko.remote.ArteryControlFormats.UniqueAddress, org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder, org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder>(
                  getFrom(),
                  getParentForChildren(),
                  isClean());
          from_ = null;
        }
        return fromBuilder_;
      }

      private org.apache.pekko.remote.ArteryControlFormats.UniqueAddress to_;
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
          org.apache.pekko.remote.ArteryControlFormats.UniqueAddress, org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder, org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder> toBuilder_;
      /**
       * <code>required .UniqueAddress to = 2;</code>
       * @return Whether the to field is set.
       */
      public boolean hasTo() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>required .UniqueAddress to = 2;</code>
       * @return The to.
       */
      public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress getTo() {
        if (toBuilder_ == null) {
          return to_ == null ? org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : to_;
        } else {
          return toBuilder_.getMessage();
        }
      }
      /**
       * <code>required .UniqueAddress to = 2;</code>
       */
      public Builder setTo(org.apache.pekko.remote.ArteryControlFormats.UniqueAddress value) {
        if (toBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          to_ = value;
        } else {
          toBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>required .UniqueAddress to = 2;</code>
       */
      public Builder setTo(
          org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder builderForValue) {
        if (toBuilder_ == null) {
          to_ = builderForValue.build();
        } else {
          toBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>required .UniqueAddress to = 2;</code>
       */
      public Builder mergeTo(org.apache.pekko.remote.ArteryControlFormats.UniqueAddress value) {
        if (toBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            to_ != null &&
            to_ != org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance()) {
            getToBuilder().mergeFrom(value);
          } else {
            to_ = value;
          }
        } else {
          toBuilder_.mergeFrom(value);
        }
        if (to_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <code>required .UniqueAddress to = 2;</code>
       */
      public Builder clearTo() {
        bitField0_ = (bitField0_ & ~0x00000002);
        to_ = null;
        if (toBuilder_ != null) {
          toBuilder_.dispose();
          toBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>required .UniqueAddress to = 2;</code>
       */
      public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder getToBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getToFieldBuilder().getBuilder();
      }
      /**
       * <code>required .UniqueAddress to = 2;</code>
       */
      public org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder getToOrBuilder() {
        if (toBuilder_ != null) {
          return toBuilder_.getMessageOrBuilder();
        } else {
          return to_ == null ?
              org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : to_;
        }
      }
      /**
       * <code>required .UniqueAddress to = 2;</code>
       */
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
          org.apache.pekko.remote.ArteryControlFormats.UniqueAddress, org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder, org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder> 
          getToFieldBuilder() {
        if (toBuilder_ == null) {
          toBuilder_ = new org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
              org.apache.pekko.remote.ArteryControlFormats.UniqueAddress, org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder, org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder>(
                  getTo(),
                  getParentForChildren(),
                  isClean());
          to_ = null;
        }
        return toBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final org.apache.pekko.protobufv3.internal.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final org.apache.pekko.protobufv3.internal.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Quarantined)
    }

    // @@protoc_insertion_point(class_scope:Quarantined)
    private static final org.apache.pekko.remote.ArteryControlFormats.Quarantined DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.pekko.remote.ArteryControlFormats.Quarantined();
    }

    public static org.apache.pekko.remote.ArteryControlFormats.Quarantined getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final org.apache.pekko.protobufv3.internal.Parser<Quarantined>
        PARSER = new org.apache.pekko.protobufv3.internal.AbstractParser<Quarantined>() {
      @java.lang.Override
      public Quarantined parsePartialFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.apache.pekko.protobufv3.internal.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.apache.pekko.protobufv3.internal.Parser<Quarantined> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.Parser<Quarantined> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.Quarantined getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MessageWithAddressOrBuilder extends
      // @@protoc_insertion_point(interface_extends:MessageWithAddress)
      org.apache.pekko.protobufv3.internal.MessageOrBuilder {

    /**
     * <code>required .UniqueAddress address = 1;</code>
     * @return Whether the address field is set.
     */
    boolean hasAddress();
    /**
     * <code>required .UniqueAddress address = 1;</code>
     * @return The address.
     */
    org.apache.pekko.remote.ArteryControlFormats.UniqueAddress getAddress();
    /**
     * <code>required .UniqueAddress address = 1;</code>
     */
    org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder getAddressOrBuilder();
  }
  /**
   * <pre>
   * Generic message declaration that is used for all types of message that (currently) have a single
   * address field. A message that needs to changed later can be cloned from this one and then adapted.
   * ActorSystemTerminating
   * ActorSystemTerminating.Ack
   * OutboundHandshake.HandshakeRsp
   * </pre>
   *
   * Protobuf type {@code MessageWithAddress}
   */
  public static final class MessageWithAddress extends
      org.apache.pekko.protobufv3.internal.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:MessageWithAddress)
      MessageWithAddressOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MessageWithAddress.newBuilder() to construct.
    private MessageWithAddress(org.apache.pekko.protobufv3.internal.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MessageWithAddress() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.UnusedPrivateParameter unused) {
      return new MessageWithAddress();
    }

    public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.pekko.remote.ArteryControlFormats.internal_static_MessageWithAddress_descriptor;
    }

    @java.lang.Override
    protected org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.pekko.remote.ArteryControlFormats.internal_static_MessageWithAddress_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress.class, org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress.Builder.class);
    }

    private int bitField0_;
    public static final int ADDRESS_FIELD_NUMBER = 1;
    private org.apache.pekko.remote.ArteryControlFormats.UniqueAddress address_;
    /**
     * <code>required .UniqueAddress address = 1;</code>
     * @return Whether the address field is set.
     */
    @java.lang.Override
    public boolean hasAddress() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required .UniqueAddress address = 1;</code>
     * @return The address.
     */
    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress getAddress() {
      return address_ == null ? org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : address_;
    }
    /**
     * <code>required .UniqueAddress address = 1;</code>
     */
    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder getAddressOrBuilder() {
      return address_ == null ? org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : address_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasAddress()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getAddress().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.apache.pekko.protobufv3.internal.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getAddress());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeMessageSize(1, getAddress());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress)) {
        return super.equals(obj);
      }
      org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress other = (org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress) obj;

      if (hasAddress() != other.hasAddress()) return false;
      if (hasAddress()) {
        if (!getAddress()
            .equals(other.getAddress())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasAddress()) {
        hash = (37 * hash) + ADDRESS_FIELD_NUMBER;
        hash = (53 * hash) + getAddress().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress parseFrom(
        java.nio.ByteBuffer data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress parseFrom(byte[] data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress parseFrom(
        byte[] data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress parseFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Generic message declaration that is used for all types of message that (currently) have a single
     * address field. A message that needs to changed later can be cloned from this one and then adapted.
     * ActorSystemTerminating
     * ActorSystemTerminating.Ack
     * OutboundHandshake.HandshakeRsp
     * </pre>
     *
     * Protobuf type {@code MessageWithAddress}
     */
    public static final class Builder extends
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:MessageWithAddress)
        org.apache.pekko.remote.ArteryControlFormats.MessageWithAddressOrBuilder {
      public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_MessageWithAddress_descriptor;
      }

      @java.lang.Override
      protected org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_MessageWithAddress_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress.class, org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress.Builder.class);
      }

      // Construct using org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.pekko.protobufv3.internal.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.pekko.protobufv3.internal.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getAddressFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        address_ = null;
        if (addressBuilder_ != null) {
          addressBuilder_.dispose();
          addressBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_MessageWithAddress_descriptor;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress getDefaultInstanceForType() {
        return org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress build() {
        org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress buildPartial() {
        org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress result = new org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.address_ = addressBuilder_ == null
              ? address_
              : addressBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          org.apache.pekko.protobufv3.internal.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(org.apache.pekko.protobufv3.internal.Message other) {
        if (other instanceof org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress) {
          return mergeFrom((org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress other) {
        if (other == org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress.getDefaultInstance()) return this;
        if (other.hasAddress()) {
          mergeAddress(other.getAddress());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasAddress()) {
          return false;
        }
        if (!getAddress().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getAddressFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.apache.pekko.remote.ArteryControlFormats.UniqueAddress address_;
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
          org.apache.pekko.remote.ArteryControlFormats.UniqueAddress, org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder, org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder> addressBuilder_;
      /**
       * <code>required .UniqueAddress address = 1;</code>
       * @return Whether the address field is set.
       */
      public boolean hasAddress() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required .UniqueAddress address = 1;</code>
       * @return The address.
       */
      public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress getAddress() {
        if (addressBuilder_ == null) {
          return address_ == null ? org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : address_;
        } else {
          return addressBuilder_.getMessage();
        }
      }
      /**
       * <code>required .UniqueAddress address = 1;</code>
       */
      public Builder setAddress(org.apache.pekko.remote.ArteryControlFormats.UniqueAddress value) {
        if (addressBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          address_ = value;
        } else {
          addressBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .UniqueAddress address = 1;</code>
       */
      public Builder setAddress(
          org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder builderForValue) {
        if (addressBuilder_ == null) {
          address_ = builderForValue.build();
        } else {
          addressBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .UniqueAddress address = 1;</code>
       */
      public Builder mergeAddress(org.apache.pekko.remote.ArteryControlFormats.UniqueAddress value) {
        if (addressBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            address_ != null &&
            address_ != org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance()) {
            getAddressBuilder().mergeFrom(value);
          } else {
            address_ = value;
          }
        } else {
          addressBuilder_.mergeFrom(value);
        }
        if (address_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>required .UniqueAddress address = 1;</code>
       */
      public Builder clearAddress() {
        bitField0_ = (bitField0_ & ~0x00000001);
        address_ = null;
        if (addressBuilder_ != null) {
          addressBuilder_.dispose();
          addressBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>required .UniqueAddress address = 1;</code>
       */
      public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder getAddressBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getAddressFieldBuilder().getBuilder();
      }
      /**
       * <code>required .UniqueAddress address = 1;</code>
       */
      public org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder getAddressOrBuilder() {
        if (addressBuilder_ != null) {
          return addressBuilder_.getMessageOrBuilder();
        } else {
          return address_ == null ?
              org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : address_;
        }
      }
      /**
       * <code>required .UniqueAddress address = 1;</code>
       */
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
          org.apache.pekko.remote.ArteryControlFormats.UniqueAddress, org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder, org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder> 
          getAddressFieldBuilder() {
        if (addressBuilder_ == null) {
          addressBuilder_ = new org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
              org.apache.pekko.remote.ArteryControlFormats.UniqueAddress, org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder, org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder>(
                  getAddress(),
                  getParentForChildren(),
                  isClean());
          address_ = null;
        }
        return addressBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final org.apache.pekko.protobufv3.internal.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final org.apache.pekko.protobufv3.internal.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:MessageWithAddress)
    }

    // @@protoc_insertion_point(class_scope:MessageWithAddress)
    private static final org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress();
    }

    public static org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final org.apache.pekko.protobufv3.internal.Parser<MessageWithAddress>
        PARSER = new org.apache.pekko.protobufv3.internal.AbstractParser<MessageWithAddress>() {
      @java.lang.Override
      public MessageWithAddress parsePartialFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.apache.pekko.protobufv3.internal.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.apache.pekko.protobufv3.internal.Parser<MessageWithAddress> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.Parser<MessageWithAddress> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.MessageWithAddress getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface HandshakeReqOrBuilder extends
      // @@protoc_insertion_point(interface_extends:HandshakeReq)
      org.apache.pekko.protobufv3.internal.MessageOrBuilder {

    /**
     * <code>required .UniqueAddress from = 1;</code>
     * @return Whether the from field is set.
     */
    boolean hasFrom();
    /**
     * <code>required .UniqueAddress from = 1;</code>
     * @return The from.
     */
    org.apache.pekko.remote.ArteryControlFormats.UniqueAddress getFrom();
    /**
     * <code>required .UniqueAddress from = 1;</code>
     */
    org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder getFromOrBuilder();

    /**
     * <code>required .Address to = 2;</code>
     * @return Whether the to field is set.
     */
    boolean hasTo();
    /**
     * <code>required .Address to = 2;</code>
     * @return The to.
     */
    org.apache.pekko.remote.ArteryControlFormats.Address getTo();
    /**
     * <code>required .Address to = 2;</code>
     */
    org.apache.pekko.remote.ArteryControlFormats.AddressOrBuilder getToOrBuilder();
  }
  /**
   * Protobuf type {@code HandshakeReq}
   */
  public static final class HandshakeReq extends
      org.apache.pekko.protobufv3.internal.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:HandshakeReq)
      HandshakeReqOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use HandshakeReq.newBuilder() to construct.
    private HandshakeReq(org.apache.pekko.protobufv3.internal.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HandshakeReq() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.UnusedPrivateParameter unused) {
      return new HandshakeReq();
    }

    public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.pekko.remote.ArteryControlFormats.internal_static_HandshakeReq_descriptor;
    }

    @java.lang.Override
    protected org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.pekko.remote.ArteryControlFormats.internal_static_HandshakeReq_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.pekko.remote.ArteryControlFormats.HandshakeReq.class, org.apache.pekko.remote.ArteryControlFormats.HandshakeReq.Builder.class);
    }

    private int bitField0_;
    public static final int FROM_FIELD_NUMBER = 1;
    private org.apache.pekko.remote.ArteryControlFormats.UniqueAddress from_;
    /**
     * <code>required .UniqueAddress from = 1;</code>
     * @return Whether the from field is set.
     */
    @java.lang.Override
    public boolean hasFrom() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required .UniqueAddress from = 1;</code>
     * @return The from.
     */
    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress getFrom() {
      return from_ == null ? org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : from_;
    }
    /**
     * <code>required .UniqueAddress from = 1;</code>
     */
    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder getFromOrBuilder() {
      return from_ == null ? org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : from_;
    }

    public static final int TO_FIELD_NUMBER = 2;
    private org.apache.pekko.remote.ArteryControlFormats.Address to_;
    /**
     * <code>required .Address to = 2;</code>
     * @return Whether the to field is set.
     */
    @java.lang.Override
    public boolean hasTo() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>required .Address to = 2;</code>
     * @return The to.
     */
    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.Address getTo() {
      return to_ == null ? org.apache.pekko.remote.ArteryControlFormats.Address.getDefaultInstance() : to_;
    }
    /**
     * <code>required .Address to = 2;</code>
     */
    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.AddressOrBuilder getToOrBuilder() {
      return to_ == null ? org.apache.pekko.remote.ArteryControlFormats.Address.getDefaultInstance() : to_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasFrom()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTo()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getFrom().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getTo().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.apache.pekko.protobufv3.internal.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getFrom());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getTo());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeMessageSize(1, getFrom());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeMessageSize(2, getTo());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.pekko.remote.ArteryControlFormats.HandshakeReq)) {
        return super.equals(obj);
      }
      org.apache.pekko.remote.ArteryControlFormats.HandshakeReq other = (org.apache.pekko.remote.ArteryControlFormats.HandshakeReq) obj;

      if (hasFrom() != other.hasFrom()) return false;
      if (hasFrom()) {
        if (!getFrom()
            .equals(other.getFrom())) return false;
      }
      if (hasTo() != other.hasTo()) return false;
      if (hasTo()) {
        if (!getTo()
            .equals(other.getTo())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFrom()) {
        hash = (37 * hash) + FROM_FIELD_NUMBER;
        hash = (53 * hash) + getFrom().hashCode();
      }
      if (hasTo()) {
        hash = (37 * hash) + TO_FIELD_NUMBER;
        hash = (53 * hash) + getTo().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.pekko.remote.ArteryControlFormats.HandshakeReq parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.HandshakeReq parseFrom(
        java.nio.ByteBuffer data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.HandshakeReq parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.HandshakeReq parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.HandshakeReq parseFrom(byte[] data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.HandshakeReq parseFrom(
        byte[] data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.HandshakeReq parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.HandshakeReq parseFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.pekko.remote.ArteryControlFormats.HandshakeReq parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.pekko.remote.ArteryControlFormats.HandshakeReq parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.HandshakeReq parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.HandshakeReq parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.pekko.remote.ArteryControlFormats.HandshakeReq prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code HandshakeReq}
     */
    public static final class Builder extends
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:HandshakeReq)
        org.apache.pekko.remote.ArteryControlFormats.HandshakeReqOrBuilder {
      public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_HandshakeReq_descriptor;
      }

      @java.lang.Override
      protected org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_HandshakeReq_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.pekko.remote.ArteryControlFormats.HandshakeReq.class, org.apache.pekko.remote.ArteryControlFormats.HandshakeReq.Builder.class);
      }

      // Construct using org.apache.pekko.remote.ArteryControlFormats.HandshakeReq.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.pekko.protobufv3.internal.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.pekko.protobufv3.internal.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getFromFieldBuilder();
          getToFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        from_ = null;
        if (fromBuilder_ != null) {
          fromBuilder_.dispose();
          fromBuilder_ = null;
        }
        to_ = null;
        if (toBuilder_ != null) {
          toBuilder_.dispose();
          toBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_HandshakeReq_descriptor;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.HandshakeReq getDefaultInstanceForType() {
        return org.apache.pekko.remote.ArteryControlFormats.HandshakeReq.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.HandshakeReq build() {
        org.apache.pekko.remote.ArteryControlFormats.HandshakeReq result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.HandshakeReq buildPartial() {
        org.apache.pekko.remote.ArteryControlFormats.HandshakeReq result = new org.apache.pekko.remote.ArteryControlFormats.HandshakeReq(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.pekko.remote.ArteryControlFormats.HandshakeReq result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.from_ = fromBuilder_ == null
              ? from_
              : fromBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.to_ = toBuilder_ == null
              ? to_
              : toBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          org.apache.pekko.protobufv3.internal.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(org.apache.pekko.protobufv3.internal.Message other) {
        if (other instanceof org.apache.pekko.remote.ArteryControlFormats.HandshakeReq) {
          return mergeFrom((org.apache.pekko.remote.ArteryControlFormats.HandshakeReq)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.pekko.remote.ArteryControlFormats.HandshakeReq other) {
        if (other == org.apache.pekko.remote.ArteryControlFormats.HandshakeReq.getDefaultInstance()) return this;
        if (other.hasFrom()) {
          mergeFrom(other.getFrom());
        }
        if (other.hasTo()) {
          mergeTo(other.getTo());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasFrom()) {
          return false;
        }
        if (!hasTo()) {
          return false;
        }
        if (!getFrom().isInitialized()) {
          return false;
        }
        if (!getTo().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getFromFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getToFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.apache.pekko.remote.ArteryControlFormats.UniqueAddress from_;
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
          org.apache.pekko.remote.ArteryControlFormats.UniqueAddress, org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder, org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder> fromBuilder_;
      /**
       * <code>required .UniqueAddress from = 1;</code>
       * @return Whether the from field is set.
       */
      public boolean hasFrom() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       * @return The from.
       */
      public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress getFrom() {
        if (fromBuilder_ == null) {
          return from_ == null ? org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : from_;
        } else {
          return fromBuilder_.getMessage();
        }
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      public Builder setFrom(org.apache.pekko.remote.ArteryControlFormats.UniqueAddress value) {
        if (fromBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          from_ = value;
        } else {
          fromBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      public Builder setFrom(
          org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder builderForValue) {
        if (fromBuilder_ == null) {
          from_ = builderForValue.build();
        } else {
          fromBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      public Builder mergeFrom(org.apache.pekko.remote.ArteryControlFormats.UniqueAddress value) {
        if (fromBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            from_ != null &&
            from_ != org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance()) {
            getFromBuilder().mergeFrom(value);
          } else {
            from_ = value;
          }
        } else {
          fromBuilder_.mergeFrom(value);
        }
        if (from_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      public Builder clearFrom() {
        bitField0_ = (bitField0_ & ~0x00000001);
        from_ = null;
        if (fromBuilder_ != null) {
          fromBuilder_.dispose();
          fromBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder getFromBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getFromFieldBuilder().getBuilder();
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      public org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder getFromOrBuilder() {
        if (fromBuilder_ != null) {
          return fromBuilder_.getMessageOrBuilder();
        } else {
          return from_ == null ?
              org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : from_;
        }
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
          org.apache.pekko.remote.ArteryControlFormats.UniqueAddress, org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder, org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder> 
          getFromFieldBuilder() {
        if (fromBuilder_ == null) {
          fromBuilder_ = new org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
              org.apache.pekko.remote.ArteryControlFormats.UniqueAddress, org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder, org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder>(
                  getFrom(),
                  getParentForChildren(),
                  isClean());
          from_ = null;
        }
        return fromBuilder_;
      }

      private org.apache.pekko.remote.ArteryControlFormats.Address to_;
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
          org.apache.pekko.remote.ArteryControlFormats.Address, org.apache.pekko.remote.ArteryControlFormats.Address.Builder, org.apache.pekko.remote.ArteryControlFormats.AddressOrBuilder> toBuilder_;
      /**
       * <code>required .Address to = 2;</code>
       * @return Whether the to field is set.
       */
      public boolean hasTo() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>required .Address to = 2;</code>
       * @return The to.
       */
      public org.apache.pekko.remote.ArteryControlFormats.Address getTo() {
        if (toBuilder_ == null) {
          return to_ == null ? org.apache.pekko.remote.ArteryControlFormats.Address.getDefaultInstance() : to_;
        } else {
          return toBuilder_.getMessage();
        }
      }
      /**
       * <code>required .Address to = 2;</code>
       */
      public Builder setTo(org.apache.pekko.remote.ArteryControlFormats.Address value) {
        if (toBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          to_ = value;
        } else {
          toBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>required .Address to = 2;</code>
       */
      public Builder setTo(
          org.apache.pekko.remote.ArteryControlFormats.Address.Builder builderForValue) {
        if (toBuilder_ == null) {
          to_ = builderForValue.build();
        } else {
          toBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>required .Address to = 2;</code>
       */
      public Builder mergeTo(org.apache.pekko.remote.ArteryControlFormats.Address value) {
        if (toBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            to_ != null &&
            to_ != org.apache.pekko.remote.ArteryControlFormats.Address.getDefaultInstance()) {
            getToBuilder().mergeFrom(value);
          } else {
            to_ = value;
          }
        } else {
          toBuilder_.mergeFrom(value);
        }
        if (to_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <code>required .Address to = 2;</code>
       */
      public Builder clearTo() {
        bitField0_ = (bitField0_ & ~0x00000002);
        to_ = null;
        if (toBuilder_ != null) {
          toBuilder_.dispose();
          toBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>required .Address to = 2;</code>
       */
      public org.apache.pekko.remote.ArteryControlFormats.Address.Builder getToBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getToFieldBuilder().getBuilder();
      }
      /**
       * <code>required .Address to = 2;</code>
       */
      public org.apache.pekko.remote.ArteryControlFormats.AddressOrBuilder getToOrBuilder() {
        if (toBuilder_ != null) {
          return toBuilder_.getMessageOrBuilder();
        } else {
          return to_ == null ?
              org.apache.pekko.remote.ArteryControlFormats.Address.getDefaultInstance() : to_;
        }
      }
      /**
       * <code>required .Address to = 2;</code>
       */
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
          org.apache.pekko.remote.ArteryControlFormats.Address, org.apache.pekko.remote.ArteryControlFormats.Address.Builder, org.apache.pekko.remote.ArteryControlFormats.AddressOrBuilder> 
          getToFieldBuilder() {
        if (toBuilder_ == null) {
          toBuilder_ = new org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
              org.apache.pekko.remote.ArteryControlFormats.Address, org.apache.pekko.remote.ArteryControlFormats.Address.Builder, org.apache.pekko.remote.ArteryControlFormats.AddressOrBuilder>(
                  getTo(),
                  getParentForChildren(),
                  isClean());
          to_ = null;
        }
        return toBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final org.apache.pekko.protobufv3.internal.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final org.apache.pekko.protobufv3.internal.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:HandshakeReq)
    }

    // @@protoc_insertion_point(class_scope:HandshakeReq)
    private static final org.apache.pekko.remote.ArteryControlFormats.HandshakeReq DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.pekko.remote.ArteryControlFormats.HandshakeReq();
    }

    public static org.apache.pekko.remote.ArteryControlFormats.HandshakeReq getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final org.apache.pekko.protobufv3.internal.Parser<HandshakeReq>
        PARSER = new org.apache.pekko.protobufv3.internal.AbstractParser<HandshakeReq>() {
      @java.lang.Override
      public HandshakeReq parsePartialFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.apache.pekko.protobufv3.internal.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.apache.pekko.protobufv3.internal.Parser<HandshakeReq> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.Parser<HandshakeReq> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.HandshakeReq getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CompressionTableAdvertisementOrBuilder extends
      // @@protoc_insertion_point(interface_extends:CompressionTableAdvertisement)
      org.apache.pekko.protobufv3.internal.MessageOrBuilder {

    /**
     * <code>required .UniqueAddress from = 1;</code>
     * @return Whether the from field is set.
     */
    boolean hasFrom();
    /**
     * <code>required .UniqueAddress from = 1;</code>
     * @return The from.
     */
    org.apache.pekko.remote.ArteryControlFormats.UniqueAddress getFrom();
    /**
     * <code>required .UniqueAddress from = 1;</code>
     */
    org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder getFromOrBuilder();

    /**
     * <code>required uint64 originUid = 2;</code>
     * @return Whether the originUid field is set.
     */
    boolean hasOriginUid();
    /**
     * <code>required uint64 originUid = 2;</code>
     * @return The originUid.
     */
    long getOriginUid();

    /**
     * <code>required uint32 tableVersion = 3;</code>
     * @return Whether the tableVersion field is set.
     */
    boolean hasTableVersion();
    /**
     * <code>required uint32 tableVersion = 3;</code>
     * @return The tableVersion.
     */
    int getTableVersion();

    /**
     * <pre>
     * actual Map is represented by separate sequences of keys and values,
     * relies on both sequences using the same order so that corresponding entries can be
     * associated again when deserializing
     * </pre>
     *
     * <code>repeated string keys = 4;</code>
     * @return A list containing the keys.
     */
    java.util.List<java.lang.String>
        getKeysList();
    /**
     * <pre>
     * actual Map is represented by separate sequences of keys and values,
     * relies on both sequences using the same order so that corresponding entries can be
     * associated again when deserializing
     * </pre>
     *
     * <code>repeated string keys = 4;</code>
     * @return The count of keys.
     */
    int getKeysCount();
    /**
     * <pre>
     * actual Map is represented by separate sequences of keys and values,
     * relies on both sequences using the same order so that corresponding entries can be
     * associated again when deserializing
     * </pre>
     *
     * <code>repeated string keys = 4;</code>
     * @param index The index of the element to return.
     * @return The keys at the given index.
     */
    java.lang.String getKeys(int index);
    /**
     * <pre>
     * actual Map is represented by separate sequences of keys and values,
     * relies on both sequences using the same order so that corresponding entries can be
     * associated again when deserializing
     * </pre>
     *
     * <code>repeated string keys = 4;</code>
     * @param index The index of the value to return.
     * @return The bytes of the keys at the given index.
     */
    org.apache.pekko.protobufv3.internal.ByteString
        getKeysBytes(int index);

    /**
     * <code>repeated uint32 values = 5;</code>
     * @return A list containing the values.
     */
    java.util.List<java.lang.Integer> getValuesList();
    /**
     * <code>repeated uint32 values = 5;</code>
     * @return The count of values.
     */
    int getValuesCount();
    /**
     * <code>repeated uint32 values = 5;</code>
     * @param index The index of the element to return.
     * @return The values at the given index.
     */
    int getValues(int index);
  }
  /**
   * <pre>
   * CompressionProtocol.ActorRefCompressionAdvertisement
   * CompressionProtocol.ClassManifestCompressionAdvertisement
   * </pre>
   *
   * Protobuf type {@code CompressionTableAdvertisement}
   */
  public static final class CompressionTableAdvertisement extends
      org.apache.pekko.protobufv3.internal.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:CompressionTableAdvertisement)
      CompressionTableAdvertisementOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CompressionTableAdvertisement.newBuilder() to construct.
    private CompressionTableAdvertisement(org.apache.pekko.protobufv3.internal.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CompressionTableAdvertisement() {
      keys_ =
          org.apache.pekko.protobufv3.internal.LazyStringArrayList.emptyList();
      values_ = emptyIntList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.UnusedPrivateParameter unused) {
      return new CompressionTableAdvertisement();
    }

    public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.pekko.remote.ArteryControlFormats.internal_static_CompressionTableAdvertisement_descriptor;
    }

    @java.lang.Override
    protected org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.pekko.remote.ArteryControlFormats.internal_static_CompressionTableAdvertisement_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement.class, org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement.Builder.class);
    }

    private int bitField0_;
    public static final int FROM_FIELD_NUMBER = 1;
    private org.apache.pekko.remote.ArteryControlFormats.UniqueAddress from_;
    /**
     * <code>required .UniqueAddress from = 1;</code>
     * @return Whether the from field is set.
     */
    @java.lang.Override
    public boolean hasFrom() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required .UniqueAddress from = 1;</code>
     * @return The from.
     */
    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress getFrom() {
      return from_ == null ? org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : from_;
    }
    /**
     * <code>required .UniqueAddress from = 1;</code>
     */
    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder getFromOrBuilder() {
      return from_ == null ? org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : from_;
    }

    public static final int ORIGINUID_FIELD_NUMBER = 2;
    private long originUid_ = 0L;
    /**
     * <code>required uint64 originUid = 2;</code>
     * @return Whether the originUid field is set.
     */
    @java.lang.Override
    public boolean hasOriginUid() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>required uint64 originUid = 2;</code>
     * @return The originUid.
     */
    @java.lang.Override
    public long getOriginUid() {
      return originUid_;
    }

    public static final int TABLEVERSION_FIELD_NUMBER = 3;
    private int tableVersion_ = 0;
    /**
     * <code>required uint32 tableVersion = 3;</code>
     * @return Whether the tableVersion field is set.
     */
    @java.lang.Override
    public boolean hasTableVersion() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>required uint32 tableVersion = 3;</code>
     * @return The tableVersion.
     */
    @java.lang.Override
    public int getTableVersion() {
      return tableVersion_;
    }

    public static final int KEYS_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private org.apache.pekko.protobufv3.internal.LazyStringArrayList keys_ =
        org.apache.pekko.protobufv3.internal.LazyStringArrayList.emptyList();
    /**
     * <pre>
     * actual Map is represented by separate sequences of keys and values,
     * relies on both sequences using the same order so that corresponding entries can be
     * associated again when deserializing
     * </pre>
     *
     * <code>repeated string keys = 4;</code>
     * @return A list containing the keys.
     */
    public org.apache.pekko.protobufv3.internal.ProtocolStringList
        getKeysList() {
      return keys_;
    }
    /**
     * <pre>
     * actual Map is represented by separate sequences of keys and values,
     * relies on both sequences using the same order so that corresponding entries can be
     * associated again when deserializing
     * </pre>
     *
     * <code>repeated string keys = 4;</code>
     * @return The count of keys.
     */
    public int getKeysCount() {
      return keys_.size();
    }
    /**
     * <pre>
     * actual Map is represented by separate sequences of keys and values,
     * relies on both sequences using the same order so that corresponding entries can be
     * associated again when deserializing
     * </pre>
     *
     * <code>repeated string keys = 4;</code>
     * @param index The index of the element to return.
     * @return The keys at the given index.
     */
    public java.lang.String getKeys(int index) {
      return keys_.get(index);
    }
    /**
     * <pre>
     * actual Map is represented by separate sequences of keys and values,
     * relies on both sequences using the same order so that corresponding entries can be
     * associated again when deserializing
     * </pre>
     *
     * <code>repeated string keys = 4;</code>
     * @param index The index of the value to return.
     * @return The bytes of the keys at the given index.
     */
    public org.apache.pekko.protobufv3.internal.ByteString
        getKeysBytes(int index) {
      return keys_.getByteString(index);
    }

    public static final int VALUES_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private org.apache.pekko.protobufv3.internal.Internal.IntList values_ =
        emptyIntList();
    /**
     * <code>repeated uint32 values = 5;</code>
     * @return A list containing the values.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getValuesList() {
      return values_;
    }
    /**
     * <code>repeated uint32 values = 5;</code>
     * @return The count of values.
     */
    public int getValuesCount() {
      return values_.size();
    }
    /**
     * <code>repeated uint32 values = 5;</code>
     * @param index The index of the element to return.
     * @return The values at the given index.
     */
    public int getValues(int index) {
      return values_.getInt(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasFrom()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasOriginUid()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTableVersion()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getFrom().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.apache.pekko.protobufv3.internal.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getFrom());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeUInt64(2, originUid_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeUInt32(3, tableVersion_);
      }
      for (int i = 0; i < keys_.size(); i++) {
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.writeString(output, 4, keys_.getRaw(i));
      }
      for (int i = 0; i < values_.size(); i++) {
        output.writeUInt32(5, values_.getInt(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeMessageSize(1, getFrom());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeUInt64Size(2, originUid_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeUInt32Size(3, tableVersion_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < keys_.size(); i++) {
          dataSize += computeStringSizeNoTag(keys_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getKeysList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < values_.size(); i++) {
          dataSize += org.apache.pekko.protobufv3.internal.CodedOutputStream
            .computeUInt32SizeNoTag(values_.getInt(i));
        }
        size += dataSize;
        size += 1 * getValuesList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement)) {
        return super.equals(obj);
      }
      org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement other = (org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement) obj;

      if (hasFrom() != other.hasFrom()) return false;
      if (hasFrom()) {
        if (!getFrom()
            .equals(other.getFrom())) return false;
      }
      if (hasOriginUid() != other.hasOriginUid()) return false;
      if (hasOriginUid()) {
        if (getOriginUid()
            != other.getOriginUid()) return false;
      }
      if (hasTableVersion() != other.hasTableVersion()) return false;
      if (hasTableVersion()) {
        if (getTableVersion()
            != other.getTableVersion()) return false;
      }
      if (!getKeysList()
          .equals(other.getKeysList())) return false;
      if (!getValuesList()
          .equals(other.getValuesList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFrom()) {
        hash = (37 * hash) + FROM_FIELD_NUMBER;
        hash = (53 * hash) + getFrom().hashCode();
      }
      if (hasOriginUid()) {
        hash = (37 * hash) + ORIGINUID_FIELD_NUMBER;
        hash = (53 * hash) + org.apache.pekko.protobufv3.internal.Internal.hashLong(
            getOriginUid());
      }
      if (hasTableVersion()) {
        hash = (37 * hash) + TABLEVERSION_FIELD_NUMBER;
        hash = (53 * hash) + getTableVersion();
      }
      if (getKeysCount() > 0) {
        hash = (37 * hash) + KEYS_FIELD_NUMBER;
        hash = (53 * hash) + getKeysList().hashCode();
      }
      if (getValuesCount() > 0) {
        hash = (37 * hash) + VALUES_FIELD_NUMBER;
        hash = (53 * hash) + getValuesList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement parseFrom(
        java.nio.ByteBuffer data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement parseFrom(byte[] data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement parseFrom(
        byte[] data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement parseFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * CompressionProtocol.ActorRefCompressionAdvertisement
     * CompressionProtocol.ClassManifestCompressionAdvertisement
     * </pre>
     *
     * Protobuf type {@code CompressionTableAdvertisement}
     */
    public static final class Builder extends
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:CompressionTableAdvertisement)
        org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementOrBuilder {
      public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_CompressionTableAdvertisement_descriptor;
      }

      @java.lang.Override
      protected org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_CompressionTableAdvertisement_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement.class, org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement.Builder.class);
      }

      // Construct using org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.pekko.protobufv3.internal.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.pekko.protobufv3.internal.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getFromFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        from_ = null;
        if (fromBuilder_ != null) {
          fromBuilder_.dispose();
          fromBuilder_ = null;
        }
        originUid_ = 0L;
        tableVersion_ = 0;
        keys_ =
            org.apache.pekko.protobufv3.internal.LazyStringArrayList.emptyList();
        values_ = emptyIntList();
        return this;
      }

      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_CompressionTableAdvertisement_descriptor;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement getDefaultInstanceForType() {
        return org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement build() {
        org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement buildPartial() {
        org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement result = new org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.from_ = fromBuilder_ == null
              ? from_
              : fromBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.originUid_ = originUid_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.tableVersion_ = tableVersion_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          keys_.makeImmutable();
          result.keys_ = keys_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          values_.makeImmutable();
          result.values_ = values_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          org.apache.pekko.protobufv3.internal.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(org.apache.pekko.protobufv3.internal.Message other) {
        if (other instanceof org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement) {
          return mergeFrom((org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement other) {
        if (other == org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement.getDefaultInstance()) return this;
        if (other.hasFrom()) {
          mergeFrom(other.getFrom());
        }
        if (other.hasOriginUid()) {
          setOriginUid(other.getOriginUid());
        }
        if (other.hasTableVersion()) {
          setTableVersion(other.getTableVersion());
        }
        if (!other.keys_.isEmpty()) {
          if (keys_.isEmpty()) {
            keys_ = other.keys_;
            bitField0_ |= 0x00000008;
          } else {
            ensureKeysIsMutable();
            keys_.addAll(other.keys_);
          }
          onChanged();
        }
        if (!other.values_.isEmpty()) {
          if (values_.isEmpty()) {
            values_ = other.values_;
            values_.makeImmutable();
            bitField0_ |= 0x00000010;
          } else {
            ensureValuesIsMutable();
            values_.addAll(other.values_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasFrom()) {
          return false;
        }
        if (!hasOriginUid()) {
          return false;
        }
        if (!hasTableVersion()) {
          return false;
        }
        if (!getFrom().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getFromFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                originUid_ = input.readUInt64();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                tableVersion_ = input.readUInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 34: {
                org.apache.pekko.protobufv3.internal.ByteString bs = input.readBytes();
                ensureKeysIsMutable();
                keys_.add(bs);
                break;
              } // case 34
              case 40: {
                int v = input.readUInt32();
                ensureValuesIsMutable();
                values_.addInt(v);
                break;
              } // case 40
              case 42: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureValuesIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  values_.addInt(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              } // case 42
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.apache.pekko.remote.ArteryControlFormats.UniqueAddress from_;
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
          org.apache.pekko.remote.ArteryControlFormats.UniqueAddress, org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder, org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder> fromBuilder_;
      /**
       * <code>required .UniqueAddress from = 1;</code>
       * @return Whether the from field is set.
       */
      public boolean hasFrom() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       * @return The from.
       */
      public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress getFrom() {
        if (fromBuilder_ == null) {
          return from_ == null ? org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : from_;
        } else {
          return fromBuilder_.getMessage();
        }
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      public Builder setFrom(org.apache.pekko.remote.ArteryControlFormats.UniqueAddress value) {
        if (fromBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          from_ = value;
        } else {
          fromBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      public Builder setFrom(
          org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder builderForValue) {
        if (fromBuilder_ == null) {
          from_ = builderForValue.build();
        } else {
          fromBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      public Builder mergeFrom(org.apache.pekko.remote.ArteryControlFormats.UniqueAddress value) {
        if (fromBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            from_ != null &&
            from_ != org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance()) {
            getFromBuilder().mergeFrom(value);
          } else {
            from_ = value;
          }
        } else {
          fromBuilder_.mergeFrom(value);
        }
        if (from_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      public Builder clearFrom() {
        bitField0_ = (bitField0_ & ~0x00000001);
        from_ = null;
        if (fromBuilder_ != null) {
          fromBuilder_.dispose();
          fromBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder getFromBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getFromFieldBuilder().getBuilder();
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      public org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder getFromOrBuilder() {
        if (fromBuilder_ != null) {
          return fromBuilder_.getMessageOrBuilder();
        } else {
          return from_ == null ?
              org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : from_;
        }
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
          org.apache.pekko.remote.ArteryControlFormats.UniqueAddress, org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder, org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder> 
          getFromFieldBuilder() {
        if (fromBuilder_ == null) {
          fromBuilder_ = new org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
              org.apache.pekko.remote.ArteryControlFormats.UniqueAddress, org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder, org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder>(
                  getFrom(),
                  getParentForChildren(),
                  isClean());
          from_ = null;
        }
        return fromBuilder_;
      }

      private long originUid_ ;
      /**
       * <code>required uint64 originUid = 2;</code>
       * @return Whether the originUid field is set.
       */
      @java.lang.Override
      public boolean hasOriginUid() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>required uint64 originUid = 2;</code>
       * @return The originUid.
       */
      @java.lang.Override
      public long getOriginUid() {
        return originUid_;
      }
      /**
       * <code>required uint64 originUid = 2;</code>
       * @param value The originUid to set.
       * @return This builder for chaining.
       */
      public Builder setOriginUid(long value) {

        originUid_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 originUid = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearOriginUid() {
        bitField0_ = (bitField0_ & ~0x00000002);
        originUid_ = 0L;
        onChanged();
        return this;
      }

      private int tableVersion_ ;
      /**
       * <code>required uint32 tableVersion = 3;</code>
       * @return Whether the tableVersion field is set.
       */
      @java.lang.Override
      public boolean hasTableVersion() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>required uint32 tableVersion = 3;</code>
       * @return The tableVersion.
       */
      @java.lang.Override
      public int getTableVersion() {
        return tableVersion_;
      }
      /**
       * <code>required uint32 tableVersion = 3;</code>
       * @param value The tableVersion to set.
       * @return This builder for chaining.
       */
      public Builder setTableVersion(int value) {

        tableVersion_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 tableVersion = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearTableVersion() {
        bitField0_ = (bitField0_ & ~0x00000004);
        tableVersion_ = 0;
        onChanged();
        return this;
      }

      private org.apache.pekko.protobufv3.internal.LazyStringArrayList keys_ =
          org.apache.pekko.protobufv3.internal.LazyStringArrayList.emptyList();
      private void ensureKeysIsMutable() {
        if (!keys_.isModifiable()) {
          keys_ = new org.apache.pekko.protobufv3.internal.LazyStringArrayList(keys_);
        }
        bitField0_ |= 0x00000008;
      }
      /**
       * <pre>
       * actual Map is represented by separate sequences of keys and values,
       * relies on both sequences using the same order so that corresponding entries can be
       * associated again when deserializing
       * </pre>
       *
       * <code>repeated string keys = 4;</code>
       * @return A list containing the keys.
       */
      public org.apache.pekko.protobufv3.internal.ProtocolStringList
          getKeysList() {
        keys_.makeImmutable();
        return keys_;
      }
      /**
       * <pre>
       * actual Map is represented by separate sequences of keys and values,
       * relies on both sequences using the same order so that corresponding entries can be
       * associated again when deserializing
       * </pre>
       *
       * <code>repeated string keys = 4;</code>
       * @return The count of keys.
       */
      public int getKeysCount() {
        return keys_.size();
      }
      /**
       * <pre>
       * actual Map is represented by separate sequences of keys and values,
       * relies on both sequences using the same order so that corresponding entries can be
       * associated again when deserializing
       * </pre>
       *
       * <code>repeated string keys = 4;</code>
       * @param index The index of the element to return.
       * @return The keys at the given index.
       */
      public java.lang.String getKeys(int index) {
        return keys_.get(index);
      }
      /**
       * <pre>
       * actual Map is represented by separate sequences of keys and values,
       * relies on both sequences using the same order so that corresponding entries can be
       * associated again when deserializing
       * </pre>
       *
       * <code>repeated string keys = 4;</code>
       * @param index The index of the value to return.
       * @return The bytes of the keys at the given index.
       */
      public org.apache.pekko.protobufv3.internal.ByteString
          getKeysBytes(int index) {
        return keys_.getByteString(index);
      }
      /**
       * <pre>
       * actual Map is represented by separate sequences of keys and values,
       * relies on both sequences using the same order so that corresponding entries can be
       * associated again when deserializing
       * </pre>
       *
       * <code>repeated string keys = 4;</code>
       * @param index The index to set the value at.
       * @param value The keys to set.
       * @return This builder for chaining.
       */
      public Builder setKeys(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureKeysIsMutable();
        keys_.set(index, value);
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * actual Map is represented by separate sequences of keys and values,
       * relies on both sequences using the same order so that corresponding entries can be
       * associated again when deserializing
       * </pre>
       *
       * <code>repeated string keys = 4;</code>
       * @param value The keys to add.
       * @return This builder for chaining.
       */
      public Builder addKeys(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureKeysIsMutable();
        keys_.add(value);
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * actual Map is represented by separate sequences of keys and values,
       * relies on both sequences using the same order so that corresponding entries can be
       * associated again when deserializing
       * </pre>
       *
       * <code>repeated string keys = 4;</code>
       * @param values The keys to add.
       * @return This builder for chaining.
       */
      public Builder addAllKeys(
          java.lang.Iterable<java.lang.String> values) {
        ensureKeysIsMutable();
        org.apache.pekko.protobufv3.internal.AbstractMessageLite.Builder.addAll(
            values, keys_);
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * actual Map is represented by separate sequences of keys and values,
       * relies on both sequences using the same order so that corresponding entries can be
       * associated again when deserializing
       * </pre>
       *
       * <code>repeated string keys = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearKeys() {
        keys_ =
          org.apache.pekko.protobufv3.internal.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * actual Map is represented by separate sequences of keys and values,
       * relies on both sequences using the same order so that corresponding entries can be
       * associated again when deserializing
       * </pre>
       *
       * <code>repeated string keys = 4;</code>
       * @param value The bytes of the keys to add.
       * @return This builder for chaining.
       */
      public Builder addKeysBytes(
          org.apache.pekko.protobufv3.internal.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureKeysIsMutable();
        keys_.add(value);
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }

      private org.apache.pekko.protobufv3.internal.Internal.IntList values_ = emptyIntList();
      private void ensureValuesIsMutable() {
        if (!values_.isModifiable()) {
          values_ = makeMutableCopy(values_);
        }
        bitField0_ |= 0x00000010;
      }
      /**
       * <code>repeated uint32 values = 5;</code>
       * @return A list containing the values.
       */
      public java.util.List<java.lang.Integer>
          getValuesList() {
        values_.makeImmutable();
        return values_;
      }
      /**
       * <code>repeated uint32 values = 5;</code>
       * @return The count of values.
       */
      public int getValuesCount() {
        return values_.size();
      }
      /**
       * <code>repeated uint32 values = 5;</code>
       * @param index The index of the element to return.
       * @return The values at the given index.
       */
      public int getValues(int index) {
        return values_.getInt(index);
      }
      /**
       * <code>repeated uint32 values = 5;</code>
       * @param index The index to set the value at.
       * @param value The values to set.
       * @return This builder for chaining.
       */
      public Builder setValues(
          int index, int value) {

        ensureValuesIsMutable();
        values_.setInt(index, value);
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 values = 5;</code>
       * @param value The values to add.
       * @return This builder for chaining.
       */
      public Builder addValues(int value) {

        ensureValuesIsMutable();
        values_.addInt(value);
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 values = 5;</code>
       * @param values The values to add.
       * @return This builder for chaining.
       */
      public Builder addAllValues(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureValuesIsMutable();
        org.apache.pekko.protobufv3.internal.AbstractMessageLite.Builder.addAll(
            values, values_);
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 values = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearValues() {
        values_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final org.apache.pekko.protobufv3.internal.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final org.apache.pekko.protobufv3.internal.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:CompressionTableAdvertisement)
    }

    // @@protoc_insertion_point(class_scope:CompressionTableAdvertisement)
    private static final org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement();
    }

    public static org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final org.apache.pekko.protobufv3.internal.Parser<CompressionTableAdvertisement>
        PARSER = new org.apache.pekko.protobufv3.internal.AbstractParser<CompressionTableAdvertisement>() {
      @java.lang.Override
      public CompressionTableAdvertisement parsePartialFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.apache.pekko.protobufv3.internal.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.apache.pekko.protobufv3.internal.Parser<CompressionTableAdvertisement> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.Parser<CompressionTableAdvertisement> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisement getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CompressionTableAdvertisementAckOrBuilder extends
      // @@protoc_insertion_point(interface_extends:CompressionTableAdvertisementAck)
      org.apache.pekko.protobufv3.internal.MessageOrBuilder {

    /**
     * <code>required .UniqueAddress from = 1;</code>
     * @return Whether the from field is set.
     */
    boolean hasFrom();
    /**
     * <code>required .UniqueAddress from = 1;</code>
     * @return The from.
     */
    org.apache.pekko.remote.ArteryControlFormats.UniqueAddress getFrom();
    /**
     * <code>required .UniqueAddress from = 1;</code>
     */
    org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder getFromOrBuilder();

    /**
     * <code>required uint32 version = 2;</code>
     * @return Whether the version field is set.
     */
    boolean hasVersion();
    /**
     * <code>required uint32 version = 2;</code>
     * @return The version.
     */
    int getVersion();
  }
  /**
   * <pre>
   * CompressionProtocol.ActorRefCompressionAdvertisementAck
   * CompressionProtocol.ClassManifestCompressionAdvertisementAck
   * </pre>
   *
   * Protobuf type {@code CompressionTableAdvertisementAck}
   */
  public static final class CompressionTableAdvertisementAck extends
      org.apache.pekko.protobufv3.internal.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:CompressionTableAdvertisementAck)
      CompressionTableAdvertisementAckOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CompressionTableAdvertisementAck.newBuilder() to construct.
    private CompressionTableAdvertisementAck(org.apache.pekko.protobufv3.internal.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CompressionTableAdvertisementAck() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.UnusedPrivateParameter unused) {
      return new CompressionTableAdvertisementAck();
    }

    public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.pekko.remote.ArteryControlFormats.internal_static_CompressionTableAdvertisementAck_descriptor;
    }

    @java.lang.Override
    protected org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.pekko.remote.ArteryControlFormats.internal_static_CompressionTableAdvertisementAck_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck.class, org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck.Builder.class);
    }

    private int bitField0_;
    public static final int FROM_FIELD_NUMBER = 1;
    private org.apache.pekko.remote.ArteryControlFormats.UniqueAddress from_;
    /**
     * <code>required .UniqueAddress from = 1;</code>
     * @return Whether the from field is set.
     */
    @java.lang.Override
    public boolean hasFrom() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required .UniqueAddress from = 1;</code>
     * @return The from.
     */
    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress getFrom() {
      return from_ == null ? org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : from_;
    }
    /**
     * <code>required .UniqueAddress from = 1;</code>
     */
    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder getFromOrBuilder() {
      return from_ == null ? org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : from_;
    }

    public static final int VERSION_FIELD_NUMBER = 2;
    private int version_ = 0;
    /**
     * <code>required uint32 version = 2;</code>
     * @return Whether the version field is set.
     */
    @java.lang.Override
    public boolean hasVersion() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>required uint32 version = 2;</code>
     * @return The version.
     */
    @java.lang.Override
    public int getVersion() {
      return version_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasFrom()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVersion()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getFrom().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.apache.pekko.protobufv3.internal.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getFrom());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeUInt32(2, version_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeMessageSize(1, getFrom());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeUInt32Size(2, version_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck)) {
        return super.equals(obj);
      }
      org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck other = (org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck) obj;

      if (hasFrom() != other.hasFrom()) return false;
      if (hasFrom()) {
        if (!getFrom()
            .equals(other.getFrom())) return false;
      }
      if (hasVersion() != other.hasVersion()) return false;
      if (hasVersion()) {
        if (getVersion()
            != other.getVersion()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFrom()) {
        hash = (37 * hash) + FROM_FIELD_NUMBER;
        hash = (53 * hash) + getFrom().hashCode();
      }
      if (hasVersion()) {
        hash = (37 * hash) + VERSION_FIELD_NUMBER;
        hash = (53 * hash) + getVersion();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck parseFrom(
        java.nio.ByteBuffer data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck parseFrom(byte[] data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck parseFrom(
        byte[] data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck parseFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * CompressionProtocol.ActorRefCompressionAdvertisementAck
     * CompressionProtocol.ClassManifestCompressionAdvertisementAck
     * </pre>
     *
     * Protobuf type {@code CompressionTableAdvertisementAck}
     */
    public static final class Builder extends
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:CompressionTableAdvertisementAck)
        org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAckOrBuilder {
      public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_CompressionTableAdvertisementAck_descriptor;
      }

      @java.lang.Override
      protected org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_CompressionTableAdvertisementAck_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck.class, org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck.Builder.class);
      }

      // Construct using org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.pekko.protobufv3.internal.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.pekko.protobufv3.internal.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getFromFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        from_ = null;
        if (fromBuilder_ != null) {
          fromBuilder_.dispose();
          fromBuilder_ = null;
        }
        version_ = 0;
        return this;
      }

      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_CompressionTableAdvertisementAck_descriptor;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck getDefaultInstanceForType() {
        return org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck build() {
        org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck buildPartial() {
        org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck result = new org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.from_ = fromBuilder_ == null
              ? from_
              : fromBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.version_ = version_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          org.apache.pekko.protobufv3.internal.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(org.apache.pekko.protobufv3.internal.Message other) {
        if (other instanceof org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck) {
          return mergeFrom((org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck other) {
        if (other == org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck.getDefaultInstance()) return this;
        if (other.hasFrom()) {
          mergeFrom(other.getFrom());
        }
        if (other.hasVersion()) {
          setVersion(other.getVersion());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasFrom()) {
          return false;
        }
        if (!hasVersion()) {
          return false;
        }
        if (!getFrom().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getFromFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                version_ = input.readUInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.apache.pekko.remote.ArteryControlFormats.UniqueAddress from_;
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
          org.apache.pekko.remote.ArteryControlFormats.UniqueAddress, org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder, org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder> fromBuilder_;
      /**
       * <code>required .UniqueAddress from = 1;</code>
       * @return Whether the from field is set.
       */
      public boolean hasFrom() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       * @return The from.
       */
      public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress getFrom() {
        if (fromBuilder_ == null) {
          return from_ == null ? org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : from_;
        } else {
          return fromBuilder_.getMessage();
        }
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      public Builder setFrom(org.apache.pekko.remote.ArteryControlFormats.UniqueAddress value) {
        if (fromBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          from_ = value;
        } else {
          fromBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      public Builder setFrom(
          org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder builderForValue) {
        if (fromBuilder_ == null) {
          from_ = builderForValue.build();
        } else {
          fromBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      public Builder mergeFrom(org.apache.pekko.remote.ArteryControlFormats.UniqueAddress value) {
        if (fromBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            from_ != null &&
            from_ != org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance()) {
            getFromBuilder().mergeFrom(value);
          } else {
            from_ = value;
          }
        } else {
          fromBuilder_.mergeFrom(value);
        }
        if (from_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      public Builder clearFrom() {
        bitField0_ = (bitField0_ & ~0x00000001);
        from_ = null;
        if (fromBuilder_ != null) {
          fromBuilder_.dispose();
          fromBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder getFromBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getFromFieldBuilder().getBuilder();
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      public org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder getFromOrBuilder() {
        if (fromBuilder_ != null) {
          return fromBuilder_.getMessageOrBuilder();
        } else {
          return from_ == null ?
              org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : from_;
        }
      }
      /**
       * <code>required .UniqueAddress from = 1;</code>
       */
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
          org.apache.pekko.remote.ArteryControlFormats.UniqueAddress, org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder, org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder> 
          getFromFieldBuilder() {
        if (fromBuilder_ == null) {
          fromBuilder_ = new org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
              org.apache.pekko.remote.ArteryControlFormats.UniqueAddress, org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder, org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder>(
                  getFrom(),
                  getParentForChildren(),
                  isClean());
          from_ = null;
        }
        return fromBuilder_;
      }

      private int version_ ;
      /**
       * <code>required uint32 version = 2;</code>
       * @return Whether the version field is set.
       */
      @java.lang.Override
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>required uint32 version = 2;</code>
       * @return The version.
       */
      @java.lang.Override
      public int getVersion() {
        return version_;
      }
      /**
       * <code>required uint32 version = 2;</code>
       * @param value The version to set.
       * @return This builder for chaining.
       */
      public Builder setVersion(int value) {

        version_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 version = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearVersion() {
        bitField0_ = (bitField0_ & ~0x00000002);
        version_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final org.apache.pekko.protobufv3.internal.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final org.apache.pekko.protobufv3.internal.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:CompressionTableAdvertisementAck)
    }

    // @@protoc_insertion_point(class_scope:CompressionTableAdvertisementAck)
    private static final org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck();
    }

    public static org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final org.apache.pekko.protobufv3.internal.Parser<CompressionTableAdvertisementAck>
        PARSER = new org.apache.pekko.protobufv3.internal.AbstractParser<CompressionTableAdvertisementAck>() {
      @java.lang.Override
      public CompressionTableAdvertisementAck parsePartialFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.apache.pekko.protobufv3.internal.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.apache.pekko.protobufv3.internal.Parser<CompressionTableAdvertisementAck> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.Parser<CompressionTableAdvertisementAck> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.CompressionTableAdvertisementAck getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SystemMessageEnvelopeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SystemMessageEnvelope)
      org.apache.pekko.protobufv3.internal.MessageOrBuilder {

    /**
     * <code>required bytes message = 1;</code>
     * @return Whether the message field is set.
     */
    boolean hasMessage();
    /**
     * <code>required bytes message = 1;</code>
     * @return The message.
     */
    org.apache.pekko.protobufv3.internal.ByteString getMessage();

    /**
     * <code>required int32 serializerId = 2;</code>
     * @return Whether the serializerId field is set.
     */
    boolean hasSerializerId();
    /**
     * <code>required int32 serializerId = 2;</code>
     * @return The serializerId.
     */
    int getSerializerId();

    /**
     * <code>optional bytes messageManifest = 3;</code>
     * @return Whether the messageManifest field is set.
     */
    boolean hasMessageManifest();
    /**
     * <code>optional bytes messageManifest = 3;</code>
     * @return The messageManifest.
     */
    org.apache.pekko.protobufv3.internal.ByteString getMessageManifest();

    /**
     * <code>required uint64 seqNo = 4;</code>
     * @return Whether the seqNo field is set.
     */
    boolean hasSeqNo();
    /**
     * <code>required uint64 seqNo = 4;</code>
     * @return The seqNo.
     */
    long getSeqNo();

    /**
     * <code>required .UniqueAddress ackReplyTo = 5;</code>
     * @return Whether the ackReplyTo field is set.
     */
    boolean hasAckReplyTo();
    /**
     * <code>required .UniqueAddress ackReplyTo = 5;</code>
     * @return The ackReplyTo.
     */
    org.apache.pekko.remote.ArteryControlFormats.UniqueAddress getAckReplyTo();
    /**
     * <code>required .UniqueAddress ackReplyTo = 5;</code>
     */
    org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder getAckReplyToOrBuilder();
  }
  /**
   * <pre>
   * SystemMessageDelivery.SystemMessageEnvelope
   * </pre>
   *
   * Protobuf type {@code SystemMessageEnvelope}
   */
  public static final class SystemMessageEnvelope extends
      org.apache.pekko.protobufv3.internal.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SystemMessageEnvelope)
      SystemMessageEnvelopeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SystemMessageEnvelope.newBuilder() to construct.
    private SystemMessageEnvelope(org.apache.pekko.protobufv3.internal.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SystemMessageEnvelope() {
      message_ = org.apache.pekko.protobufv3.internal.ByteString.EMPTY;
      messageManifest_ = org.apache.pekko.protobufv3.internal.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.UnusedPrivateParameter unused) {
      return new SystemMessageEnvelope();
    }

    public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.pekko.remote.ArteryControlFormats.internal_static_SystemMessageEnvelope_descriptor;
    }

    @java.lang.Override
    protected org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.pekko.remote.ArteryControlFormats.internal_static_SystemMessageEnvelope_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope.class, org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope.Builder.class);
    }

    private int bitField0_;
    public static final int MESSAGE_FIELD_NUMBER = 1;
    private org.apache.pekko.protobufv3.internal.ByteString message_ = org.apache.pekko.protobufv3.internal.ByteString.EMPTY;
    /**
     * <code>required bytes message = 1;</code>
     * @return Whether the message field is set.
     */
    @java.lang.Override
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required bytes message = 1;</code>
     * @return The message.
     */
    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.ByteString getMessage() {
      return message_;
    }

    public static final int SERIALIZERID_FIELD_NUMBER = 2;
    private int serializerId_ = 0;
    /**
     * <code>required int32 serializerId = 2;</code>
     * @return Whether the serializerId field is set.
     */
    @java.lang.Override
    public boolean hasSerializerId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>required int32 serializerId = 2;</code>
     * @return The serializerId.
     */
    @java.lang.Override
    public int getSerializerId() {
      return serializerId_;
    }

    public static final int MESSAGEMANIFEST_FIELD_NUMBER = 3;
    private org.apache.pekko.protobufv3.internal.ByteString messageManifest_ = org.apache.pekko.protobufv3.internal.ByteString.EMPTY;
    /**
     * <code>optional bytes messageManifest = 3;</code>
     * @return Whether the messageManifest field is set.
     */
    @java.lang.Override
    public boolean hasMessageManifest() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional bytes messageManifest = 3;</code>
     * @return The messageManifest.
     */
    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.ByteString getMessageManifest() {
      return messageManifest_;
    }

    public static final int SEQNO_FIELD_NUMBER = 4;
    private long seqNo_ = 0L;
    /**
     * <code>required uint64 seqNo = 4;</code>
     * @return Whether the seqNo field is set.
     */
    @java.lang.Override
    public boolean hasSeqNo() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>required uint64 seqNo = 4;</code>
     * @return The seqNo.
     */
    @java.lang.Override
    public long getSeqNo() {
      return seqNo_;
    }

    public static final int ACKREPLYTO_FIELD_NUMBER = 5;
    private org.apache.pekko.remote.ArteryControlFormats.UniqueAddress ackReplyTo_;
    /**
     * <code>required .UniqueAddress ackReplyTo = 5;</code>
     * @return Whether the ackReplyTo field is set.
     */
    @java.lang.Override
    public boolean hasAckReplyTo() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>required .UniqueAddress ackReplyTo = 5;</code>
     * @return The ackReplyTo.
     */
    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress getAckReplyTo() {
      return ackReplyTo_ == null ? org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : ackReplyTo_;
    }
    /**
     * <code>required .UniqueAddress ackReplyTo = 5;</code>
     */
    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder getAckReplyToOrBuilder() {
      return ackReplyTo_ == null ? org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : ackReplyTo_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMessage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSerializerId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSeqNo()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAckReplyTo()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getAckReplyTo().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.apache.pekko.protobufv3.internal.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBytes(1, message_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, serializerId_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBytes(3, messageManifest_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeUInt64(4, seqNo_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeMessage(5, getAckReplyTo());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeBytesSize(1, message_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeInt32Size(2, serializerId_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeBytesSize(3, messageManifest_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeUInt64Size(4, seqNo_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeMessageSize(5, getAckReplyTo());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope)) {
        return super.equals(obj);
      }
      org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope other = (org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope) obj;

      if (hasMessage() != other.hasMessage()) return false;
      if (hasMessage()) {
        if (!getMessage()
            .equals(other.getMessage())) return false;
      }
      if (hasSerializerId() != other.hasSerializerId()) return false;
      if (hasSerializerId()) {
        if (getSerializerId()
            != other.getSerializerId()) return false;
      }
      if (hasMessageManifest() != other.hasMessageManifest()) return false;
      if (hasMessageManifest()) {
        if (!getMessageManifest()
            .equals(other.getMessageManifest())) return false;
      }
      if (hasSeqNo() != other.hasSeqNo()) return false;
      if (hasSeqNo()) {
        if (getSeqNo()
            != other.getSeqNo()) return false;
      }
      if (hasAckReplyTo() != other.hasAckReplyTo()) return false;
      if (hasAckReplyTo()) {
        if (!getAckReplyTo()
            .equals(other.getAckReplyTo())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasMessage()) {
        hash = (37 * hash) + MESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getMessage().hashCode();
      }
      if (hasSerializerId()) {
        hash = (37 * hash) + SERIALIZERID_FIELD_NUMBER;
        hash = (53 * hash) + getSerializerId();
      }
      if (hasMessageManifest()) {
        hash = (37 * hash) + MESSAGEMANIFEST_FIELD_NUMBER;
        hash = (53 * hash) + getMessageManifest().hashCode();
      }
      if (hasSeqNo()) {
        hash = (37 * hash) + SEQNO_FIELD_NUMBER;
        hash = (53 * hash) + org.apache.pekko.protobufv3.internal.Internal.hashLong(
            getSeqNo());
      }
      if (hasAckReplyTo()) {
        hash = (37 * hash) + ACKREPLYTO_FIELD_NUMBER;
        hash = (53 * hash) + getAckReplyTo().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope parseFrom(
        java.nio.ByteBuffer data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope parseFrom(byte[] data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope parseFrom(
        byte[] data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope parseFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * SystemMessageDelivery.SystemMessageEnvelope
     * </pre>
     *
     * Protobuf type {@code SystemMessageEnvelope}
     */
    public static final class Builder extends
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SystemMessageEnvelope)
        org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelopeOrBuilder {
      public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_SystemMessageEnvelope_descriptor;
      }

      @java.lang.Override
      protected org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_SystemMessageEnvelope_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope.class, org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope.Builder.class);
      }

      // Construct using org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.pekko.protobufv3.internal.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.pekko.protobufv3.internal.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getAckReplyToFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        message_ = org.apache.pekko.protobufv3.internal.ByteString.EMPTY;
        serializerId_ = 0;
        messageManifest_ = org.apache.pekko.protobufv3.internal.ByteString.EMPTY;
        seqNo_ = 0L;
        ackReplyTo_ = null;
        if (ackReplyToBuilder_ != null) {
          ackReplyToBuilder_.dispose();
          ackReplyToBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_SystemMessageEnvelope_descriptor;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope getDefaultInstanceForType() {
        return org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope build() {
        org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope buildPartial() {
        org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope result = new org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.message_ = message_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.serializerId_ = serializerId_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.messageManifest_ = messageManifest_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.seqNo_ = seqNo_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.ackReplyTo_ = ackReplyToBuilder_ == null
              ? ackReplyTo_
              : ackReplyToBuilder_.build();
          to_bitField0_ |= 0x00000010;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          org.apache.pekko.protobufv3.internal.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(org.apache.pekko.protobufv3.internal.Message other) {
        if (other instanceof org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope) {
          return mergeFrom((org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope other) {
        if (other == org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope.getDefaultInstance()) return this;
        if (other.hasMessage()) {
          setMessage(other.getMessage());
        }
        if (other.hasSerializerId()) {
          setSerializerId(other.getSerializerId());
        }
        if (other.hasMessageManifest()) {
          setMessageManifest(other.getMessageManifest());
        }
        if (other.hasSeqNo()) {
          setSeqNo(other.getSeqNo());
        }
        if (other.hasAckReplyTo()) {
          mergeAckReplyTo(other.getAckReplyTo());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasMessage()) {
          return false;
        }
        if (!hasSerializerId()) {
          return false;
        }
        if (!hasSeqNo()) {
          return false;
        }
        if (!hasAckReplyTo()) {
          return false;
        }
        if (!getAckReplyTo().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                message_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                serializerId_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 26: {
                messageManifest_ = input.readBytes();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 32: {
                seqNo_ = input.readUInt64();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 42: {
                input.readMessage(
                    getAckReplyToFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.apache.pekko.protobufv3.internal.ByteString message_ = org.apache.pekko.protobufv3.internal.ByteString.EMPTY;
      /**
       * <code>required bytes message = 1;</code>
       * @return Whether the message field is set.
       */
      @java.lang.Override
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required bytes message = 1;</code>
       * @return The message.
       */
      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.ByteString getMessage() {
        return message_;
      }
      /**
       * <code>required bytes message = 1;</code>
       * @param value The message to set.
       * @return This builder for chaining.
       */
      public Builder setMessage(org.apache.pekko.protobufv3.internal.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        message_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes message = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearMessage() {
        bitField0_ = (bitField0_ & ~0x00000001);
        message_ = getDefaultInstance().getMessage();
        onChanged();
        return this;
      }

      private int serializerId_ ;
      /**
       * <code>required int32 serializerId = 2;</code>
       * @return Whether the serializerId field is set.
       */
      @java.lang.Override
      public boolean hasSerializerId() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>required int32 serializerId = 2;</code>
       * @return The serializerId.
       */
      @java.lang.Override
      public int getSerializerId() {
        return serializerId_;
      }
      /**
       * <code>required int32 serializerId = 2;</code>
       * @param value The serializerId to set.
       * @return This builder for chaining.
       */
      public Builder setSerializerId(int value) {

        serializerId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 serializerId = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSerializerId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        serializerId_ = 0;
        onChanged();
        return this;
      }

      private org.apache.pekko.protobufv3.internal.ByteString messageManifest_ = org.apache.pekko.protobufv3.internal.ByteString.EMPTY;
      /**
       * <code>optional bytes messageManifest = 3;</code>
       * @return Whether the messageManifest field is set.
       */
      @java.lang.Override
      public boolean hasMessageManifest() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional bytes messageManifest = 3;</code>
       * @return The messageManifest.
       */
      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.ByteString getMessageManifest() {
        return messageManifest_;
      }
      /**
       * <code>optional bytes messageManifest = 3;</code>
       * @param value The messageManifest to set.
       * @return This builder for chaining.
       */
      public Builder setMessageManifest(org.apache.pekko.protobufv3.internal.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        messageManifest_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes messageManifest = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearMessageManifest() {
        bitField0_ = (bitField0_ & ~0x00000004);
        messageManifest_ = getDefaultInstance().getMessageManifest();
        onChanged();
        return this;
      }

      private long seqNo_ ;
      /**
       * <code>required uint64 seqNo = 4;</code>
       * @return Whether the seqNo field is set.
       */
      @java.lang.Override
      public boolean hasSeqNo() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>required uint64 seqNo = 4;</code>
       * @return The seqNo.
       */
      @java.lang.Override
      public long getSeqNo() {
        return seqNo_;
      }
      /**
       * <code>required uint64 seqNo = 4;</code>
       * @param value The seqNo to set.
       * @return This builder for chaining.
       */
      public Builder setSeqNo(long value) {

        seqNo_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 seqNo = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearSeqNo() {
        bitField0_ = (bitField0_ & ~0x00000008);
        seqNo_ = 0L;
        onChanged();
        return this;
      }

      private org.apache.pekko.remote.ArteryControlFormats.UniqueAddress ackReplyTo_;
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
          org.apache.pekko.remote.ArteryControlFormats.UniqueAddress, org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder, org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder> ackReplyToBuilder_;
      /**
       * <code>required .UniqueAddress ackReplyTo = 5;</code>
       * @return Whether the ackReplyTo field is set.
       */
      public boolean hasAckReplyTo() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>required .UniqueAddress ackReplyTo = 5;</code>
       * @return The ackReplyTo.
       */
      public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress getAckReplyTo() {
        if (ackReplyToBuilder_ == null) {
          return ackReplyTo_ == null ? org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : ackReplyTo_;
        } else {
          return ackReplyToBuilder_.getMessage();
        }
      }
      /**
       * <code>required .UniqueAddress ackReplyTo = 5;</code>
       */
      public Builder setAckReplyTo(org.apache.pekko.remote.ArteryControlFormats.UniqueAddress value) {
        if (ackReplyToBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ackReplyTo_ = value;
        } else {
          ackReplyToBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>required .UniqueAddress ackReplyTo = 5;</code>
       */
      public Builder setAckReplyTo(
          org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder builderForValue) {
        if (ackReplyToBuilder_ == null) {
          ackReplyTo_ = builderForValue.build();
        } else {
          ackReplyToBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>required .UniqueAddress ackReplyTo = 5;</code>
       */
      public Builder mergeAckReplyTo(org.apache.pekko.remote.ArteryControlFormats.UniqueAddress value) {
        if (ackReplyToBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0) &&
            ackReplyTo_ != null &&
            ackReplyTo_ != org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance()) {
            getAckReplyToBuilder().mergeFrom(value);
          } else {
            ackReplyTo_ = value;
          }
        } else {
          ackReplyToBuilder_.mergeFrom(value);
        }
        if (ackReplyTo_ != null) {
          bitField0_ |= 0x00000010;
          onChanged();
        }
        return this;
      }
      /**
       * <code>required .UniqueAddress ackReplyTo = 5;</code>
       */
      public Builder clearAckReplyTo() {
        bitField0_ = (bitField0_ & ~0x00000010);
        ackReplyTo_ = null;
        if (ackReplyToBuilder_ != null) {
          ackReplyToBuilder_.dispose();
          ackReplyToBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>required .UniqueAddress ackReplyTo = 5;</code>
       */
      public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder getAckReplyToBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getAckReplyToFieldBuilder().getBuilder();
      }
      /**
       * <code>required .UniqueAddress ackReplyTo = 5;</code>
       */
      public org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder getAckReplyToOrBuilder() {
        if (ackReplyToBuilder_ != null) {
          return ackReplyToBuilder_.getMessageOrBuilder();
        } else {
          return ackReplyTo_ == null ?
              org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : ackReplyTo_;
        }
      }
      /**
       * <code>required .UniqueAddress ackReplyTo = 5;</code>
       */
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
          org.apache.pekko.remote.ArteryControlFormats.UniqueAddress, org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder, org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder> 
          getAckReplyToFieldBuilder() {
        if (ackReplyToBuilder_ == null) {
          ackReplyToBuilder_ = new org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
              org.apache.pekko.remote.ArteryControlFormats.UniqueAddress, org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder, org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder>(
                  getAckReplyTo(),
                  getParentForChildren(),
                  isClean());
          ackReplyTo_ = null;
        }
        return ackReplyToBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final org.apache.pekko.protobufv3.internal.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final org.apache.pekko.protobufv3.internal.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SystemMessageEnvelope)
    }

    // @@protoc_insertion_point(class_scope:SystemMessageEnvelope)
    private static final org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope();
    }

    public static org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final org.apache.pekko.protobufv3.internal.Parser<SystemMessageEnvelope>
        PARSER = new org.apache.pekko.protobufv3.internal.AbstractParser<SystemMessageEnvelope>() {
      @java.lang.Override
      public SystemMessageEnvelope parsePartialFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.apache.pekko.protobufv3.internal.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.apache.pekko.protobufv3.internal.Parser<SystemMessageEnvelope> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.Parser<SystemMessageEnvelope> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.SystemMessageEnvelope getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SystemMessageDeliveryAckOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SystemMessageDeliveryAck)
      org.apache.pekko.protobufv3.internal.MessageOrBuilder {

    /**
     * <code>required uint64 seqNo = 1;</code>
     * @return Whether the seqNo field is set.
     */
    boolean hasSeqNo();
    /**
     * <code>required uint64 seqNo = 1;</code>
     * @return The seqNo.
     */
    long getSeqNo();

    /**
     * <code>required .UniqueAddress from = 2;</code>
     * @return Whether the from field is set.
     */
    boolean hasFrom();
    /**
     * <code>required .UniqueAddress from = 2;</code>
     * @return The from.
     */
    org.apache.pekko.remote.ArteryControlFormats.UniqueAddress getFrom();
    /**
     * <code>required .UniqueAddress from = 2;</code>
     */
    org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder getFromOrBuilder();
  }
  /**
   * <pre>
   * SystemMessageDelivery.Ack
   * SystemMessageDelivery.Nack
   * </pre>
   *
   * Protobuf type {@code SystemMessageDeliveryAck}
   */
  public static final class SystemMessageDeliveryAck extends
      org.apache.pekko.protobufv3.internal.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SystemMessageDeliveryAck)
      SystemMessageDeliveryAckOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SystemMessageDeliveryAck.newBuilder() to construct.
    private SystemMessageDeliveryAck(org.apache.pekko.protobufv3.internal.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SystemMessageDeliveryAck() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.UnusedPrivateParameter unused) {
      return new SystemMessageDeliveryAck();
    }

    public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.pekko.remote.ArteryControlFormats.internal_static_SystemMessageDeliveryAck_descriptor;
    }

    @java.lang.Override
    protected org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.pekko.remote.ArteryControlFormats.internal_static_SystemMessageDeliveryAck_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck.class, org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck.Builder.class);
    }

    private int bitField0_;
    public static final int SEQNO_FIELD_NUMBER = 1;
    private long seqNo_ = 0L;
    /**
     * <code>required uint64 seqNo = 1;</code>
     * @return Whether the seqNo field is set.
     */
    @java.lang.Override
    public boolean hasSeqNo() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required uint64 seqNo = 1;</code>
     * @return The seqNo.
     */
    @java.lang.Override
    public long getSeqNo() {
      return seqNo_;
    }

    public static final int FROM_FIELD_NUMBER = 2;
    private org.apache.pekko.remote.ArteryControlFormats.UniqueAddress from_;
    /**
     * <code>required .UniqueAddress from = 2;</code>
     * @return Whether the from field is set.
     */
    @java.lang.Override
    public boolean hasFrom() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>required .UniqueAddress from = 2;</code>
     * @return The from.
     */
    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress getFrom() {
      return from_ == null ? org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : from_;
    }
    /**
     * <code>required .UniqueAddress from = 2;</code>
     */
    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder getFromOrBuilder() {
      return from_ == null ? org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : from_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSeqNo()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFrom()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getFrom().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.apache.pekko.protobufv3.internal.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt64(1, seqNo_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getFrom());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeUInt64Size(1, seqNo_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeMessageSize(2, getFrom());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck)) {
        return super.equals(obj);
      }
      org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck other = (org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck) obj;

      if (hasSeqNo() != other.hasSeqNo()) return false;
      if (hasSeqNo()) {
        if (getSeqNo()
            != other.getSeqNo()) return false;
      }
      if (hasFrom() != other.hasFrom()) return false;
      if (hasFrom()) {
        if (!getFrom()
            .equals(other.getFrom())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasSeqNo()) {
        hash = (37 * hash) + SEQNO_FIELD_NUMBER;
        hash = (53 * hash) + org.apache.pekko.protobufv3.internal.Internal.hashLong(
            getSeqNo());
      }
      if (hasFrom()) {
        hash = (37 * hash) + FROM_FIELD_NUMBER;
        hash = (53 * hash) + getFrom().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck parseFrom(
        java.nio.ByteBuffer data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck parseFrom(byte[] data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck parseFrom(
        byte[] data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck parseFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * SystemMessageDelivery.Ack
     * SystemMessageDelivery.Nack
     * </pre>
     *
     * Protobuf type {@code SystemMessageDeliveryAck}
     */
    public static final class Builder extends
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SystemMessageDeliveryAck)
        org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAckOrBuilder {
      public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_SystemMessageDeliveryAck_descriptor;
      }

      @java.lang.Override
      protected org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_SystemMessageDeliveryAck_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck.class, org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck.Builder.class);
      }

      // Construct using org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.pekko.protobufv3.internal.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.pekko.protobufv3.internal.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getFromFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        seqNo_ = 0L;
        from_ = null;
        if (fromBuilder_ != null) {
          fromBuilder_.dispose();
          fromBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_SystemMessageDeliveryAck_descriptor;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck getDefaultInstanceForType() {
        return org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck build() {
        org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck buildPartial() {
        org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck result = new org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.seqNo_ = seqNo_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.from_ = fromBuilder_ == null
              ? from_
              : fromBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          org.apache.pekko.protobufv3.internal.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(org.apache.pekko.protobufv3.internal.Message other) {
        if (other instanceof org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck) {
          return mergeFrom((org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck other) {
        if (other == org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck.getDefaultInstance()) return this;
        if (other.hasSeqNo()) {
          setSeqNo(other.getSeqNo());
        }
        if (other.hasFrom()) {
          mergeFrom(other.getFrom());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasSeqNo()) {
          return false;
        }
        if (!hasFrom()) {
          return false;
        }
        if (!getFrom().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                seqNo_ = input.readUInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getFromFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private long seqNo_ ;
      /**
       * <code>required uint64 seqNo = 1;</code>
       * @return Whether the seqNo field is set.
       */
      @java.lang.Override
      public boolean hasSeqNo() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required uint64 seqNo = 1;</code>
       * @return The seqNo.
       */
      @java.lang.Override
      public long getSeqNo() {
        return seqNo_;
      }
      /**
       * <code>required uint64 seqNo = 1;</code>
       * @param value The seqNo to set.
       * @return This builder for chaining.
       */
      public Builder setSeqNo(long value) {

        seqNo_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 seqNo = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearSeqNo() {
        bitField0_ = (bitField0_ & ~0x00000001);
        seqNo_ = 0L;
        onChanged();
        return this;
      }

      private org.apache.pekko.remote.ArteryControlFormats.UniqueAddress from_;
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
          org.apache.pekko.remote.ArteryControlFormats.UniqueAddress, org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder, org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder> fromBuilder_;
      /**
       * <code>required .UniqueAddress from = 2;</code>
       * @return Whether the from field is set.
       */
      public boolean hasFrom() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>required .UniqueAddress from = 2;</code>
       * @return The from.
       */
      public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress getFrom() {
        if (fromBuilder_ == null) {
          return from_ == null ? org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : from_;
        } else {
          return fromBuilder_.getMessage();
        }
      }
      /**
       * <code>required .UniqueAddress from = 2;</code>
       */
      public Builder setFrom(org.apache.pekko.remote.ArteryControlFormats.UniqueAddress value) {
        if (fromBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          from_ = value;
        } else {
          fromBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>required .UniqueAddress from = 2;</code>
       */
      public Builder setFrom(
          org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder builderForValue) {
        if (fromBuilder_ == null) {
          from_ = builderForValue.build();
        } else {
          fromBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>required .UniqueAddress from = 2;</code>
       */
      public Builder mergeFrom(org.apache.pekko.remote.ArteryControlFormats.UniqueAddress value) {
        if (fromBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            from_ != null &&
            from_ != org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance()) {
            getFromBuilder().mergeFrom(value);
          } else {
            from_ = value;
          }
        } else {
          fromBuilder_.mergeFrom(value);
        }
        if (from_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <code>required .UniqueAddress from = 2;</code>
       */
      public Builder clearFrom() {
        bitField0_ = (bitField0_ & ~0x00000002);
        from_ = null;
        if (fromBuilder_ != null) {
          fromBuilder_.dispose();
          fromBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>required .UniqueAddress from = 2;</code>
       */
      public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder getFromBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getFromFieldBuilder().getBuilder();
      }
      /**
       * <code>required .UniqueAddress from = 2;</code>
       */
      public org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder getFromOrBuilder() {
        if (fromBuilder_ != null) {
          return fromBuilder_.getMessageOrBuilder();
        } else {
          return from_ == null ?
              org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance() : from_;
        }
      }
      /**
       * <code>required .UniqueAddress from = 2;</code>
       */
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
          org.apache.pekko.remote.ArteryControlFormats.UniqueAddress, org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder, org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder> 
          getFromFieldBuilder() {
        if (fromBuilder_ == null) {
          fromBuilder_ = new org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
              org.apache.pekko.remote.ArteryControlFormats.UniqueAddress, org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder, org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder>(
                  getFrom(),
                  getParentForChildren(),
                  isClean());
          from_ = null;
        }
        return fromBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final org.apache.pekko.protobufv3.internal.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final org.apache.pekko.protobufv3.internal.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SystemMessageDeliveryAck)
    }

    // @@protoc_insertion_point(class_scope:SystemMessageDeliveryAck)
    private static final org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck();
    }

    public static org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final org.apache.pekko.protobufv3.internal.Parser<SystemMessageDeliveryAck>
        PARSER = new org.apache.pekko.protobufv3.internal.AbstractParser<SystemMessageDeliveryAck>() {
      @java.lang.Override
      public SystemMessageDeliveryAck parsePartialFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.apache.pekko.protobufv3.internal.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.apache.pekko.protobufv3.internal.Parser<SystemMessageDeliveryAck> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.Parser<SystemMessageDeliveryAck> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.SystemMessageDeliveryAck getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface AddressOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Address)
      org.apache.pekko.protobufv3.internal.MessageOrBuilder {

    /**
     * <code>required string protocol = 1;</code>
     * @return Whether the protocol field is set.
     */
    boolean hasProtocol();
    /**
     * <code>required string protocol = 1;</code>
     * @return The protocol.
     */
    java.lang.String getProtocol();
    /**
     * <code>required string protocol = 1;</code>
     * @return The bytes for protocol.
     */
    org.apache.pekko.protobufv3.internal.ByteString
        getProtocolBytes();

    /**
     * <code>required string system = 2;</code>
     * @return Whether the system field is set.
     */
    boolean hasSystem();
    /**
     * <code>required string system = 2;</code>
     * @return The system.
     */
    java.lang.String getSystem();
    /**
     * <code>required string system = 2;</code>
     * @return The bytes for system.
     */
    org.apache.pekko.protobufv3.internal.ByteString
        getSystemBytes();

    /**
     * <code>required string hostname = 3;</code>
     * @return Whether the hostname field is set.
     */
    boolean hasHostname();
    /**
     * <code>required string hostname = 3;</code>
     * @return The hostname.
     */
    java.lang.String getHostname();
    /**
     * <code>required string hostname = 3;</code>
     * @return The bytes for hostname.
     */
    org.apache.pekko.protobufv3.internal.ByteString
        getHostnameBytes();

    /**
     * <code>required uint32 port = 4;</code>
     * @return Whether the port field is set.
     */
    boolean hasPort();
    /**
     * <code>required uint32 port = 4;</code>
     * @return The port.
     */
    int getPort();
  }
  /**
   * <pre>
   **
   * Defines a remote address.
   * </pre>
   *
   * Protobuf type {@code Address}
   */
  public static final class Address extends
      org.apache.pekko.protobufv3.internal.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Address)
      AddressOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Address.newBuilder() to construct.
    private Address(org.apache.pekko.protobufv3.internal.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Address() {
      protocol_ = "";
      system_ = "";
      hostname_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.UnusedPrivateParameter unused) {
      return new Address();
    }

    public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.pekko.remote.ArteryControlFormats.internal_static_Address_descriptor;
    }

    @java.lang.Override
    protected org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.pekko.remote.ArteryControlFormats.internal_static_Address_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.pekko.remote.ArteryControlFormats.Address.class, org.apache.pekko.remote.ArteryControlFormats.Address.Builder.class);
    }

    private int bitField0_;
    public static final int PROTOCOL_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object protocol_ = "";
    /**
     * <code>required string protocol = 1;</code>
     * @return Whether the protocol field is set.
     */
    @java.lang.Override
    public boolean hasProtocol() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required string protocol = 1;</code>
     * @return The protocol.
     */
    @java.lang.Override
    public java.lang.String getProtocol() {
      java.lang.Object ref = protocol_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.apache.pekko.protobufv3.internal.ByteString bs = 
            (org.apache.pekko.protobufv3.internal.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          protocol_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string protocol = 1;</code>
     * @return The bytes for protocol.
     */
    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.ByteString
        getProtocolBytes() {
      java.lang.Object ref = protocol_;
      if (ref instanceof java.lang.String) {
        org.apache.pekko.protobufv3.internal.ByteString b = 
            org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        protocol_ = b;
        return b;
      } else {
        return (org.apache.pekko.protobufv3.internal.ByteString) ref;
      }
    }

    public static final int SYSTEM_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object system_ = "";
    /**
     * <code>required string system = 2;</code>
     * @return Whether the system field is set.
     */
    @java.lang.Override
    public boolean hasSystem() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>required string system = 2;</code>
     * @return The system.
     */
    @java.lang.Override
    public java.lang.String getSystem() {
      java.lang.Object ref = system_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.apache.pekko.protobufv3.internal.ByteString bs = 
            (org.apache.pekko.protobufv3.internal.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          system_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string system = 2;</code>
     * @return The bytes for system.
     */
    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.ByteString
        getSystemBytes() {
      java.lang.Object ref = system_;
      if (ref instanceof java.lang.String) {
        org.apache.pekko.protobufv3.internal.ByteString b = 
            org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        system_ = b;
        return b;
      } else {
        return (org.apache.pekko.protobufv3.internal.ByteString) ref;
      }
    }

    public static final int HOSTNAME_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object hostname_ = "";
    /**
     * <code>required string hostname = 3;</code>
     * @return Whether the hostname field is set.
     */
    @java.lang.Override
    public boolean hasHostname() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>required string hostname = 3;</code>
     * @return The hostname.
     */
    @java.lang.Override
    public java.lang.String getHostname() {
      java.lang.Object ref = hostname_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.apache.pekko.protobufv3.internal.ByteString bs = 
            (org.apache.pekko.protobufv3.internal.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          hostname_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string hostname = 3;</code>
     * @return The bytes for hostname.
     */
    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.ByteString
        getHostnameBytes() {
      java.lang.Object ref = hostname_;
      if (ref instanceof java.lang.String) {
        org.apache.pekko.protobufv3.internal.ByteString b = 
            org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        hostname_ = b;
        return b;
      } else {
        return (org.apache.pekko.protobufv3.internal.ByteString) ref;
      }
    }

    public static final int PORT_FIELD_NUMBER = 4;
    private int port_ = 0;
    /**
     * <code>required uint32 port = 4;</code>
     * @return Whether the port field is set.
     */
    @java.lang.Override
    public boolean hasPort() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>required uint32 port = 4;</code>
     * @return The port.
     */
    @java.lang.Override
    public int getPort() {
      return port_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasProtocol()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSystem()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHostname()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPort()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.apache.pekko.protobufv3.internal.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.writeString(output, 1, protocol_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.writeString(output, 2, system_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.writeString(output, 3, hostname_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeUInt32(4, port_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.apache.pekko.protobufv3.internal.GeneratedMessageV3.computeStringSize(1, protocol_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.apache.pekko.protobufv3.internal.GeneratedMessageV3.computeStringSize(2, system_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.apache.pekko.protobufv3.internal.GeneratedMessageV3.computeStringSize(3, hostname_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeUInt32Size(4, port_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.pekko.remote.ArteryControlFormats.Address)) {
        return super.equals(obj);
      }
      org.apache.pekko.remote.ArteryControlFormats.Address other = (org.apache.pekko.remote.ArteryControlFormats.Address) obj;

      if (hasProtocol() != other.hasProtocol()) return false;
      if (hasProtocol()) {
        if (!getProtocol()
            .equals(other.getProtocol())) return false;
      }
      if (hasSystem() != other.hasSystem()) return false;
      if (hasSystem()) {
        if (!getSystem()
            .equals(other.getSystem())) return false;
      }
      if (hasHostname() != other.hasHostname()) return false;
      if (hasHostname()) {
        if (!getHostname()
            .equals(other.getHostname())) return false;
      }
      if (hasPort() != other.hasPort()) return false;
      if (hasPort()) {
        if (getPort()
            != other.getPort()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasProtocol()) {
        hash = (37 * hash) + PROTOCOL_FIELD_NUMBER;
        hash = (53 * hash) + getProtocol().hashCode();
      }
      if (hasSystem()) {
        hash = (37 * hash) + SYSTEM_FIELD_NUMBER;
        hash = (53 * hash) + getSystem().hashCode();
      }
      if (hasHostname()) {
        hash = (37 * hash) + HOSTNAME_FIELD_NUMBER;
        hash = (53 * hash) + getHostname().hashCode();
      }
      if (hasPort()) {
        hash = (37 * hash) + PORT_FIELD_NUMBER;
        hash = (53 * hash) + getPort();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.pekko.remote.ArteryControlFormats.Address parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.Address parseFrom(
        java.nio.ByteBuffer data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.Address parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.Address parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.Address parseFrom(byte[] data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.Address parseFrom(
        byte[] data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.Address parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.Address parseFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.pekko.remote.ArteryControlFormats.Address parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.pekko.remote.ArteryControlFormats.Address parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.Address parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.Address parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.pekko.remote.ArteryControlFormats.Address prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     **
     * Defines a remote address.
     * </pre>
     *
     * Protobuf type {@code Address}
     */
    public static final class Builder extends
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Address)
        org.apache.pekko.remote.ArteryControlFormats.AddressOrBuilder {
      public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_Address_descriptor;
      }

      @java.lang.Override
      protected org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_Address_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.pekko.remote.ArteryControlFormats.Address.class, org.apache.pekko.remote.ArteryControlFormats.Address.Builder.class);
      }

      // Construct using org.apache.pekko.remote.ArteryControlFormats.Address.newBuilder()
      private Builder() {

      }

      private Builder(
          org.apache.pekko.protobufv3.internal.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        protocol_ = "";
        system_ = "";
        hostname_ = "";
        port_ = 0;
        return this;
      }

      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_Address_descriptor;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.Address getDefaultInstanceForType() {
        return org.apache.pekko.remote.ArteryControlFormats.Address.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.Address build() {
        org.apache.pekko.remote.ArteryControlFormats.Address result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.Address buildPartial() {
        org.apache.pekko.remote.ArteryControlFormats.Address result = new org.apache.pekko.remote.ArteryControlFormats.Address(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.pekko.remote.ArteryControlFormats.Address result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.protocol_ = protocol_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.system_ = system_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.hostname_ = hostname_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.port_ = port_;
          to_bitField0_ |= 0x00000008;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          org.apache.pekko.protobufv3.internal.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(org.apache.pekko.protobufv3.internal.Message other) {
        if (other instanceof org.apache.pekko.remote.ArteryControlFormats.Address) {
          return mergeFrom((org.apache.pekko.remote.ArteryControlFormats.Address)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.pekko.remote.ArteryControlFormats.Address other) {
        if (other == org.apache.pekko.remote.ArteryControlFormats.Address.getDefaultInstance()) return this;
        if (other.hasProtocol()) {
          protocol_ = other.protocol_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasSystem()) {
          system_ = other.system_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.hasHostname()) {
          hostname_ = other.hostname_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        if (other.hasPort()) {
          setPort(other.getPort());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasProtocol()) {
          return false;
        }
        if (!hasSystem()) {
          return false;
        }
        if (!hasHostname()) {
          return false;
        }
        if (!hasPort()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                protocol_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                system_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                hostname_ = input.readBytes();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 32: {
                port_ = input.readUInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object protocol_ = "";
      /**
       * <code>required string protocol = 1;</code>
       * @return Whether the protocol field is set.
       */
      public boolean hasProtocol() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required string protocol = 1;</code>
       * @return The protocol.
       */
      public java.lang.String getProtocol() {
        java.lang.Object ref = protocol_;
        if (!(ref instanceof java.lang.String)) {
          org.apache.pekko.protobufv3.internal.ByteString bs =
              (org.apache.pekko.protobufv3.internal.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            protocol_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string protocol = 1;</code>
       * @return The bytes for protocol.
       */
      public org.apache.pekko.protobufv3.internal.ByteString
          getProtocolBytes() {
        java.lang.Object ref = protocol_;
        if (ref instanceof String) {
          org.apache.pekko.protobufv3.internal.ByteString b = 
              org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          protocol_ = b;
          return b;
        } else {
          return (org.apache.pekko.protobufv3.internal.ByteString) ref;
        }
      }
      /**
       * <code>required string protocol = 1;</code>
       * @param value The protocol to set.
       * @return This builder for chaining.
       */
      public Builder setProtocol(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        protocol_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required string protocol = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearProtocol() {
        protocol_ = getDefaultInstance().getProtocol();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>required string protocol = 1;</code>
       * @param value The bytes for protocol to set.
       * @return This builder for chaining.
       */
      public Builder setProtocolBytes(
          org.apache.pekko.protobufv3.internal.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        protocol_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.lang.Object system_ = "";
      /**
       * <code>required string system = 2;</code>
       * @return Whether the system field is set.
       */
      public boolean hasSystem() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>required string system = 2;</code>
       * @return The system.
       */
      public java.lang.String getSystem() {
        java.lang.Object ref = system_;
        if (!(ref instanceof java.lang.String)) {
          org.apache.pekko.protobufv3.internal.ByteString bs =
              (org.apache.pekko.protobufv3.internal.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            system_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string system = 2;</code>
       * @return The bytes for system.
       */
      public org.apache.pekko.protobufv3.internal.ByteString
          getSystemBytes() {
        java.lang.Object ref = system_;
        if (ref instanceof String) {
          org.apache.pekko.protobufv3.internal.ByteString b = 
              org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          system_ = b;
          return b;
        } else {
          return (org.apache.pekko.protobufv3.internal.ByteString) ref;
        }
      }
      /**
       * <code>required string system = 2;</code>
       * @param value The system to set.
       * @return This builder for chaining.
       */
      public Builder setSystem(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        system_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>required string system = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSystem() {
        system_ = getDefaultInstance().getSystem();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <code>required string system = 2;</code>
       * @param value The bytes for system to set.
       * @return This builder for chaining.
       */
      public Builder setSystemBytes(
          org.apache.pekko.protobufv3.internal.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        system_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private java.lang.Object hostname_ = "";
      /**
       * <code>required string hostname = 3;</code>
       * @return Whether the hostname field is set.
       */
      public boolean hasHostname() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>required string hostname = 3;</code>
       * @return The hostname.
       */
      public java.lang.String getHostname() {
        java.lang.Object ref = hostname_;
        if (!(ref instanceof java.lang.String)) {
          org.apache.pekko.protobufv3.internal.ByteString bs =
              (org.apache.pekko.protobufv3.internal.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            hostname_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string hostname = 3;</code>
       * @return The bytes for hostname.
       */
      public org.apache.pekko.protobufv3.internal.ByteString
          getHostnameBytes() {
        java.lang.Object ref = hostname_;
        if (ref instanceof String) {
          org.apache.pekko.protobufv3.internal.ByteString b = 
              org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          hostname_ = b;
          return b;
        } else {
          return (org.apache.pekko.protobufv3.internal.ByteString) ref;
        }
      }
      /**
       * <code>required string hostname = 3;</code>
       * @param value The hostname to set.
       * @return This builder for chaining.
       */
      public Builder setHostname(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        hostname_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>required string hostname = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearHostname() {
        hostname_ = getDefaultInstance().getHostname();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <code>required string hostname = 3;</code>
       * @param value The bytes for hostname to set.
       * @return This builder for chaining.
       */
      public Builder setHostnameBytes(
          org.apache.pekko.protobufv3.internal.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        hostname_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private int port_ ;
      /**
       * <code>required uint32 port = 4;</code>
       * @return Whether the port field is set.
       */
      @java.lang.Override
      public boolean hasPort() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>required uint32 port = 4;</code>
       * @return The port.
       */
      @java.lang.Override
      public int getPort() {
        return port_;
      }
      /**
       * <code>required uint32 port = 4;</code>
       * @param value The port to set.
       * @return This builder for chaining.
       */
      public Builder setPort(int value) {

        port_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 port = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearPort() {
        bitField0_ = (bitField0_ & ~0x00000008);
        port_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final org.apache.pekko.protobufv3.internal.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final org.apache.pekko.protobufv3.internal.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Address)
    }

    // @@protoc_insertion_point(class_scope:Address)
    private static final org.apache.pekko.remote.ArteryControlFormats.Address DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.pekko.remote.ArteryControlFormats.Address();
    }

    public static org.apache.pekko.remote.ArteryControlFormats.Address getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final org.apache.pekko.protobufv3.internal.Parser<Address>
        PARSER = new org.apache.pekko.protobufv3.internal.AbstractParser<Address>() {
      @java.lang.Override
      public Address parsePartialFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.apache.pekko.protobufv3.internal.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.apache.pekko.protobufv3.internal.Parser<Address> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.Parser<Address> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.Address getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UniqueAddressOrBuilder extends
      // @@protoc_insertion_point(interface_extends:UniqueAddress)
      org.apache.pekko.protobufv3.internal.MessageOrBuilder {

    /**
     * <code>required .Address address = 1;</code>
     * @return Whether the address field is set.
     */
    boolean hasAddress();
    /**
     * <code>required .Address address = 1;</code>
     * @return The address.
     */
    org.apache.pekko.remote.ArteryControlFormats.Address getAddress();
    /**
     * <code>required .Address address = 1;</code>
     */
    org.apache.pekko.remote.ArteryControlFormats.AddressOrBuilder getAddressOrBuilder();

    /**
     * <code>required uint64 uid = 2;</code>
     * @return Whether the uid field is set.
     */
    boolean hasUid();
    /**
     * <code>required uint64 uid = 2;</code>
     * @return The uid.
     */
    long getUid();
  }
  /**
   * <pre>
   **
   * Defines a remote address with uid.
   * </pre>
   *
   * Protobuf type {@code UniqueAddress}
   */
  public static final class UniqueAddress extends
      org.apache.pekko.protobufv3.internal.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:UniqueAddress)
      UniqueAddressOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UniqueAddress.newBuilder() to construct.
    private UniqueAddress(org.apache.pekko.protobufv3.internal.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UniqueAddress() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.UnusedPrivateParameter unused) {
      return new UniqueAddress();
    }

    public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.pekko.remote.ArteryControlFormats.internal_static_UniqueAddress_descriptor;
    }

    @java.lang.Override
    protected org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.pekko.remote.ArteryControlFormats.internal_static_UniqueAddress_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.class, org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder.class);
    }

    private int bitField0_;
    public static final int ADDRESS_FIELD_NUMBER = 1;
    private org.apache.pekko.remote.ArteryControlFormats.Address address_;
    /**
     * <code>required .Address address = 1;</code>
     * @return Whether the address field is set.
     */
    @java.lang.Override
    public boolean hasAddress() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required .Address address = 1;</code>
     * @return The address.
     */
    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.Address getAddress() {
      return address_ == null ? org.apache.pekko.remote.ArteryControlFormats.Address.getDefaultInstance() : address_;
    }
    /**
     * <code>required .Address address = 1;</code>
     */
    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.AddressOrBuilder getAddressOrBuilder() {
      return address_ == null ? org.apache.pekko.remote.ArteryControlFormats.Address.getDefaultInstance() : address_;
    }

    public static final int UID_FIELD_NUMBER = 2;
    private long uid_ = 0L;
    /**
     * <code>required uint64 uid = 2;</code>
     * @return Whether the uid field is set.
     */
    @java.lang.Override
    public boolean hasUid() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>required uint64 uid = 2;</code>
     * @return The uid.
     */
    @java.lang.Override
    public long getUid() {
      return uid_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasAddress()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasUid()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getAddress().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.apache.pekko.protobufv3.internal.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getAddress());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeUInt64(2, uid_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeMessageSize(1, getAddress());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeUInt64Size(2, uid_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.pekko.remote.ArteryControlFormats.UniqueAddress)) {
        return super.equals(obj);
      }
      org.apache.pekko.remote.ArteryControlFormats.UniqueAddress other = (org.apache.pekko.remote.ArteryControlFormats.UniqueAddress) obj;

      if (hasAddress() != other.hasAddress()) return false;
      if (hasAddress()) {
        if (!getAddress()
            .equals(other.getAddress())) return false;
      }
      if (hasUid() != other.hasUid()) return false;
      if (hasUid()) {
        if (getUid()
            != other.getUid()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasAddress()) {
        hash = (37 * hash) + ADDRESS_FIELD_NUMBER;
        hash = (53 * hash) + getAddress().hashCode();
      }
      if (hasUid()) {
        hash = (37 * hash) + UID_FIELD_NUMBER;
        hash = (53 * hash) + org.apache.pekko.protobufv3.internal.Internal.hashLong(
            getUid());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.pekko.remote.ArteryControlFormats.UniqueAddress parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.UniqueAddress parseFrom(
        java.nio.ByteBuffer data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.UniqueAddress parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.UniqueAddress parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.UniqueAddress parseFrom(byte[] data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.UniqueAddress parseFrom(
        byte[] data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.UniqueAddress parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.UniqueAddress parseFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.pekko.remote.ArteryControlFormats.UniqueAddress parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.pekko.remote.ArteryControlFormats.UniqueAddress parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.UniqueAddress parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.UniqueAddress parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.pekko.remote.ArteryControlFormats.UniqueAddress prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     **
     * Defines a remote address with uid.
     * </pre>
     *
     * Protobuf type {@code UniqueAddress}
     */
    public static final class Builder extends
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:UniqueAddress)
        org.apache.pekko.remote.ArteryControlFormats.UniqueAddressOrBuilder {
      public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_UniqueAddress_descriptor;
      }

      @java.lang.Override
      protected org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_UniqueAddress_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.class, org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.Builder.class);
      }

      // Construct using org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.pekko.protobufv3.internal.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.pekko.protobufv3.internal.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getAddressFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        address_ = null;
        if (addressBuilder_ != null) {
          addressBuilder_.dispose();
          addressBuilder_ = null;
        }
        uid_ = 0L;
        return this;
      }

      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_UniqueAddress_descriptor;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress getDefaultInstanceForType() {
        return org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress build() {
        org.apache.pekko.remote.ArteryControlFormats.UniqueAddress result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress buildPartial() {
        org.apache.pekko.remote.ArteryControlFormats.UniqueAddress result = new org.apache.pekko.remote.ArteryControlFormats.UniqueAddress(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.pekko.remote.ArteryControlFormats.UniqueAddress result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.address_ = addressBuilder_ == null
              ? address_
              : addressBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.uid_ = uid_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          org.apache.pekko.protobufv3.internal.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(org.apache.pekko.protobufv3.internal.Message other) {
        if (other instanceof org.apache.pekko.remote.ArteryControlFormats.UniqueAddress) {
          return mergeFrom((org.apache.pekko.remote.ArteryControlFormats.UniqueAddress)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.pekko.remote.ArteryControlFormats.UniqueAddress other) {
        if (other == org.apache.pekko.remote.ArteryControlFormats.UniqueAddress.getDefaultInstance()) return this;
        if (other.hasAddress()) {
          mergeAddress(other.getAddress());
        }
        if (other.hasUid()) {
          setUid(other.getUid());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasAddress()) {
          return false;
        }
        if (!hasUid()) {
          return false;
        }
        if (!getAddress().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getAddressFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                uid_ = input.readUInt64();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.apache.pekko.remote.ArteryControlFormats.Address address_;
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
          org.apache.pekko.remote.ArteryControlFormats.Address, org.apache.pekko.remote.ArteryControlFormats.Address.Builder, org.apache.pekko.remote.ArteryControlFormats.AddressOrBuilder> addressBuilder_;
      /**
       * <code>required .Address address = 1;</code>
       * @return Whether the address field is set.
       */
      public boolean hasAddress() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required .Address address = 1;</code>
       * @return The address.
       */
      public org.apache.pekko.remote.ArteryControlFormats.Address getAddress() {
        if (addressBuilder_ == null) {
          return address_ == null ? org.apache.pekko.remote.ArteryControlFormats.Address.getDefaultInstance() : address_;
        } else {
          return addressBuilder_.getMessage();
        }
      }
      /**
       * <code>required .Address address = 1;</code>
       */
      public Builder setAddress(org.apache.pekko.remote.ArteryControlFormats.Address value) {
        if (addressBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          address_ = value;
        } else {
          addressBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .Address address = 1;</code>
       */
      public Builder setAddress(
          org.apache.pekko.remote.ArteryControlFormats.Address.Builder builderForValue) {
        if (addressBuilder_ == null) {
          address_ = builderForValue.build();
        } else {
          addressBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required .Address address = 1;</code>
       */
      public Builder mergeAddress(org.apache.pekko.remote.ArteryControlFormats.Address value) {
        if (addressBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            address_ != null &&
            address_ != org.apache.pekko.remote.ArteryControlFormats.Address.getDefaultInstance()) {
            getAddressBuilder().mergeFrom(value);
          } else {
            address_ = value;
          }
        } else {
          addressBuilder_.mergeFrom(value);
        }
        if (address_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>required .Address address = 1;</code>
       */
      public Builder clearAddress() {
        bitField0_ = (bitField0_ & ~0x00000001);
        address_ = null;
        if (addressBuilder_ != null) {
          addressBuilder_.dispose();
          addressBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>required .Address address = 1;</code>
       */
      public org.apache.pekko.remote.ArteryControlFormats.Address.Builder getAddressBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getAddressFieldBuilder().getBuilder();
      }
      /**
       * <code>required .Address address = 1;</code>
       */
      public org.apache.pekko.remote.ArteryControlFormats.AddressOrBuilder getAddressOrBuilder() {
        if (addressBuilder_ != null) {
          return addressBuilder_.getMessageOrBuilder();
        } else {
          return address_ == null ?
              org.apache.pekko.remote.ArteryControlFormats.Address.getDefaultInstance() : address_;
        }
      }
      /**
       * <code>required .Address address = 1;</code>
       */
      private org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
          org.apache.pekko.remote.ArteryControlFormats.Address, org.apache.pekko.remote.ArteryControlFormats.Address.Builder, org.apache.pekko.remote.ArteryControlFormats.AddressOrBuilder> 
          getAddressFieldBuilder() {
        if (addressBuilder_ == null) {
          addressBuilder_ = new org.apache.pekko.protobufv3.internal.SingleFieldBuilderV3<
              org.apache.pekko.remote.ArteryControlFormats.Address, org.apache.pekko.remote.ArteryControlFormats.Address.Builder, org.apache.pekko.remote.ArteryControlFormats.AddressOrBuilder>(
                  getAddress(),
                  getParentForChildren(),
                  isClean());
          address_ = null;
        }
        return addressBuilder_;
      }

      private long uid_ ;
      /**
       * <code>required uint64 uid = 2;</code>
       * @return Whether the uid field is set.
       */
      @java.lang.Override
      public boolean hasUid() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>required uint64 uid = 2;</code>
       * @return The uid.
       */
      @java.lang.Override
      public long getUid() {
        return uid_;
      }
      /**
       * <code>required uint64 uid = 2;</code>
       * @param value The uid to set.
       * @return This builder for chaining.
       */
      public Builder setUid(long value) {

        uid_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 uid = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearUid() {
        bitField0_ = (bitField0_ & ~0x00000002);
        uid_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final org.apache.pekko.protobufv3.internal.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final org.apache.pekko.protobufv3.internal.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:UniqueAddress)
    }

    // @@protoc_insertion_point(class_scope:UniqueAddress)
    private static final org.apache.pekko.remote.ArteryControlFormats.UniqueAddress DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.pekko.remote.ArteryControlFormats.UniqueAddress();
    }

    public static org.apache.pekko.remote.ArteryControlFormats.UniqueAddress getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final org.apache.pekko.protobufv3.internal.Parser<UniqueAddress>
        PARSER = new org.apache.pekko.protobufv3.internal.AbstractParser<UniqueAddress>() {
      @java.lang.Override
      public UniqueAddress parsePartialFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.apache.pekko.protobufv3.internal.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.apache.pekko.protobufv3.internal.Parser<UniqueAddress> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.Parser<UniqueAddress> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.UniqueAddress getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ArteryHeartbeatRspOrBuilder extends
      // @@protoc_insertion_point(interface_extends:ArteryHeartbeatRsp)
      org.apache.pekko.protobufv3.internal.MessageOrBuilder {

    /**
     * <code>required uint64 uid = 1;</code>
     * @return Whether the uid field is set.
     */
    boolean hasUid();
    /**
     * <code>required uint64 uid = 1;</code>
     * @return The uid.
     */
    long getUid();
  }
  /**
   * <pre>
   * RemoteWatcher.ArteryHeartbeat is empty array
   * RemoteWatcher.ArteryHeartbeatRsp
   * </pre>
   *
   * Protobuf type {@code ArteryHeartbeatRsp}
   */
  public static final class ArteryHeartbeatRsp extends
      org.apache.pekko.protobufv3.internal.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:ArteryHeartbeatRsp)
      ArteryHeartbeatRspOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ArteryHeartbeatRsp.newBuilder() to construct.
    private ArteryHeartbeatRsp(org.apache.pekko.protobufv3.internal.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ArteryHeartbeatRsp() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.UnusedPrivateParameter unused) {
      return new ArteryHeartbeatRsp();
    }

    public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.pekko.remote.ArteryControlFormats.internal_static_ArteryHeartbeatRsp_descriptor;
    }

    @java.lang.Override
    protected org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.pekko.remote.ArteryControlFormats.internal_static_ArteryHeartbeatRsp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp.class, org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp.Builder.class);
    }

    private int bitField0_;
    public static final int UID_FIELD_NUMBER = 1;
    private long uid_ = 0L;
    /**
     * <code>required uint64 uid = 1;</code>
     * @return Whether the uid field is set.
     */
    @java.lang.Override
    public boolean hasUid() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required uint64 uid = 1;</code>
     * @return The uid.
     */
    @java.lang.Override
    public long getUid() {
      return uid_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasUid()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.apache.pekko.protobufv3.internal.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt64(1, uid_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeUInt64Size(1, uid_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp)) {
        return super.equals(obj);
      }
      org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp other = (org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp) obj;

      if (hasUid() != other.hasUid()) return false;
      if (hasUid()) {
        if (getUid()
            != other.getUid()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasUid()) {
        hash = (37 * hash) + UID_FIELD_NUMBER;
        hash = (53 * hash) + org.apache.pekko.protobufv3.internal.Internal.hashLong(
            getUid());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp parseFrom(
        java.nio.ByteBuffer data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp parseFrom(byte[] data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp parseFrom(
        byte[] data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp parseFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * RemoteWatcher.ArteryHeartbeat is empty array
     * RemoteWatcher.ArteryHeartbeatRsp
     * </pre>
     *
     * Protobuf type {@code ArteryHeartbeatRsp}
     */
    public static final class Builder extends
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:ArteryHeartbeatRsp)
        org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRspOrBuilder {
      public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_ArteryHeartbeatRsp_descriptor;
      }

      @java.lang.Override
      protected org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_ArteryHeartbeatRsp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp.class, org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp.Builder.class);
      }

      // Construct using org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp.newBuilder()
      private Builder() {

      }

      private Builder(
          org.apache.pekko.protobufv3.internal.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        uid_ = 0L;
        return this;
      }

      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_ArteryHeartbeatRsp_descriptor;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp getDefaultInstanceForType() {
        return org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp build() {
        org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp buildPartial() {
        org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp result = new org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.uid_ = uid_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          org.apache.pekko.protobufv3.internal.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(org.apache.pekko.protobufv3.internal.Message other) {
        if (other instanceof org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp) {
          return mergeFrom((org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp other) {
        if (other == org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp.getDefaultInstance()) return this;
        if (other.hasUid()) {
          setUid(other.getUid());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasUid()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                uid_ = input.readUInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private long uid_ ;
      /**
       * <code>required uint64 uid = 1;</code>
       * @return Whether the uid field is set.
       */
      @java.lang.Override
      public boolean hasUid() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required uint64 uid = 1;</code>
       * @return The uid.
       */
      @java.lang.Override
      public long getUid() {
        return uid_;
      }
      /**
       * <code>required uint64 uid = 1;</code>
       * @param value The uid to set.
       * @return This builder for chaining.
       */
      public Builder setUid(long value) {

        uid_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 uid = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearUid() {
        bitField0_ = (bitField0_ & ~0x00000001);
        uid_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final org.apache.pekko.protobufv3.internal.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final org.apache.pekko.protobufv3.internal.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:ArteryHeartbeatRsp)
    }

    // @@protoc_insertion_point(class_scope:ArteryHeartbeatRsp)
    private static final org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp();
    }

    public static org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final org.apache.pekko.protobufv3.internal.Parser<ArteryHeartbeatRsp>
        PARSER = new org.apache.pekko.protobufv3.internal.AbstractParser<ArteryHeartbeatRsp>() {
      @java.lang.Override
      public ArteryHeartbeatRsp parsePartialFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.apache.pekko.protobufv3.internal.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.apache.pekko.protobufv3.internal.Parser<ArteryHeartbeatRsp> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.Parser<ArteryHeartbeatRsp> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.ArteryHeartbeatRsp getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FlushAckOrBuilder extends
      // @@protoc_insertion_point(interface_extends:FlushAck)
      org.apache.pekko.protobufv3.internal.MessageOrBuilder {

    /**
     * <code>optional int32 expectedAcks = 1;</code>
     * @return Whether the expectedAcks field is set.
     */
    boolean hasExpectedAcks();
    /**
     * <code>optional int32 expectedAcks = 1;</code>
     * @return The expectedAcks.
     */
    int getExpectedAcks();
  }
  /**
   * Protobuf type {@code FlushAck}
   */
  public static final class FlushAck extends
      org.apache.pekko.protobufv3.internal.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:FlushAck)
      FlushAckOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FlushAck.newBuilder() to construct.
    private FlushAck(org.apache.pekko.protobufv3.internal.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FlushAck() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.UnusedPrivateParameter unused) {
      return new FlushAck();
    }

    public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.pekko.remote.ArteryControlFormats.internal_static_FlushAck_descriptor;
    }

    @java.lang.Override
    protected org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.pekko.remote.ArteryControlFormats.internal_static_FlushAck_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.pekko.remote.ArteryControlFormats.FlushAck.class, org.apache.pekko.remote.ArteryControlFormats.FlushAck.Builder.class);
    }

    private int bitField0_;
    public static final int EXPECTEDACKS_FIELD_NUMBER = 1;
    private int expectedAcks_ = 0;
    /**
     * <code>optional int32 expectedAcks = 1;</code>
     * @return Whether the expectedAcks field is set.
     */
    @java.lang.Override
    public boolean hasExpectedAcks() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional int32 expectedAcks = 1;</code>
     * @return The expectedAcks.
     */
    @java.lang.Override
    public int getExpectedAcks() {
      return expectedAcks_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.apache.pekko.protobufv3.internal.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, expectedAcks_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeInt32Size(1, expectedAcks_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.pekko.remote.ArteryControlFormats.FlushAck)) {
        return super.equals(obj);
      }
      org.apache.pekko.remote.ArteryControlFormats.FlushAck other = (org.apache.pekko.remote.ArteryControlFormats.FlushAck) obj;

      if (hasExpectedAcks() != other.hasExpectedAcks()) return false;
      if (hasExpectedAcks()) {
        if (getExpectedAcks()
            != other.getExpectedAcks()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasExpectedAcks()) {
        hash = (37 * hash) + EXPECTEDACKS_FIELD_NUMBER;
        hash = (53 * hash) + getExpectedAcks();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.pekko.remote.ArteryControlFormats.FlushAck parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.FlushAck parseFrom(
        java.nio.ByteBuffer data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.FlushAck parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.FlushAck parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.FlushAck parseFrom(byte[] data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.FlushAck parseFrom(
        byte[] data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.FlushAck parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.FlushAck parseFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.pekko.remote.ArteryControlFormats.FlushAck parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.pekko.remote.ArteryControlFormats.FlushAck parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.FlushAck parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.pekko.remote.ArteryControlFormats.FlushAck parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.pekko.remote.ArteryControlFormats.FlushAck prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code FlushAck}
     */
    public static final class Builder extends
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:FlushAck)
        org.apache.pekko.remote.ArteryControlFormats.FlushAckOrBuilder {
      public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_FlushAck_descriptor;
      }

      @java.lang.Override
      protected org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_FlushAck_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.pekko.remote.ArteryControlFormats.FlushAck.class, org.apache.pekko.remote.ArteryControlFormats.FlushAck.Builder.class);
      }

      // Construct using org.apache.pekko.remote.ArteryControlFormats.FlushAck.newBuilder()
      private Builder() {

      }

      private Builder(
          org.apache.pekko.protobufv3.internal.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        expectedAcks_ = 0;
        return this;
      }

      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.pekko.remote.ArteryControlFormats.internal_static_FlushAck_descriptor;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.FlushAck getDefaultInstanceForType() {
        return org.apache.pekko.remote.ArteryControlFormats.FlushAck.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.FlushAck build() {
        org.apache.pekko.remote.ArteryControlFormats.FlushAck result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.pekko.remote.ArteryControlFormats.FlushAck buildPartial() {
        org.apache.pekko.remote.ArteryControlFormats.FlushAck result = new org.apache.pekko.remote.ArteryControlFormats.FlushAck(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.pekko.remote.ArteryControlFormats.FlushAck result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.expectedAcks_ = expectedAcks_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          org.apache.pekko.protobufv3.internal.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(org.apache.pekko.protobufv3.internal.Message other) {
        if (other instanceof org.apache.pekko.remote.ArteryControlFormats.FlushAck) {
          return mergeFrom((org.apache.pekko.remote.ArteryControlFormats.FlushAck)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.pekko.remote.ArteryControlFormats.FlushAck other) {
        if (other == org.apache.pekko.remote.ArteryControlFormats.FlushAck.getDefaultInstance()) return this;
        if (other.hasExpectedAcks()) {
          setExpectedAcks(other.getExpectedAcks());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                expectedAcks_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int expectedAcks_ ;
      /**
       * <code>optional int32 expectedAcks = 1;</code>
       * @return Whether the expectedAcks field is set.
       */
      @java.lang.Override
      public boolean hasExpectedAcks() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional int32 expectedAcks = 1;</code>
       * @return The expectedAcks.
       */
      @java.lang.Override
      public int getExpectedAcks() {
        return expectedAcks_;
      }
      /**
       * <code>optional int32 expectedAcks = 1;</code>
       * @param value The expectedAcks to set.
       * @return This builder for chaining.
       */
      public Builder setExpectedAcks(int value) {

        expectedAcks_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 expectedAcks = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearExpectedAcks() {
        bitField0_ = (bitField0_ & ~0x00000001);
        expectedAcks_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final org.apache.pekko.protobufv3.internal.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final org.apache.pekko.protobufv3.internal.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:FlushAck)
    }

    // @@protoc_insertion_point(class_scope:FlushAck)
    private static final org.apache.pekko.remote.ArteryControlFormats.FlushAck DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.pekko.remote.ArteryControlFormats.FlushAck();
    }

    public static org.apache.pekko.remote.ArteryControlFormats.FlushAck getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final org.apache.pekko.protobufv3.internal.Parser<FlushAck>
        PARSER = new org.apache.pekko.protobufv3.internal.AbstractParser<FlushAck>() {
      @java.lang.Override
      public FlushAck parsePartialFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.apache.pekko.protobufv3.internal.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.apache.pekko.protobufv3.internal.Parser<FlushAck> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.Parser<FlushAck> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.remote.ArteryControlFormats.FlushAck getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
    internal_static_Quarantined_descriptor;
  private static final 
    org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
      internal_static_Quarantined_fieldAccessorTable;
  private static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
    internal_static_MessageWithAddress_descriptor;
  private static final 
    org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
      internal_static_MessageWithAddress_fieldAccessorTable;
  private static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
    internal_static_HandshakeReq_descriptor;
  private static final 
    org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
      internal_static_HandshakeReq_fieldAccessorTable;
  private static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
    internal_static_CompressionTableAdvertisement_descriptor;
  private static final 
    org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
      internal_static_CompressionTableAdvertisement_fieldAccessorTable;
  private static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
    internal_static_CompressionTableAdvertisementAck_descriptor;
  private static final 
    org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
      internal_static_CompressionTableAdvertisementAck_fieldAccessorTable;
  private static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
    internal_static_SystemMessageEnvelope_descriptor;
  private static final 
    org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
      internal_static_SystemMessageEnvelope_fieldAccessorTable;
  private static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
    internal_static_SystemMessageDeliveryAck_descriptor;
  private static final 
    org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
      internal_static_SystemMessageDeliveryAck_fieldAccessorTable;
  private static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
    internal_static_Address_descriptor;
  private static final 
    org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
      internal_static_Address_fieldAccessorTable;
  private static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
    internal_static_UniqueAddress_descriptor;
  private static final 
    org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
      internal_static_UniqueAddress_fieldAccessorTable;
  private static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
    internal_static_ArteryHeartbeatRsp_descriptor;
  private static final 
    org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
      internal_static_ArteryHeartbeatRsp_fieldAccessorTable;
  private static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
    internal_static_FlushAck_descriptor;
  private static final 
    org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
      internal_static_FlushAck_fieldAccessorTable;

  public static org.apache.pekko.protobufv3.internal.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  org.apache.pekko.protobufv3.internal.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\032ArteryControlFormats.proto\"G\n\013Quaranti" +
      "ned\022\034\n\004from\030\001 \002(\0132\016.UniqueAddress\022\032\n\002to\030" +
      "\002 \002(\0132\016.UniqueAddress\"5\n\022MessageWithAddr" +
      "ess\022\037\n\007address\030\001 \002(\0132\016.UniqueAddress\"B\n\014" +
      "HandshakeReq\022\034\n\004from\030\001 \002(\0132\016.UniqueAddre" +
      "ss\022\024\n\002to\030\002 \002(\0132\010.Address\"\204\001\n\035Compression" +
      "TableAdvertisement\022\034\n\004from\030\001 \002(\0132\016.Uniqu" +
      "eAddress\022\021\n\toriginUid\030\002 \002(\004\022\024\n\014tableVers" +
      "ion\030\003 \002(\r\022\014\n\004keys\030\004 \003(\t\022\016\n\006values\030\005 \003(\r\"" +
      "Q\n CompressionTableAdvertisementAck\022\034\n\004f" +
      "rom\030\001 \002(\0132\016.UniqueAddress\022\017\n\007version\030\002 \002" +
      "(\r\"\212\001\n\025SystemMessageEnvelope\022\017\n\007message\030" +
      "\001 \002(\014\022\024\n\014serializerId\030\002 \002(\005\022\027\n\017messageMa" +
      "nifest\030\003 \001(\014\022\r\n\005seqNo\030\004 \002(\004\022\"\n\nackReplyT" +
      "o\030\005 \002(\0132\016.UniqueAddress\"G\n\030SystemMessage" +
      "DeliveryAck\022\r\n\005seqNo\030\001 \002(\004\022\034\n\004from\030\002 \002(\013" +
      "2\016.UniqueAddress\"K\n\007Address\022\020\n\010protocol\030" +
      "\001 \002(\t\022\016\n\006system\030\002 \002(\t\022\020\n\010hostname\030\003 \002(\t\022" +
      "\014\n\004port\030\004 \002(\r\"7\n\rUniqueAddress\022\031\n\007addres" +
      "s\030\001 \002(\0132\010.Address\022\013\n\003uid\030\002 \002(\004\"!\n\022Artery" +
      "HeartbeatRsp\022\013\n\003uid\030\001 \002(\004\" \n\010FlushAck\022\024\n" +
      "\014expectedAcks\030\001 \001(\005B\033\n\027org.apache.pekko." +
      "remoteH\001"
    };
    descriptor = org.apache.pekko.protobufv3.internal.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new org.apache.pekko.protobufv3.internal.Descriptors.FileDescriptor[] {
        });
    internal_static_Quarantined_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_Quarantined_fieldAccessorTable = new
      org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Quarantined_descriptor,
        new java.lang.String[] { "From", "To", });
    internal_static_MessageWithAddress_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_MessageWithAddress_fieldAccessorTable = new
      org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable(
        internal_static_MessageWithAddress_descriptor,
        new java.lang.String[] { "Address", });
    internal_static_HandshakeReq_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_HandshakeReq_fieldAccessorTable = new
      org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable(
        internal_static_HandshakeReq_descriptor,
        new java.lang.String[] { "From", "To", });
    internal_static_CompressionTableAdvertisement_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_CompressionTableAdvertisement_fieldAccessorTable = new
      org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable(
        internal_static_CompressionTableAdvertisement_descriptor,
        new java.lang.String[] { "From", "OriginUid", "TableVersion", "Keys", "Values", });
    internal_static_CompressionTableAdvertisementAck_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_CompressionTableAdvertisementAck_fieldAccessorTable = new
      org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable(
        internal_static_CompressionTableAdvertisementAck_descriptor,
        new java.lang.String[] { "From", "Version", });
    internal_static_SystemMessageEnvelope_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_SystemMessageEnvelope_fieldAccessorTable = new
      org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SystemMessageEnvelope_descriptor,
        new java.lang.String[] { "Message", "SerializerId", "MessageManifest", "SeqNo", "AckReplyTo", });
    internal_static_SystemMessageDeliveryAck_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_SystemMessageDeliveryAck_fieldAccessorTable = new
      org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SystemMessageDeliveryAck_descriptor,
        new java.lang.String[] { "SeqNo", "From", });
    internal_static_Address_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_Address_fieldAccessorTable = new
      org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Address_descriptor,
        new java.lang.String[] { "Protocol", "System", "Hostname", "Port", });
    internal_static_UniqueAddress_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_UniqueAddress_fieldAccessorTable = new
      org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable(
        internal_static_UniqueAddress_descriptor,
        new java.lang.String[] { "Address", "Uid", });
    internal_static_ArteryHeartbeatRsp_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_ArteryHeartbeatRsp_fieldAccessorTable = new
      org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable(
        internal_static_ArteryHeartbeatRsp_descriptor,
        new java.lang.String[] { "Uid", });
    internal_static_FlushAck_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_FlushAck_fieldAccessorTable = new
      org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable(
        internal_static_FlushAck_descriptor,
        new java.lang.String[] { "ExpectedAcks", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
