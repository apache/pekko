/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * license agreements; and to You under the Apache License, version 2.0:
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * This file is part of the Apache Pekko project, which was derived from Akka.
 */

/*
 * Copyright (C) 2019-2022 Lightbend Inc. <https://www.lightbend.com>
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FlightAppModels.proto

// Protobuf Java Version: 3.25.6
package docs.persistence.proto;

public final class FlightAppModels {
  private FlightAppModels() {}
  public static void registerAllExtensions(
      org.apache.pekko.protobufv3.internal.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      org.apache.pekko.protobufv3.internal.ExtensionRegistry registry) {
    registerAllExtensions(
        (org.apache.pekko.protobufv3.internal.ExtensionRegistryLite) registry);
  }
  public interface SeatReservedOrBuilder extends
      // @@protoc_insertion_point(interface_extends:docs.persistence.SeatReserved)
      org.apache.pekko.protobufv3.internal.MessageOrBuilder {

    /**
     * <code>required string letter = 1;</code>
     * @return Whether the letter field is set.
     */
    boolean hasLetter();
    /**
     * <code>required string letter = 1;</code>
     * @return The letter.
     */
    java.lang.String getLetter();
    /**
     * <code>required string letter = 1;</code>
     * @return The bytes for letter.
     */
    org.apache.pekko.protobufv3.internal.ByteString
        getLetterBytes();

    /**
     * <code>required uint32 row = 2;</code>
     * @return Whether the row field is set.
     */
    boolean hasRow();
    /**
     * <code>required uint32 row = 2;</code>
     * @return The row.
     */
    int getRow();

    /**
     * <pre>
     * the new field
     * </pre>
     *
     * <code>optional string seatType = 3;</code>
     * @return Whether the seatType field is set.
     */
    boolean hasSeatType();
    /**
     * <pre>
     * the new field
     * </pre>
     *
     * <code>optional string seatType = 3;</code>
     * @return The seatType.
     */
    java.lang.String getSeatType();
    /**
     * <pre>
     * the new field
     * </pre>
     *
     * <code>optional string seatType = 3;</code>
     * @return The bytes for seatType.
     */
    org.apache.pekko.protobufv3.internal.ByteString
        getSeatTypeBytes();
  }
  /**
   * Protobuf type {@code docs.persistence.SeatReserved}
   */
  public static final class SeatReserved extends
      org.apache.pekko.protobufv3.internal.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:docs.persistence.SeatReserved)
      SeatReservedOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SeatReserved.newBuilder() to construct.
    private SeatReserved(org.apache.pekko.protobufv3.internal.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SeatReserved() {
      letter_ = "";
      seatType_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.UnusedPrivateParameter unused) {
      return new SeatReserved();
    }

    public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
        getDescriptor() {
      return docs.persistence.proto.FlightAppModels.internal_static_docs_persistence_SeatReserved_descriptor;
    }

    @java.lang.Override
    protected org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return docs.persistence.proto.FlightAppModels.internal_static_docs_persistence_SeatReserved_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              docs.persistence.proto.FlightAppModels.SeatReserved.class, docs.persistence.proto.FlightAppModels.SeatReserved.Builder.class);
    }

    private int bitField0_;
    public static final int LETTER_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object letter_ = "";
    /**
     * <code>required string letter = 1;</code>
     * @return Whether the letter field is set.
     */
    @java.lang.Override
    public boolean hasLetter() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required string letter = 1;</code>
     * @return The letter.
     */
    @java.lang.Override
    public java.lang.String getLetter() {
      java.lang.Object ref = letter_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.apache.pekko.protobufv3.internal.ByteString bs = 
            (org.apache.pekko.protobufv3.internal.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          letter_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string letter = 1;</code>
     * @return The bytes for letter.
     */
    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.ByteString
        getLetterBytes() {
      java.lang.Object ref = letter_;
      if (ref instanceof java.lang.String) {
        org.apache.pekko.protobufv3.internal.ByteString b = 
            org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        letter_ = b;
        return b;
      } else {
        return (org.apache.pekko.protobufv3.internal.ByteString) ref;
      }
    }

    public static final int ROW_FIELD_NUMBER = 2;
    private int row_ = 0;
    /**
     * <code>required uint32 row = 2;</code>
     * @return Whether the row field is set.
     */
    @java.lang.Override
    public boolean hasRow() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>required uint32 row = 2;</code>
     * @return The row.
     */
    @java.lang.Override
    public int getRow() {
      return row_;
    }

    public static final int SEATTYPE_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object seatType_ = "";
    /**
     * <pre>
     * the new field
     * </pre>
     *
     * <code>optional string seatType = 3;</code>
     * @return Whether the seatType field is set.
     */
    @java.lang.Override
    public boolean hasSeatType() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * the new field
     * </pre>
     *
     * <code>optional string seatType = 3;</code>
     * @return The seatType.
     */
    @java.lang.Override
    public java.lang.String getSeatType() {
      java.lang.Object ref = seatType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.apache.pekko.protobufv3.internal.ByteString bs = 
            (org.apache.pekko.protobufv3.internal.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          seatType_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * the new field
     * </pre>
     *
     * <code>optional string seatType = 3;</code>
     * @return The bytes for seatType.
     */
    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.ByteString
        getSeatTypeBytes() {
      java.lang.Object ref = seatType_;
      if (ref instanceof java.lang.String) {
        org.apache.pekko.protobufv3.internal.ByteString b = 
            org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        seatType_ = b;
        return b;
      } else {
        return (org.apache.pekko.protobufv3.internal.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasLetter()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRow()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.apache.pekko.protobufv3.internal.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.writeString(output, 1, letter_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeUInt32(2, row_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.writeString(output, 3, seatType_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.apache.pekko.protobufv3.internal.GeneratedMessageV3.computeStringSize(1, letter_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.apache.pekko.protobufv3.internal.CodedOutputStream
          .computeUInt32Size(2, row_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.apache.pekko.protobufv3.internal.GeneratedMessageV3.computeStringSize(3, seatType_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof docs.persistence.proto.FlightAppModels.SeatReserved)) {
        return super.equals(obj);
      }
      docs.persistence.proto.FlightAppModels.SeatReserved other = (docs.persistence.proto.FlightAppModels.SeatReserved) obj;

      if (hasLetter() != other.hasLetter()) return false;
      if (hasLetter()) {
        if (!getLetter()
            .equals(other.getLetter())) return false;
      }
      if (hasRow() != other.hasRow()) return false;
      if (hasRow()) {
        if (getRow()
            != other.getRow()) return false;
      }
      if (hasSeatType() != other.hasSeatType()) return false;
      if (hasSeatType()) {
        if (!getSeatType()
            .equals(other.getSeatType())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasLetter()) {
        hash = (37 * hash) + LETTER_FIELD_NUMBER;
        hash = (53 * hash) + getLetter().hashCode();
      }
      if (hasRow()) {
        hash = (37 * hash) + ROW_FIELD_NUMBER;
        hash = (53 * hash) + getRow();
      }
      if (hasSeatType()) {
        hash = (37 * hash) + SEATTYPE_FIELD_NUMBER;
        hash = (53 * hash) + getSeatType().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static docs.persistence.proto.FlightAppModels.SeatReserved parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static docs.persistence.proto.FlightAppModels.SeatReserved parseFrom(
        java.nio.ByteBuffer data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static docs.persistence.proto.FlightAppModels.SeatReserved parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static docs.persistence.proto.FlightAppModels.SeatReserved parseFrom(
        org.apache.pekko.protobufv3.internal.ByteString data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static docs.persistence.proto.FlightAppModels.SeatReserved parseFrom(byte[] data)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static docs.persistence.proto.FlightAppModels.SeatReserved parseFrom(
        byte[] data,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static docs.persistence.proto.FlightAppModels.SeatReserved parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static docs.persistence.proto.FlightAppModels.SeatReserved parseFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static docs.persistence.proto.FlightAppModels.SeatReserved parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static docs.persistence.proto.FlightAppModels.SeatReserved parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static docs.persistence.proto.FlightAppModels.SeatReserved parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static docs.persistence.proto.FlightAppModels.SeatReserved parseFrom(
        org.apache.pekko.protobufv3.internal.CodedInputStream input,
        org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.pekko.protobufv3.internal.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(docs.persistence.proto.FlightAppModels.SeatReserved prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code docs.persistence.SeatReserved}
     */
    public static final class Builder extends
        org.apache.pekko.protobufv3.internal.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:docs.persistence.SeatReserved)
        docs.persistence.proto.FlightAppModels.SeatReservedOrBuilder {
      public static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptor() {
        return docs.persistence.proto.FlightAppModels.internal_static_docs_persistence_SeatReserved_descriptor;
      }

      @java.lang.Override
      protected org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return docs.persistence.proto.FlightAppModels.internal_static_docs_persistence_SeatReserved_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                docs.persistence.proto.FlightAppModels.SeatReserved.class, docs.persistence.proto.FlightAppModels.SeatReserved.Builder.class);
      }

      // Construct using docs.persistence.proto.FlightAppModels.SeatReserved.newBuilder()
      private Builder() {

      }

      private Builder(
          org.apache.pekko.protobufv3.internal.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        letter_ = "";
        row_ = 0;
        seatType_ = "";
        return this;
      }

      @java.lang.Override
      public org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
          getDescriptorForType() {
        return docs.persistence.proto.FlightAppModels.internal_static_docs_persistence_SeatReserved_descriptor;
      }

      @java.lang.Override
      public docs.persistence.proto.FlightAppModels.SeatReserved getDefaultInstanceForType() {
        return docs.persistence.proto.FlightAppModels.SeatReserved.getDefaultInstance();
      }

      @java.lang.Override
      public docs.persistence.proto.FlightAppModels.SeatReserved build() {
        docs.persistence.proto.FlightAppModels.SeatReserved result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public docs.persistence.proto.FlightAppModels.SeatReserved buildPartial() {
        docs.persistence.proto.FlightAppModels.SeatReserved result = new docs.persistence.proto.FlightAppModels.SeatReserved(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(docs.persistence.proto.FlightAppModels.SeatReserved result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.letter_ = letter_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.row_ = row_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.seatType_ = seatType_;
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          org.apache.pekko.protobufv3.internal.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          org.apache.pekko.protobufv3.internal.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(org.apache.pekko.protobufv3.internal.Message other) {
        if (other instanceof docs.persistence.proto.FlightAppModels.SeatReserved) {
          return mergeFrom((docs.persistence.proto.FlightAppModels.SeatReserved)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(docs.persistence.proto.FlightAppModels.SeatReserved other) {
        if (other == docs.persistence.proto.FlightAppModels.SeatReserved.getDefaultInstance()) return this;
        if (other.hasLetter()) {
          letter_ = other.letter_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasRow()) {
          setRow(other.getRow());
        }
        if (other.hasSeatType()) {
          seatType_ = other.seatType_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasLetter()) {
          return false;
        }
        if (!hasRow()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                letter_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                row_ = input.readUInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 26: {
                seatType_ = input.readBytes();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object letter_ = "";
      /**
       * <code>required string letter = 1;</code>
       * @return Whether the letter field is set.
       */
      public boolean hasLetter() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required string letter = 1;</code>
       * @return The letter.
       */
      public java.lang.String getLetter() {
        java.lang.Object ref = letter_;
        if (!(ref instanceof java.lang.String)) {
          org.apache.pekko.protobufv3.internal.ByteString bs =
              (org.apache.pekko.protobufv3.internal.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            letter_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string letter = 1;</code>
       * @return The bytes for letter.
       */
      public org.apache.pekko.protobufv3.internal.ByteString
          getLetterBytes() {
        java.lang.Object ref = letter_;
        if (ref instanceof String) {
          org.apache.pekko.protobufv3.internal.ByteString b = 
              org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          letter_ = b;
          return b;
        } else {
          return (org.apache.pekko.protobufv3.internal.ByteString) ref;
        }
      }
      /**
       * <code>required string letter = 1;</code>
       * @param value The letter to set.
       * @return This builder for chaining.
       */
      public Builder setLetter(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        letter_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required string letter = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearLetter() {
        letter_ = getDefaultInstance().getLetter();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>required string letter = 1;</code>
       * @param value The bytes for letter to set.
       * @return This builder for chaining.
       */
      public Builder setLetterBytes(
          org.apache.pekko.protobufv3.internal.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        letter_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private int row_ ;
      /**
       * <code>required uint32 row = 2;</code>
       * @return Whether the row field is set.
       */
      @java.lang.Override
      public boolean hasRow() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>required uint32 row = 2;</code>
       * @return The row.
       */
      @java.lang.Override
      public int getRow() {
        return row_;
      }
      /**
       * <code>required uint32 row = 2;</code>
       * @param value The row to set.
       * @return This builder for chaining.
       */
      public Builder setRow(int value) {

        row_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 row = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearRow() {
        bitField0_ = (bitField0_ & ~0x00000002);
        row_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object seatType_ = "";
      /**
       * <pre>
       * the new field
       * </pre>
       *
       * <code>optional string seatType = 3;</code>
       * @return Whether the seatType field is set.
       */
      public boolean hasSeatType() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * the new field
       * </pre>
       *
       * <code>optional string seatType = 3;</code>
       * @return The seatType.
       */
      public java.lang.String getSeatType() {
        java.lang.Object ref = seatType_;
        if (!(ref instanceof java.lang.String)) {
          org.apache.pekko.protobufv3.internal.ByteString bs =
              (org.apache.pekko.protobufv3.internal.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            seatType_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the new field
       * </pre>
       *
       * <code>optional string seatType = 3;</code>
       * @return The bytes for seatType.
       */
      public org.apache.pekko.protobufv3.internal.ByteString
          getSeatTypeBytes() {
        java.lang.Object ref = seatType_;
        if (ref instanceof String) {
          org.apache.pekko.protobufv3.internal.ByteString b = 
              org.apache.pekko.protobufv3.internal.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          seatType_ = b;
          return b;
        } else {
          return (org.apache.pekko.protobufv3.internal.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the new field
       * </pre>
       *
       * <code>optional string seatType = 3;</code>
       * @param value The seatType to set.
       * @return This builder for chaining.
       */
      public Builder setSeatType(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        seatType_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the new field
       * </pre>
       *
       * <code>optional string seatType = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearSeatType() {
        seatType_ = getDefaultInstance().getSeatType();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the new field
       * </pre>
       *
       * <code>optional string seatType = 3;</code>
       * @param value The bytes for seatType to set.
       * @return This builder for chaining.
       */
      public Builder setSeatTypeBytes(
          org.apache.pekko.protobufv3.internal.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        seatType_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final org.apache.pekko.protobufv3.internal.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final org.apache.pekko.protobufv3.internal.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:docs.persistence.SeatReserved)
    }

    // @@protoc_insertion_point(class_scope:docs.persistence.SeatReserved)
    private static final docs.persistence.proto.FlightAppModels.SeatReserved DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new docs.persistence.proto.FlightAppModels.SeatReserved();
    }

    public static docs.persistence.proto.FlightAppModels.SeatReserved getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final org.apache.pekko.protobufv3.internal.Parser<SeatReserved>
        PARSER = new org.apache.pekko.protobufv3.internal.AbstractParser<SeatReserved>() {
      @java.lang.Override
      public SeatReserved parsePartialFrom(
          org.apache.pekko.protobufv3.internal.CodedInputStream input,
          org.apache.pekko.protobufv3.internal.ExtensionRegistryLite extensionRegistry)
          throws org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.apache.pekko.protobufv3.internal.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.apache.pekko.protobufv3.internal.Parser<SeatReserved> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.pekko.protobufv3.internal.Parser<SeatReserved> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public docs.persistence.proto.FlightAppModels.SeatReserved getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final org.apache.pekko.protobufv3.internal.Descriptors.Descriptor
    internal_static_docs_persistence_SeatReserved_descriptor;
  private static final 
    org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable
      internal_static_docs_persistence_SeatReserved_fieldAccessorTable;

  public static org.apache.pekko.protobufv3.internal.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  org.apache.pekko.protobufv3.internal.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\025FlightAppModels.proto\022\020docs.persistenc" +
      "e\"=\n\014SeatReserved\022\016\n\006letter\030\001 \002(\t\022\013\n\003row" +
      "\030\002 \002(\r\022\020\n\010seatType\030\003 \001(\tB\032\n\026docs.persist" +
      "ence.protoH\001"
    };
    descriptor = org.apache.pekko.protobufv3.internal.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new org.apache.pekko.protobufv3.internal.Descriptors.FileDescriptor[] {
        });
    internal_static_docs_persistence_SeatReserved_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_docs_persistence_SeatReserved_fieldAccessorTable = new
      org.apache.pekko.protobufv3.internal.GeneratedMessageV3.FieldAccessorTable(
        internal_static_docs_persistence_SeatReserved_descriptor,
        new java.lang.String[] { "Letter", "Row", "SeatType", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
